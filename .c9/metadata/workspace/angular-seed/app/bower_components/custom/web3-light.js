{"filter":false,"title":"web3-light.js","tooltip":"/angular-seed/app/bower_components/custom/web3-light.js","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":13057,"column":0},"action":"insert","lines":["require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){","module.exports=[","  {","    \"constant\": true,","    \"inputs\": [","      {","        \"name\": \"_owner\",","        \"type\": \"address\"","      }","    ],","    \"name\": \"name\",","    \"outputs\": [","      {","        \"name\": \"o_name\",","        \"type\": \"bytes32\"","      }","    ],","    \"type\": \"function\"","  },","  {","    \"constant\": true,","    \"inputs\": [","      {","        \"name\": \"_name\",","        \"type\": \"bytes32\"","      }","    ],","    \"name\": \"owner\",","    \"outputs\": [","      {","        \"name\": \"\",","        \"type\": \"address\"","      }","    ],","    \"type\": \"function\"","  },","  {","    \"constant\": true,","    \"inputs\": [","      {","        \"name\": \"_name\",","        \"type\": \"bytes32\"","      }","    ],","    \"name\": \"content\",","    \"outputs\": [","      {","        \"name\": \"\",","        \"type\": \"bytes32\"","      }","    ],","    \"type\": \"function\"","  },","  {","    \"constant\": true,","    \"inputs\": [","      {","        \"name\": \"_name\",","        \"type\": \"bytes32\"","      }","    ],","    \"name\": \"addr\",","    \"outputs\": [","      {","        \"name\": \"\",","        \"type\": \"address\"","      }","    ],","    \"type\": \"function\"","  },","  {","    \"constant\": false,","    \"inputs\": [","      {","        \"name\": \"_name\",","        \"type\": \"bytes32\"","      }","    ],","    \"name\": \"reserve\",","    \"outputs\": [],","    \"type\": \"function\"","  },","  {","    \"constant\": true,","    \"inputs\": [","      {","        \"name\": \"_name\",","        \"type\": \"bytes32\"","      }","    ],","    \"name\": \"subRegistrar\",","    \"outputs\": [","      {","        \"name\": \"\",","        \"type\": \"address\"","      }","    ],","    \"type\": \"function\"","  },","  {","    \"constant\": false,","    \"inputs\": [","      {","        \"name\": \"_name\",","        \"type\": \"bytes32\"","      },","      {","        \"name\": \"_newOwner\",","        \"type\": \"address\"","      }","    ],","    \"name\": \"transfer\",","    \"outputs\": [],","    \"type\": \"function\"","  },","  {","    \"constant\": false,","    \"inputs\": [","      {","        \"name\": \"_name\",","        \"type\": \"bytes32\"","      },","      {","        \"name\": \"_registrar\",","        \"type\": \"address\"","      }","    ],","    \"name\": \"setSubRegistrar\",","    \"outputs\": [],","    \"type\": \"function\"","  },","  {","    \"constant\": false,","    \"inputs\": [],","    \"name\": \"Registrar\",","    \"outputs\": [],","    \"type\": \"function\"","  },","  {","    \"constant\": false,","    \"inputs\": [","      {","        \"name\": \"_name\",","        \"type\": \"bytes32\"","      },","      {","        \"name\": \"_a\",","        \"type\": \"address\"","      },","      {","        \"name\": \"_primary\",","        \"type\": \"bool\"","      }","    ],","    \"name\": \"setAddress\",","    \"outputs\": [],","    \"type\": \"function\"","  },","  {","    \"constant\": false,","    \"inputs\": [","      {","        \"name\": \"_name\",","        \"type\": \"bytes32\"","      },","      {","        \"name\": \"_content\",","        \"type\": \"bytes32\"","      }","    ],","    \"name\": \"setContent\",","    \"outputs\": [],","    \"type\": \"function\"","  },","  {","    \"constant\": false,","    \"inputs\": [","      {","        \"name\": \"_name\",","        \"type\": \"bytes32\"","      }","    ],","    \"name\": \"disown\",","    \"outputs\": [],","    \"type\": \"function\"","  },","  {","    \"anonymous\": false,","    \"inputs\": [","      {","        \"indexed\": true,","        \"name\": \"_name\",","        \"type\": \"bytes32\"","      },","      {","        \"indexed\": false,","        \"name\": \"_winner\",","        \"type\": \"address\"","      }","    ],","    \"name\": \"AuctionEnded\",","    \"type\": \"event\"","  },","  {","    \"anonymous\": false,","    \"inputs\": [","      {","        \"indexed\": true,","        \"name\": \"_name\",","        \"type\": \"bytes32\"","      },","      {","        \"indexed\": false,","        \"name\": \"_bidder\",","        \"type\": \"address\"","      },","      {","        \"indexed\": false,","        \"name\": \"_value\",","        \"type\": \"uint256\"","      }","    ],","    \"name\": \"NewBid\",","    \"type\": \"event\"","  },","  {","    \"anonymous\": false,","    \"inputs\": [","      {","        \"indexed\": true,","        \"name\": \"name\",","        \"type\": \"bytes32\"","      }","    ],","    \"name\": \"Changed\",","    \"type\": \"event\"","  },","  {","    \"anonymous\": false,","    \"inputs\": [","      {","        \"indexed\": true,","        \"name\": \"name\",","        \"type\": \"bytes32\"","      },","      {","        \"indexed\": true,","        \"name\": \"addr\",","        \"type\": \"address\"","      }","    ],","    \"name\": \"PrimaryChanged\",","    \"type\": \"event\"","  }","]","","},{}],2:[function(require,module,exports){","module.exports=[","  {","    \"constant\": true,","    \"inputs\": [","      {","        \"name\": \"_name\",","        \"type\": \"bytes32\"","      }","    ],","    \"name\": \"owner\",","    \"outputs\": [","      {","        \"name\": \"\",","        \"type\": \"address\"","      }","    ],","    \"type\": \"function\"","  },","  {","    \"constant\": false,","    \"inputs\": [","      {","        \"name\": \"_name\",","        \"type\": \"bytes32\"","      },","      {","        \"name\": \"_refund\",","        \"type\": \"address\"","      }","    ],","    \"name\": \"disown\",","    \"outputs\": [],","    \"type\": \"function\"","  },","  {","    \"constant\": true,","    \"inputs\": [","      {","        \"name\": \"_name\",","        \"type\": \"bytes32\"","      }","    ],","    \"name\": \"addr\",","    \"outputs\": [","      {","        \"name\": \"\",","        \"type\": \"address\"","      }","    ],","    \"type\": \"function\"","  },","  {","    \"constant\": false,","    \"inputs\": [","      {","        \"name\": \"_name\",","        \"type\": \"bytes32\"","      }","    ],","    \"name\": \"reserve\",","    \"outputs\": [],","    \"type\": \"function\"","  },","  {","    \"constant\": false,","    \"inputs\": [","      {","        \"name\": \"_name\",","        \"type\": \"bytes32\"","      },","      {","        \"name\": \"_newOwner\",","        \"type\": \"address\"","      }","    ],","    \"name\": \"transfer\",","    \"outputs\": [],","    \"type\": \"function\"","  },","  {","    \"constant\": false,","    \"inputs\": [","      {","        \"name\": \"_name\",","        \"type\": \"bytes32\"","      },","      {","        \"name\": \"_a\",","        \"type\": \"address\"","      }","    ],","    \"name\": \"setAddr\",","    \"outputs\": [],","    \"type\": \"function\"","  },","  {","    \"anonymous\": false,","    \"inputs\": [","      {","        \"indexed\": true,","        \"name\": \"name\",","        \"type\": \"bytes32\"","      }","    ],","    \"name\": \"Changed\",","    \"type\": \"event\"","  }","]","","},{}],3:[function(require,module,exports){","module.exports=[","  {","    \"constant\": false,","    \"inputs\": [","      {","        \"name\": \"from\",","        \"type\": \"bytes32\"","      },","      {","        \"name\": \"to\",","        \"type\": \"address\"","      },","      {","        \"name\": \"value\",","        \"type\": \"uint256\"","      }","    ],","    \"name\": \"transfer\",","    \"outputs\": [],","    \"type\": \"function\"","  },","  {","    \"constant\": false,","    \"inputs\": [","      {","        \"name\": \"from\",","        \"type\": \"bytes32\"","      },","      {","        \"name\": \"to\",","        \"type\": \"address\"","      },","      {","        \"name\": \"indirectId\",","        \"type\": \"bytes32\"","      },","      {","        \"name\": \"value\",","        \"type\": \"uint256\"","      }","    ],","    \"name\": \"icapTransfer\",","    \"outputs\": [],","    \"type\": \"function\"","  },","  {","    \"constant\": false,","    \"inputs\": [","      {","        \"name\": \"to\",","        \"type\": \"bytes32\"","      }","    ],","    \"name\": \"deposit\",","    \"outputs\": [],","    \"type\": \"function\"","  },","  {","    \"anonymous\": false,","    \"inputs\": [","      {","        \"indexed\": true,","        \"name\": \"from\",","        \"type\": \"address\"","      },","      {","        \"indexed\": false,","        \"name\": \"value\",","        \"type\": \"uint256\"","      }","    ],","    \"name\": \"AnonymousDeposit\",","    \"type\": \"event\"","  },","  {","    \"anonymous\": false,","    \"inputs\": [","      {","        \"indexed\": true,","        \"name\": \"from\",","        \"type\": \"address\"","      },","      {","        \"indexed\": true,","        \"name\": \"to\",","        \"type\": \"bytes32\"","      },","      {","        \"indexed\": false,","        \"name\": \"value\",","        \"type\": \"uint256\"","      }","    ],","    \"name\": \"Deposit\",","    \"type\": \"event\"","  },","  {","    \"anonymous\": false,","    \"inputs\": [","      {","        \"indexed\": true,","        \"name\": \"from\",","        \"type\": \"bytes32\"","      },","      {","        \"indexed\": true,","        \"name\": \"to\",","        \"type\": \"address\"","      },","      {","        \"indexed\": false,","        \"name\": \"value\",","        \"type\": \"uint256\"","      }","    ],","    \"name\": \"Transfer\",","    \"type\": \"event\"","  },","  {","    \"anonymous\": false,","    \"inputs\": [","      {","        \"indexed\": true,","        \"name\": \"from\",","        \"type\": \"bytes32\"","      },","      {","        \"indexed\": true,","        \"name\": \"to\",","        \"type\": \"address\"","      },","      {","        \"indexed\": false,","        \"name\": \"indirectId\",","        \"type\": \"bytes32\"","      },","      {","        \"indexed\": false,","        \"name\": \"value\",","        \"type\": \"uint256\"","      }","    ],","    \"name\": \"IcapTransfer\",","    \"type\": \"event\"","  }","]","","},{}],4:[function(require,module,exports){","var f = require('./formatters');","var SolidityType = require('./type');","","/**"," * SolidityTypeAddress is a prootype that represents address type"," * It matches:"," * address"," * address[]"," * address[4]"," * address[][]"," * address[3][]"," * address[][6][], ..."," */","var SolidityTypeAddress = function () {","    this._inputFormatter = f.formatInputInt;","    this._outputFormatter = f.formatOutputAddress;","};","","SolidityTypeAddress.prototype = new SolidityType({});","SolidityTypeAddress.prototype.constructor = SolidityTypeAddress;","","SolidityTypeAddress.prototype.isType = function (name) {","    return !!name.match(/address(\\[([0-9]*)\\])?/);","};","","SolidityTypeAddress.prototype.staticPartLength = function (name) {","    return 32 * this.staticArrayLength(name);","};","","module.exports = SolidityTypeAddress;","","","},{\"./formatters\":9,\"./type\":14}],5:[function(require,module,exports){","var f = require('./formatters');","var SolidityType = require('./type');","","/**"," * SolidityTypeBool is a prootype that represents bool type"," * It matches:"," * bool"," * bool[]"," * bool[4]"," * bool[][]"," * bool[3][]"," * bool[][6][], ..."," */","var SolidityTypeBool = function () {","    this._inputFormatter = f.formatInputBool;","    this._outputFormatter = f.formatOutputBool;","};","","SolidityTypeBool.prototype = new SolidityType({});","SolidityTypeBool.prototype.constructor = SolidityTypeBool;","","SolidityTypeBool.prototype.isType = function (name) {","    return !!name.match(/^bool(\\[([0-9]*)\\])*$/);","};","","SolidityTypeBool.prototype.staticPartLength = function (name) {","    return 32 * this.staticArrayLength(name);","};","","module.exports = SolidityTypeBool;","","},{\"./formatters\":9,\"./type\":14}],6:[function(require,module,exports){","var f = require('./formatters');","var SolidityType = require('./type');","","/**"," * SolidityTypeBytes is a prootype that represents bytes type"," * It matches:"," * bytes"," * bytes[]"," * bytes[4]"," * bytes[][]"," * bytes[3][]"," * bytes[][6][], ..."," * bytes32"," * bytes64[]"," * bytes8[4]"," * bytes256[][]"," * bytes[3][]"," * bytes64[][6][], ..."," */","var SolidityTypeBytes = function () {","    this._inputFormatter = f.formatInputBytes;","    this._outputFormatter = f.formatOutputBytes;","};","","SolidityTypeBytes.prototype = new SolidityType({});","SolidityTypeBytes.prototype.constructor = SolidityTypeBytes;","","SolidityTypeBytes.prototype.isType = function (name) {","    return !!name.match(/^bytes([0-9]{1,})(\\[([0-9]*)\\])*$/);","};","","SolidityTypeBytes.prototype.staticPartLength = function (name) {","    var matches = name.match(/^bytes([0-9]*)/);","    var size = parseInt(matches[1]);","    return size * this.staticArrayLength(name);","};","","module.exports = SolidityTypeBytes;","","},{\"./formatters\":9,\"./type\":14}],7:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/** "," * @file coder.js"," * @author Marek Kotewicz <marek@ethdev.com>"," * @date 2015"," */","","var f = require('./formatters');","","var SolidityTypeAddress = require('./address');","var SolidityTypeBool = require('./bool');","var SolidityTypeInt = require('./int');","var SolidityTypeUInt = require('./uint');","var SolidityTypeDynamicBytes = require('./dynamicbytes');","var SolidityTypeString = require('./string');","var SolidityTypeReal = require('./real');","var SolidityTypeUReal = require('./ureal');","var SolidityTypeBytes = require('./bytes');","","/**"," * SolidityCoder prototype should be used to encode/decode solidity params of any type"," */","var SolidityCoder = function (types) {","    this._types = types;","};","","/**"," * This method should be used to transform type to SolidityType"," *"," * @method _requireType"," * @param {String} type"," * @returns {SolidityType} "," * @throws {Error} throws if no matching type is found"," */","SolidityCoder.prototype._requireType = function (type) {","    var solidityType = this._types.filter(function (t) {","        return t.isType(type);","    })[0];","","    if (!solidityType) {","        throw Error('invalid solidity type!: ' + type);","    }","","    return solidityType;","};","","/**"," * Should be used to encode plain param"," *"," * @method encodeParam"," * @param {String} type"," * @param {Object} plain param"," * @return {String} encoded plain param"," */","SolidityCoder.prototype.encodeParam = function (type, param) {","    return this.encodeParams([type], [param]);","};","","/**"," * Should be used to encode list of params"," *"," * @method encodeParams"," * @param {Array} types"," * @param {Array} params"," * @return {String} encoded list of params"," */","SolidityCoder.prototype.encodeParams = function (types, params) {","    var solidityTypes = this.getSolidityTypes(types);","","    var encodeds = solidityTypes.map(function (solidityType, index) {","        return solidityType.encode(params[index], types[index]);","    });","","    var dynamicOffset = solidityTypes.reduce(function (acc, solidityType, index) {","        var staticPartLength = solidityType.staticPartLength(types[index]);","        var roundedStaticPartLength = Math.floor((staticPartLength + 31) / 32) * 32;","        return acc + roundedStaticPartLength;","    }, 0);","","    var result = this.encodeMultiWithOffset(types, solidityTypes, encodeds, dynamicOffset); ","","    return result;","};","","SolidityCoder.prototype.encodeMultiWithOffset = function (types, solidityTypes, encodeds, dynamicOffset) {","    var result = \"\";","    var self = this;","","    var isDynamic = function (i) {","       return solidityTypes[i].isDynamicArray(types[i]) || solidityTypes[i].isDynamicType(types[i]);","    };","","    types.forEach(function (type, i) {","        if (isDynamic(i)) {","            result += f.formatInputInt(dynamicOffset).encode();","            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);","            dynamicOffset += e.length / 2;","        } else {","            // don't add length to dynamicOffset. it's already counted","            result += self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);","        }","","        // TODO: figure out nested arrays","    });","    ","    types.forEach(function (type, i) {","        if (isDynamic(i)) {","            var e = self.encodeWithOffset(types[i], solidityTypes[i], encodeds[i], dynamicOffset);","            dynamicOffset += e.length / 2;","            result += e;","        }","    });","    return result;","};","","// TODO: refactor whole encoding!","SolidityCoder.prototype.encodeWithOffset = function (type, solidityType, encoded, offset) {","    var self = this;","    if (solidityType.isDynamicArray(type)) {","        return (function () {","            // offset was already set","            var nestedName = solidityType.nestedName(type);","            var nestedStaticPartLength = solidityType.staticPartLength(nestedName);","            var result = encoded[0];","            ","            (function () {","                var previousLength = 2; // in int","                if (solidityType.isDynamicArray(nestedName)) {","                    for (var i = 1; i < encoded.length; i++) {","                        previousLength += +(encoded[i - 1])[0] || 0;","                        result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();","                    }","                }","            })();","            ","            // first element is length, skip it","            (function () {","                for (var i = 0; i < encoded.length - 1; i++) {","                    var additionalOffset = result / 2;","                    result += self.encodeWithOffset(nestedName, solidityType, encoded[i + 1], offset +  additionalOffset);","                }","            })();","","            return result;","        })();","       ","    } else if (solidityType.isStaticArray(type)) {","        return (function () {","            var nestedName = solidityType.nestedName(type);","            var nestedStaticPartLength = solidityType.staticPartLength(nestedName);","            var result = \"\";","","","            if (solidityType.isDynamicArray(nestedName)) {","                (function () {","                    var previousLength = 0; // in int","                    for (var i = 0; i < encoded.length; i++) {","                        // calculate length of previous item","                        previousLength += +(encoded[i - 1] || [])[0] || 0; ","                        result += f.formatInputInt(offset + i * nestedStaticPartLength + previousLength * 32).encode();","                    }","                })();","            }","","            (function () {","                for (var i = 0; i < encoded.length; i++) {","                    var additionalOffset = result / 2;","                    result += self.encodeWithOffset(nestedName, solidityType, encoded[i], offset + additionalOffset);","                }","            })();","","            return result;","        })();","    }","","    return encoded;","};","","/**"," * Should be used to decode bytes to plain param"," *"," * @method decodeParam"," * @param {String} type"," * @param {String} bytes"," * @return {Object} plain param"," */","SolidityCoder.prototype.decodeParam = function (type, bytes) {","    return this.decodeParams([type], bytes)[0];","};","","/**"," * Should be used to decode list of params"," *"," * @method decodeParam"," * @param {Array} types"," * @param {String} bytes"," * @return {Array} array of plain params"," */","SolidityCoder.prototype.decodeParams = function (types, bytes) {","    var solidityTypes = this.getSolidityTypes(types);","    var offsets = this.getOffsets(types, solidityTypes);","        ","    return solidityTypes.map(function (solidityType, index) {","        return solidityType.decode(bytes, offsets[index],  types[index], index);","    });","};","","SolidityCoder.prototype.getOffsets = function (types, solidityTypes) {","    var lengths =  solidityTypes.map(function (solidityType, index) {","        return solidityType.staticPartLength(types[index]);","    });","    ","    for (var i = 1; i < lengths.length; i++) {","         // sum with length of previous element","        lengths[i] += lengths[i - 1]; ","    }","","    return lengths.map(function (length, index) {","        // remove the current length, so the length is sum of previous elements","        var staticPartLength = solidityTypes[index].staticPartLength(types[index]);","        return length - staticPartLength; ","    });","};","","SolidityCoder.prototype.getSolidityTypes = function (types) {","    var self = this;","    return types.map(function (type) {","        return self._requireType(type);","    });","};","","var coder = new SolidityCoder([","    new SolidityTypeAddress(),","    new SolidityTypeBool(),","    new SolidityTypeInt(),","    new SolidityTypeUInt(),","    new SolidityTypeDynamicBytes(),","    new SolidityTypeBytes(),","    new SolidityTypeString(),","    new SolidityTypeReal(),","    new SolidityTypeUReal()","]);","","module.exports = coder;","","","},{\"./address\":4,\"./bool\":5,\"./bytes\":6,\"./dynamicbytes\":8,\"./formatters\":9,\"./int\":10,\"./real\":12,\"./string\":13,\"./uint\":15,\"./ureal\":16}],8:[function(require,module,exports){","var f = require('./formatters');","var SolidityType = require('./type');","","var SolidityTypeDynamicBytes = function () {","    this._inputFormatter = f.formatInputDynamicBytes;","    this._outputFormatter = f.formatOutputDynamicBytes;","};","","SolidityTypeDynamicBytes.prototype = new SolidityType({});","SolidityTypeDynamicBytes.prototype.constructor = SolidityTypeDynamicBytes;","","SolidityTypeDynamicBytes.prototype.isType = function (name) {","    return !!name.match(/^bytes(\\[([0-9]*)\\])*$/);","};","","SolidityTypeDynamicBytes.prototype.staticPartLength = function (name) {","    return 32 * this.staticArrayLength(name);","};","","SolidityTypeDynamicBytes.prototype.isDynamicType = function () {","    return true;","};","","module.exports = SolidityTypeDynamicBytes;","","","},{\"./formatters\":9,\"./type\":14}],9:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/** "," * @file formatters.js"," * @author Marek Kotewicz <marek@ethdev.com>"," * @date 2015"," */","","var BigNumber = require('bignumber.js');","var utils = require('../utils/utils');","var c = require('../utils/config');","var SolidityParam = require('./param');","","","/**"," * Formats input value to byte representation of int"," * If value is negative, return it's two's complement"," * If the value is floating point, round it down"," *"," * @method formatInputInt"," * @param {String|Number|BigNumber} value that needs to be formatted"," * @returns {SolidityParam}"," */","var formatInputInt = function (value) {","    BigNumber.config(c.ETH_BIGNUMBER_ROUNDING_MODE);","    var result = utils.padLeft(utils.toTwosComplement(value).round().toString(16), 64);","    return new SolidityParam(result);","};","","/**"," * Formats input bytes"," *"," * @method formatInputBytes"," * @param {String}"," * @returns {SolidityParam}"," */","var formatInputBytes = function (value) {","    var result = utils.toHex(value).substr(2);","    var l = Math.floor((result.length + 63) / 64);","    result = utils.padRight(result, l * 64);","    return new SolidityParam(result);","};","","/**"," * Formats input bytes"," *"," * @method formatDynamicInputBytes"," * @param {String}"," * @returns {SolidityParam}"," */","var formatInputDynamicBytes = function (value) {","    var result = utils.toHex(value).substr(2);","    var length = result.length / 2;","    var l = Math.floor((result.length + 63) / 64);","    result = utils.padRight(result, l * 64);","    return new SolidityParam(formatInputInt(length).value + result);","};","","/**"," * Formats input value to byte representation of string"," *"," * @method formatInputString"," * @param {String}"," * @returns {SolidityParam}"," */","var formatInputString = function (value) {","    var result = utils.fromUtf8(value).substr(2);","    var length = result.length / 2;","    var l = Math.floor((result.length + 63) / 64);","    result = utils.padRight(result, l * 64);","    return new SolidityParam(formatInputInt(length).value + result);","};","","/**"," * Formats input value to byte representation of bool"," *"," * @method formatInputBool"," * @param {Boolean}"," * @returns {SolidityParam}"," */","var formatInputBool = function (value) {","    var result = '000000000000000000000000000000000000000000000000000000000000000' + (value ?  '1' : '0');","    return new SolidityParam(result);","};","","/**"," * Formats input value to byte representation of real"," * Values are multiplied by 2^m and encoded as integers"," *"," * @method formatInputReal"," * @param {String|Number|BigNumber}"," * @returns {SolidityParam}"," */","var formatInputReal = function (value) {","    return formatInputInt(new BigNumber(value).times(new BigNumber(2).pow(128)));","};","","/**"," * Check if input value is negative"," *"," * @method signedIsNegative"," * @param {String} value is hex format"," * @returns {Boolean} true if it is negative, otherwise false"," */","var signedIsNegative = function (value) {","    return (new BigNumber(value.substr(0, 1), 16).toString(2).substr(0, 1)) === '1';","};","","/**"," * Formats right-aligned output bytes to int"," *"," * @method formatOutputInt"," * @param {SolidityParam} param"," * @returns {BigNumber} right-aligned output bytes formatted to big number"," */","var formatOutputInt = function (param) {","    var value = param.staticPart() || \"0\";","","    // check if it's negative number","    // it it is, return two's complement","    if (signedIsNegative(value)) {","        return new BigNumber(value, 16).minus(new BigNumber('ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff', 16)).minus(1);","    }","    return new BigNumber(value, 16);","};","","/**"," * Formats right-aligned output bytes to uint"," *"," * @method formatOutputUInt"," * @param {SolidityParam}"," * @returns {BigNumeber} right-aligned output bytes formatted to uint"," */","var formatOutputUInt = function (param) {","    var value = param.staticPart() || \"0\";","    return new BigNumber(value, 16);","};","","/**"," * Formats right-aligned output bytes to real"," *"," * @method formatOutputReal"," * @param {SolidityParam}"," * @returns {BigNumber} input bytes formatted to real"," */","var formatOutputReal = function (param) {","    return formatOutputInt(param).dividedBy(new BigNumber(2).pow(128)); ","};","","/**"," * Formats right-aligned output bytes to ureal"," *"," * @method formatOutputUReal"," * @param {SolidityParam}"," * @returns {BigNumber} input bytes formatted to ureal"," */","var formatOutputUReal = function (param) {","    return formatOutputUInt(param).dividedBy(new BigNumber(2).pow(128)); ","};","","/**"," * Should be used to format output bool"," *"," * @method formatOutputBool"," * @param {SolidityParam}"," * @returns {Boolean} right-aligned input bytes formatted to bool"," */","var formatOutputBool = function (param) {","    return param.staticPart() === '0000000000000000000000000000000000000000000000000000000000000001' ? true : false;","};","","/**"," * Should be used to format output bytes"," *"," * @method formatOutputBytes"," * @param {SolidityParam} left-aligned hex representation of string"," * @returns {String} hex string"," */","var formatOutputBytes = function (param) {","    return '0x' + param.staticPart();","};","","/**"," * Should be used to format output bytes"," *"," * @method formatOutputDynamicBytes"," * @param {SolidityParam} left-aligned hex representation of string"," * @returns {String} hex string"," */","var formatOutputDynamicBytes = function (param) {","    var length = (new BigNumber(param.dynamicPart().slice(0, 64), 16)).toNumber() * 2;","    return '0x' + param.dynamicPart().substr(64, length);","};","","/**"," * Should be used to format output string"," *"," * @method formatOutputString"," * @param {SolidityParam} left-aligned hex representation of string"," * @returns {String} ascii string"," */","var formatOutputString = function (param) {","    var length = (new BigNumber(param.dynamicPart().slice(0, 2), 16)).toNumber() * 2;","    return utils.toUtf8(param.dynamicPart().substr(2, length));","};","","/**"," * Should be used to format output address"," *"," * @method formatOutputAddress"," * @param {SolidityParam} right-aligned input bytes"," * @returns {String} address"," */","var formatOutputAddress = function (param) {","    var value = param.staticPart();","    return \"0x\" + value.slice(value.length - 40, value.length);","};","","module.exports = {","    formatInputInt: formatInputInt,","    formatInputBytes: formatInputBytes,","    formatInputDynamicBytes: formatInputDynamicBytes,","    formatInputString: formatInputString,","    formatInputBool: formatInputBool,","    formatInputReal: formatInputReal,","    formatOutputInt: formatOutputInt,","    formatOutputUInt: formatOutputUInt,","    formatOutputReal: formatOutputReal,","    formatOutputUReal: formatOutputUReal,","    formatOutputBool: formatOutputBool,","    formatOutputBytes: formatOutputBytes,","    formatOutputDynamicBytes: formatOutputDynamicBytes,","    formatOutputString: formatOutputString,","    formatOutputAddress: formatOutputAddress","};","","","},{\"../utils/config\":18,\"../utils/utils\":20,\"./param\":11,\"bignumber.js\":\"bignumber.js\"}],10:[function(require,module,exports){","var f = require('./formatters');","var SolidityType = require('./type');","","/**"," * SolidityTypeInt is a prootype that represents int type"," * It matches:"," * int"," * int[]"," * int[4]"," * int[][]"," * int[3][]"," * int[][6][], ..."," * int32"," * int64[]"," * int8[4]"," * int256[][]"," * int[3][]"," * int64[][6][], ..."," */","var SolidityTypeInt = function () {","    this._inputFormatter = f.formatInputInt;","    this._outputFormatter = f.formatOutputInt;","};","","SolidityTypeInt.prototype = new SolidityType({});","SolidityTypeInt.prototype.constructor = SolidityTypeInt;","","SolidityTypeInt.prototype.isType = function (name) {","    return !!name.match(/^int([0-9]*)?(\\[([0-9]*)\\])*$/);","};","","SolidityTypeInt.prototype.staticPartLength = function (name) {","    return 32 * this.staticArrayLength(name);","};","","module.exports = SolidityTypeInt;","","},{\"./formatters\":9,\"./type\":14}],11:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/** "," * @file param.js"," * @author Marek Kotewicz <marek@ethdev.com>"," * @date 2015"," */","","var utils = require('../utils/utils');","","/**"," * SolidityParam object prototype."," * Should be used when encoding, decoding solidity bytes"," */","var SolidityParam = function (value, offset) {","    this.value = value || '';","    this.offset = offset; // offset in bytes","};","","/**"," * This method should be used to get length of params's dynamic part"," * "," * @method dynamicPartLength"," * @returns {Number} length of dynamic part (in bytes)"," */","SolidityParam.prototype.dynamicPartLength = function () {","    return this.dynamicPart().length / 2;","};","","/**"," * This method should be used to create copy of solidity param with different offset"," *"," * @method withOffset"," * @param {Number} offset length in bytes"," * @returns {SolidityParam} new solidity param with applied offset"," */","SolidityParam.prototype.withOffset = function (offset) {","    return new SolidityParam(this.value, offset);","};","","/**"," * This method should be used to combine solidity params together"," * eg. when appending an array"," *"," * @method combine"," * @param {SolidityParam} param with which we should combine"," * @param {SolidityParam} result of combination"," */","SolidityParam.prototype.combine = function (param) {","    return new SolidityParam(this.value + param.value); ","};","","/**"," * This method should be called to check if param has dynamic size."," * If it has, it returns true, otherwise false"," *"," * @method isDynamic"," * @returns {Boolean}"," */","SolidityParam.prototype.isDynamic = function () {","    return this.offset !== undefined;","};","","/**"," * This method should be called to transform offset to bytes"," *"," * @method offsetAsBytes"," * @returns {String} bytes representation of offset"," */","SolidityParam.prototype.offsetAsBytes = function () {","    return !this.isDynamic() ? '' : utils.padLeft(utils.toTwosComplement(this.offset).toString(16), 64);","};","","/**"," * This method should be called to get static part of param"," *"," * @method staticPart"," * @returns {String} offset if it is a dynamic param, otherwise value"," */","SolidityParam.prototype.staticPart = function () {","    if (!this.isDynamic()) {","        return this.value; ","    } ","    return this.offsetAsBytes();","};","","/**"," * This method should be called to get dynamic part of param"," *"," * @method dynamicPart"," * @returns {String} returns a value if it is a dynamic param, otherwise empty string"," */","SolidityParam.prototype.dynamicPart = function () {","    return this.isDynamic() ? this.value : '';","};","","/**"," * This method should be called to encode param"," *"," * @method encode"," * @returns {String}"," */","SolidityParam.prototype.encode = function () {","    return this.staticPart() + this.dynamicPart();","};","","/**"," * This method should be called to encode array of params"," *"," * @method encodeList"," * @param {Array[SolidityParam]} params"," * @returns {String}"," */","SolidityParam.encodeList = function (params) {","    ","    // updating offsets","    var totalOffset = params.length * 32;","    var offsetParams = params.map(function (param) {","        if (!param.isDynamic()) {","            return param;","        }","        var offset = totalOffset;","        totalOffset += param.dynamicPartLength();","        return param.withOffset(offset);","    });","","    // encode everything!","    return offsetParams.reduce(function (result, param) {","        return result + param.dynamicPart();","    }, offsetParams.reduce(function (result, param) {","        return result + param.staticPart();","    }, ''));","};","","","","module.exports = SolidityParam;","","","},{\"../utils/utils\":20}],12:[function(require,module,exports){","var f = require('./formatters');","var SolidityType = require('./type');","","/**"," * SolidityTypeReal is a prootype that represents real type"," * It matches:"," * real"," * real[]"," * real[4]"," * real[][]"," * real[3][]"," * real[][6][], ..."," * real32"," * real64[]"," * real8[4]"," * real256[][]"," * real[3][]"," * real64[][6][], ..."," */","var SolidityTypeReal = function () {","    this._inputFormatter = f.formatInputReal;","    this._outputFormatter = f.formatOutputReal;","};","","SolidityTypeReal.prototype = new SolidityType({});","SolidityTypeReal.prototype.constructor = SolidityTypeReal;","","SolidityTypeReal.prototype.isType = function (name) {","    return !!name.match(/real([0-9]*)?(\\[([0-9]*)\\])?/);","};","","SolidityTypeReal.prototype.staticPartLength = function (name) {","    return 32 * this.staticArrayLength(name);","};","","module.exports = SolidityTypeReal;","","},{\"./formatters\":9,\"./type\":14}],13:[function(require,module,exports){","var f = require('./formatters');","var SolidityType = require('./type');","","var SolidityTypeString = function () {","    this._inputFormatter = f.formatInputString;","    this._outputFormatter = f.formatOutputString;","};","","SolidityTypeString.prototype = new SolidityType({});","SolidityTypeString.prototype.constructor = SolidityTypeString;","","SolidityTypeString.prototype.isType = function (name) {","    return !!name.match(/^string(\\[([0-9]*)\\])*$/);","};","","SolidityTypeString.prototype.staticPartLength = function (name) {","    return 32 * this.staticArrayLength(name);","};","","SolidityTypeString.prototype.isDynamicType = function () {","    return true;","};","","module.exports = SolidityTypeString;","","","},{\"./formatters\":9,\"./type\":14}],14:[function(require,module,exports){","var f = require('./formatters');","var SolidityParam = require('./param');","","/**"," * SolidityType prototype is used to encode/decode solidity params of certain type"," */","var SolidityType = function (config) {","    this._inputFormatter = config.inputFormatter;","    this._outputFormatter = config.outputFormatter;","};","","/**"," * Should be used to determine if this SolidityType do match given name"," *"," * @method isType"," * @param {String} name"," * @return {Bool} true if type match this SolidityType, otherwise false"," */","SolidityType.prototype.isType = function (name) {","    throw \"this method should be overrwritten for type \" + name;","};","","/**"," * Should be used to determine what is the length of static part in given type"," *"," * @method staticPartLength"," * @param {String} name"," * @return {Number} length of static part in bytes"," */","SolidityType.prototype.staticPartLength = function (name) {","    throw \"this method should be overrwritten for type: \" + name;","};","","/**"," * Should be used to determine if type is dynamic array"," * eg: "," * \"type[]\" => true"," * \"type[4]\" => false"," *"," * @method isDynamicArray"," * @param {String} name"," * @return {Bool} true if the type is dynamic array "," */","SolidityType.prototype.isDynamicArray = function (name) {","    var nestedTypes = this.nestedTypes(name);","    return !!nestedTypes && !nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);","};","","/**"," * Should be used to determine if type is static array"," * eg: "," * \"type[]\" => false"," * \"type[4]\" => true"," *"," * @method isStaticArray"," * @param {String} name"," * @return {Bool} true if the type is static array "," */","SolidityType.prototype.isStaticArray = function (name) {","    var nestedTypes = this.nestedTypes(name);","    return !!nestedTypes && !!nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g);","};","","/**"," * Should return length of static array"," * eg. "," * \"int[32]\" => 32"," * \"int256[14]\" => 14"," * \"int[2][3]\" => 3"," * \"int\" => 1"," * \"int[1]\" => 1"," * \"int[]\" => 1"," *"," * @method staticArrayLength"," * @param {String} name"," * @return {Number} static array length"," */","SolidityType.prototype.staticArrayLength = function (name) {","    var nestedTypes = this.nestedTypes(name);","    if (nestedTypes) {","       return parseInt(nestedTypes[nestedTypes.length - 1].match(/[0-9]{1,}/g) || 1);","    }","    return 1;","};","","/**"," * Should return nested type"," * eg."," * \"int[32]\" => \"int\""," * \"int256[14]\" => \"int256\""," * \"int[2][3]\" => \"int[2]\""," * \"int\" => \"int\""," * \"int[]\" => \"int\""," *"," * @method nestedName"," * @param {String} name"," * @return {String} nested name"," */","SolidityType.prototype.nestedName = function (name) {","    // remove last [] in name","    var nestedTypes = this.nestedTypes(name);","    if (!nestedTypes) {","        return name;","    }","","    return name.substr(0, name.length - nestedTypes[nestedTypes.length - 1].length);","};","","/**"," * Should return true if type has dynamic size by default"," * such types are \"string\", \"bytes\""," *"," * @method isDynamicType"," * @param {String} name"," * @return {Bool} true if is dynamic, otherwise false"," */","SolidityType.prototype.isDynamicType = function () {","    return false;","};","","/**"," * Should return array of nested types"," * eg."," * \"int[2][3][]\" => [\"[2]\", \"[3]\", \"[]\"]"," * \"int[] => [\"[]\"]"," * \"int\" => null"," *"," * @method nestedTypes"," * @param {String} name"," * @return {Array} array of nested types"," */","SolidityType.prototype.nestedTypes = function (name) {","    // return list of strings eg. \"[]\", \"[3]\", \"[]\", \"[2]\"","    return name.match(/(\\[[0-9]*\\])/g);","};","","/**"," * Should be used to encode the value"," *"," * @method encode"," * @param {Object} value "," * @param {String} name"," * @return {String} encoded value"," */","SolidityType.prototype.encode = function (value, name) {","    var self = this;","    if (this.isDynamicArray(name)) {","","        return (function () {","            var length = value.length;                          // in int","            var nestedName = self.nestedName(name);","","            var result = [];","            result.push(f.formatInputInt(length).encode());","            ","            value.forEach(function (v) {","                result.push(self.encode(v, nestedName));","            });","","            return result;","        })();","","    } else if (this.isStaticArray(name)) {","","        return (function () {","            var length = self.staticArrayLength(name);          // in int","            var nestedName = self.nestedName(name);","","            var result = [];","            for (var i = 0; i < length; i++) {","                result.push(self.encode(value[i], nestedName));","            }","","            return result;","        })();","","    }","","    return this._inputFormatter(value, name).encode();","};","","/**"," * Should be used to decode value from bytes"," *"," * @method decode"," * @param {String} bytes"," * @param {Number} offset in bytes"," * @param {String} name type name"," * @returns {Object} decoded value"," */","SolidityType.prototype.decode = function (bytes, offset, name) {","    var self = this;","","    if (this.isDynamicArray(name)) {","","        return (function () {","            // ***fix","            // var arrayOffset = parseInt('0x' + bytes.substr(offset * 2, 64)); // in bytes","            var arrayOffset = 1; // in bytes","            var length = parseInt('0x' + bytes.substr(arrayOffset * 2, 64)); // in int","            var arrayStart = arrayOffset + 32; // array starts after length; // in bytes","","            var nestedName = self.nestedName(name);","            var nestedStaticPartLength = self.staticPartLength(nestedName);  // in bytes","            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;","            var result = [];","","            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {","                result.push(self.decode(bytes, arrayStart + i, nestedName));","            }","","            return result;","        })();","","    } else if (this.isStaticArray(name)) {","","        return (function () {","            var length = self.staticArrayLength(name);                      // in int","            var arrayStart = offset;                                        // in bytes","","            var nestedName = self.nestedName(name);","            var nestedStaticPartLength = self.staticPartLength(nestedName); // in bytes","            var roundedNestedStaticPartLength = Math.floor((nestedStaticPartLength + 31) / 32) * 32;","            var result = [];","","            for (var i = 0; i < length * roundedNestedStaticPartLength; i += roundedNestedStaticPartLength) {","                result.push(self.decode(bytes, arrayStart + i, nestedName));","            }","","            return result;","        })();","        ","    } else if (name === 'string'){","","      return (function () {","        return (bytes === '0') ? '' : self._outputFormatter(new SolidityParam(bytes.substr(64), 0));","      })();","","    } else if (this.isDynamicType(name)) {","        ","        return (function () {","            var dynamicOffset = parseInt('0x' + bytes.substr(offset * 2, 64));      // in bytes","            var length = parseInt('0x' + bytes.substr(dynamicOffset * 2, 64));      // in bytes","            var roundedLength = Math.floor((length + 31) / 32);                     // in int","        ","            return self._outputFormatter(new SolidityParam(bytes.substr(dynamicOffset * 2, ( 1 + roundedLength) * 64), 0));","        })();","    }","","    var length = this.staticPartLength(name);","    return this._outputFormatter(new SolidityParam(bytes.substr(offset * 2, length * 2)));","};","","module.exports = SolidityType;","","},{\"./formatters\":9,\"./param\":11}],15:[function(require,module,exports){","var f = require('./formatters');","var SolidityType = require('./type');","","/**"," * SolidityTypeUInt is a prootype that represents uint type"," * It matches:"," * uint"," * uint[]"," * uint[4]"," * uint[][]"," * uint[3][]"," * uint[][6][], ..."," * uint32"," * uint64[]"," * uint8[4]"," * uint256[][]"," * uint[3][]"," * uint64[][6][], ..."," */","var SolidityTypeUInt = function () {","    this._inputFormatter = f.formatInputInt;","    this._outputFormatter = f.formatOutputUInt;","};","","SolidityTypeUInt.prototype = new SolidityType({});","SolidityTypeUInt.prototype.constructor = SolidityTypeUInt;","","SolidityTypeUInt.prototype.isType = function (name) {","    return !!name.match(/^uint([0-9]*)?(\\[([0-9]*)\\])*$/);","};","","SolidityTypeUInt.prototype.staticPartLength = function (name) {","    return 32 * this.staticArrayLength(name);","};","","module.exports = SolidityTypeUInt;","","},{\"./formatters\":9,\"./type\":14}],16:[function(require,module,exports){","var f = require('./formatters');","var SolidityType = require('./type');","","/**"," * SolidityTypeUReal is a prootype that represents ureal type"," * It matches:"," * ureal"," * ureal[]"," * ureal[4]"," * ureal[][]"," * ureal[3][]"," * ureal[][6][], ..."," * ureal32"," * ureal64[]"," * ureal8[4]"," * ureal256[][]"," * ureal[3][]"," * ureal64[][6][], ..."," */","var SolidityTypeUReal = function () {","    this._inputFormatter = f.formatInputReal;","    this._outputFormatter = f.formatOutputUReal;","};","","SolidityTypeUReal.prototype = new SolidityType({});","SolidityTypeUReal.prototype.constructor = SolidityTypeUReal;","","SolidityTypeUReal.prototype.isType = function (name) {","    return !!name.match(/^ureal([0-9]*)?(\\[([0-9]*)\\])*$/);","};","","SolidityTypeUReal.prototype.staticPartLength = function (name) {","    return 32 * this.staticArrayLength(name);","};","","module.exports = SolidityTypeUReal;","","},{\"./formatters\":9,\"./type\":14}],17:[function(require,module,exports){","'use strict';","","// go env doesn't have and need XMLHttpRequest","if (typeof XMLHttpRequest === 'undefined') {","    exports.XMLHttpRequest = {};","} else {","    exports.XMLHttpRequest = XMLHttpRequest; // jshint ignore:line","}","","","},{}],18:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/** @file config.js"," * @authors:"," *   Marek Kotewicz <marek@ethdev.com>"," * @date 2015"," */","","/**"," * Utils"," * "," * @module utils"," */","","/**"," * Utility functions"," * "," * @class [utils] config"," * @constructor"," */","","","/// required to define ETH_BIGNUMBER_ROUNDING_MODE","var BigNumber = require('bignumber.js');","","var ETH_UNITS = [","    'wei',","    'kwei',","    'Mwei',","    'Gwei',","    'szabo',","    'finney',","    'femtoether',","    'picoether',","    'nanoether',","    'microether',","    'milliether',","    'nano',","    'micro',","    'milli',","    'ether',","    'grand',","    'Mether',","    'Gether',","    'Tether',","    'Pether',","    'Eether',","    'Zether',","    'Yether',","    'Nether',","    'Dether',","    'Vether',","    'Uether'","];","","module.exports = {","    ETH_PADDING: 32,","    ETH_SIGNATURE_LENGTH: 4,","    ETH_UNITS: ETH_UNITS,","    ETH_BIGNUMBER_ROUNDING_MODE: { ROUNDING_MODE: BigNumber.ROUND_DOWN },","    ETH_POLLING_TIMEOUT: 1000/2,","    defaultBlock: 'latest',","    defaultAccount: undefined","};","","","},{\"bignumber.js\":\"bignumber.js\"}],19:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/** "," * @file sha3.js"," * @author Marek Kotewicz <marek@ethdev.com>"," * @date 2015"," */","","var CryptoJS = require('crypto-js');","var sha3 = require('crypto-js/sha3');","","module.exports = function (value, options) {","    if (options && options.encoding === 'hex') {","        if (value.length > 2 && value.substr(0, 2) === '0x') {","            value = value.substr(2);","        }","        value = CryptoJS.enc.Hex.parse(value);","    }","","    return sha3(value, {","        outputLength: 256","    }).toString();","};","","","},{\"crypto-js\":57,\"crypto-js/sha3\":78}],20:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/**"," * @file utils.js"," * @author Marek Kotewicz <marek@ethdev.com>"," * @date 2015"," */","","/**"," * Utils"," *"," * @module utils"," */","","/**"," * Utility functions"," *"," * @class [utils] utils"," * @constructor"," */","","","var BigNumber = require('bignumber.js');","var utf8 = require('utf8');","","var unitMap = {","    'wei':          '1',","    'kwei':         '1000',","    'ada':          '1000',","    'femtoether':   '1000',","    'mwei':         '1000000',","    'babbage':      '1000000',","    'picoether':    '1000000',","    'gwei':         '1000000000',","    'shannon':      '1000000000',","    'nanoether':    '1000000000',","    'nano':         '1000000000',","    'szabo':        '1000000000000',","    'microether':   '1000000000000',","    'micro':        '1000000000000',","    'finney':       '1000000000000000',","    'milliether':    '1000000000000000',","    'milli':         '1000000000000000',","    'ether':        '1000000000000000000',","    'kether':       '1000000000000000000000',","    'grand':        '1000000000000000000000',","    'einstein':     '1000000000000000000000',","    'mether':       '1000000000000000000000000',","    'gether':       '1000000000000000000000000000',","    'tether':       '1000000000000000000000000000000'","};","","/**"," * Should be called to pad string to expected length"," *"," * @method padLeft"," * @param {String} string to be padded"," * @param {Number} characters that result string should have"," * @param {String} sign, by default 0"," * @returns {String} right aligned string"," */","var padLeft = function (string, chars, sign) {","    return new Array(chars - string.length + 1).join(sign ? sign : \"0\") + string;","};","","/**"," * Should be called to pad string to expected length"," *"," * @method padRight"," * @param {String} string to be padded"," * @param {Number} characters that result string should have"," * @param {String} sign, by default 0"," * @returns {String} right aligned string"," */","var padRight = function (string, chars, sign) {","    return string + (new Array(chars - string.length + 1).join(sign ? sign : \"0\"));","};","","/**"," * Should be called to get utf8 from it's hex representation"," *"," * @method toUtf8"," * @param {String} string in hex"," * @returns {String} ascii string representation of hex value"," */","var toUtf8 = function(hex) {","// Find termination","    var str = \"\";","    var i = 0, l = hex.length;","    if (hex.substring(0, 2) === '0x') {","        i = 2;","    }","    for (; i < l; i+=2) {","        var code = parseInt(hex.substr(i, 2), 16);","        if (code === 0)","            break;","        str += String.fromCharCode(code);","    }","","    return utf8.decode(str);","};","","/**"," * Should be called to get ascii from it's hex representation"," *"," * @method toAscii"," * @param {String} string in hex"," * @returns {String} ascii string representation of hex value"," */","var toAscii = function(hex) {","// Find termination","    var str = \"\";","    var i = 0, l = hex.length;","    if (hex.substring(0, 2) === '0x') {","        i = 2;","    }","    for (; i < l; i+=2) {","        var code = parseInt(hex.substr(i, 2), 16);","        str += String.fromCharCode(code);","    }","","    return str;","};","","/**"," * Should be called to get hex representation (prefixed by 0x) of utf8 string"," *"," * @method fromUtf8"," * @param {String} string"," * @param {Number} optional padding"," * @returns {String} hex representation of input string"," */","var fromUtf8 = function(str) {","    str = utf8.encode(str);","    var hex = \"\";","    for(var i = 0; i < str.length; i++) {","        var code = str.charCodeAt(i);","        if (code === 0)","            break;","        var n = code.toString(16);","        hex += n.length < 2 ? '0' + n : n;","    }","","    return \"0x\" + hex;","};","","/**"," * Should be called to get hex representation (prefixed by 0x) of ascii string"," *"," * @method fromAscii"," * @param {String} string"," * @param {Number} optional padding"," * @returns {String} hex representation of input string"," */","var fromAscii = function(str) {","    var hex = \"\";","    for(var i = 0; i < str.length; i++) {","        var code = str.charCodeAt(i);","        var n = code.toString(16);","        hex += n.length < 2 ? '0' + n : n;","    }","","    return \"0x\" + hex;","};","","/**"," * Should be used to create full function/event name from json abi"," *"," * @method transformToFullName"," * @param {Object} json-abi"," * @return {String} full fnction/event name"," */","var transformToFullName = function (json) {","    if (json.name.indexOf('(') !== -1) {","        return json.name;","    }","","    var typeName = json.inputs.map(function(i){return i.type; }).join();","    return json.name + '(' + typeName + ')';","};","","/**"," * Should be called to get display name of contract function"," *"," * @method extractDisplayName"," * @param {String} name of function/event"," * @returns {String} display name for function/event eg. multiply(uint256) -> multiply"," */","var extractDisplayName = function (name) {","    var length = name.indexOf('(');","    return length !== -1 ? name.substr(0, length) : name;","};","","/// @returns overloaded part of function/event name","var extractTypeName = function (name) {","    /// TODO: make it invulnerable","    var length = name.indexOf('(');","    return length !== -1 ? name.substr(length + 1, name.length - 1 - (length + 1)).replace(' ', '') : \"\";","};","","/**"," * Converts value to it's decimal representation in string"," *"," * @method toDecimal"," * @param {String|Number|BigNumber}"," * @return {String}"," */","var toDecimal = function (value) {","    return toBigNumber(value).toNumber();","};","","/**"," * Converts value to it's hex representation"," *"," * @method fromDecimal"," * @param {String|Number|BigNumber}"," * @return {String}"," */","var fromDecimal = function (value) {","    var number = toBigNumber(value);","    var result = number.toString(16);","","    return number.lessThan(0) ? '-0x' + result.substr(1) : '0x' + result;","};","","/**"," * Auto converts any given value into it's hex representation."," *"," * And even stringifys objects before."," *"," * @method toHex"," * @param {String|Number|BigNumber|Object}"," * @return {String}"," */","var toHex = function (val) {","    /*jshint maxcomplexity: 8 */","","    if (isBoolean(val))","        return fromDecimal(+val);","","    if (isBigNumber(val))","        return fromDecimal(val);","","    if (isObject(val))","        return fromUtf8(JSON.stringify(val));","","    // if its a negative number, pass it through fromDecimal","    if (isString(val)) {","        if (val.indexOf('-0x') === 0)","            return fromDecimal(val);","        else if(val.indexOf('0x') === 0)","            return val;","        else if (!isFinite(val))","            return fromAscii(val);","    }","","    return fromDecimal(val);","};","","/**"," * Returns value of unit in Wei"," *"," * @method getValueOfUnit"," * @param {String} unit the unit to convert to, default ether"," * @returns {BigNumber} value of the unit (in Wei)"," * @throws error if the unit is not correct:w"," */","var getValueOfUnit = function (unit) {","    unit = unit ? unit.toLowerCase() : 'ether';","    var unitValue = unitMap[unit];","    if (unitValue === undefined) {","        throw new Error('This unit doesn\\'t exists, please use the one of the following units' + JSON.stringify(unitMap, null, 2));","    }","    return new BigNumber(unitValue, 10);","};","","/**"," * Takes a number of wei and converts it to any other ether unit."," *"," * Possible units are:"," *   SI Short   SI Full        Effigy       Other"," * - kwei       femtoether     ada"," * - mwei       picoether      babbage"," * - gwei       nanoether      shannon      nano"," * - --         microether     szabo        micro"," * - --         milliether     finney       milli"," * - ether      --             --"," * - kether                    einstein     grand"," * - mether"," * - gether"," * - tether"," *"," * @method fromWei"," * @param {Number|String} number can be a number, number string or a HEX of a decimal"," * @param {String} unit the unit to convert to, default ether"," * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number","*/","var fromWei = function(number, unit) {","    var returnValue = toBigNumber(number).dividedBy(getValueOfUnit(unit));","","    return isBigNumber(number) ? returnValue : returnValue.toString(10);","};","","/**"," * Takes a number of a unit and converts it to wei."," *"," * Possible units are:"," *   SI Short   SI Full        Effigy       Other"," * - kwei       femtoether     ada"," * - mwei       picoether      babbage"," * - gwei       nanoether      shannon      nano"," * - --         microether     szabo        micro"," * - --         milliether     finney       milli"," * - ether      --             --"," * - kether                    einstein     grand"," * - mether"," * - gether"," * - tether"," *"," * @method toWei"," * @param {Number|String|BigNumber} number can be a number, number string or a HEX of a decimal"," * @param {String} unit the unit to convert from, default ether"," * @return {String|Object} When given a BigNumber object it returns one as well, otherwise a number","*/","var toWei = function(number, unit) {","    var returnValue = toBigNumber(number).times(getValueOfUnit(unit));","","    return isBigNumber(number) ? returnValue : returnValue.toString(10);","};","","/**"," * Takes an input and transforms it into an bignumber"," *"," * @method toBigNumber"," * @param {Number|String|BigNumber} a number, string, HEX string or BigNumber"," * @return {BigNumber} BigNumber","*/","var toBigNumber = function(number) {","    /*jshint maxcomplexity:5 */","    number = number || 0;","    if (isBigNumber(number))","        return number;","","    if (isString(number) && (number.indexOf('0x') === 0 || number.indexOf('-0x') === 0)) {","        return new BigNumber(number.replace('0x',''), 16);","    }","","    return new BigNumber(number.toString(10), 10);","};","","/**"," * Takes and input transforms it into bignumber and if it is negative value, into two's complement"," *"," * @method toTwosComplement"," * @param {Number|String|BigNumber}"," * @return {BigNumber}"," */","var toTwosComplement = function (number) {","    var bigNumber = toBigNumber(number);","    if (bigNumber.lessThan(0)) {","        return new BigNumber(\"ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\", 16).plus(bigNumber).plus(1);","    }","    return bigNumber;","};","","/**"," * Checks if the given string is strictly an address"," *"," * @method isStrictAddress"," * @param {String} address the given HEX adress"," * @return {Boolean}","*/","var isStrictAddress = function (address) {","    return /^0x[0-9a-f]{40}$/i.test(address);","};","","/**"," * Checks if the given string is an address"," *"," * @method isAddress"," * @param {String} address the given HEX adress"," * @return {Boolean}","*/","var isAddress = function (address) {","    return /^(0x)?[0-9a-f]{40}$/i.test(address);","};","","/**"," * Transforms given string to valid 20 bytes-length addres with 0x prefix"," *"," * @method toAddress"," * @param {String} address"," * @return {String} formatted address"," */","var toAddress = function (address) {","    if (isStrictAddress(address)) {","        return address;","    }","","    if (/^[0-9a-f]{40}$/.test(address)) {","        return '0x' + address;","    }","","    return '0x' + padLeft(toHex(address).substr(2), 40);","};","","/**"," * Returns true if object is BigNumber, otherwise false"," *"," * @method isBigNumber"," * @param {Object}"," * @return {Boolean}"," */","var isBigNumber = function (object) {","    return object instanceof BigNumber ||","        (object && object.constructor && object.constructor.name === 'BigNumber');","};","","/**"," * Returns true if object is string, otherwise false"," *"," * @method isString"," * @param {Object}"," * @return {Boolean}"," */","var isString = function (object) {","    return typeof object === 'string' ||","        (object && object.constructor && object.constructor.name === 'String');","};","","/**"," * Returns true if object is function, otherwise false"," *"," * @method isFunction"," * @param {Object}"," * @return {Boolean}"," */","var isFunction = function (object) {","    return typeof object === 'function';","};","","/**"," * Returns true if object is Objet, otherwise false"," *"," * @method isObject"," * @param {Object}"," * @return {Boolean}"," */","var isObject = function (object) {","    return typeof object === 'object';","};","","/**"," * Returns true if object is boolean, otherwise false"," *"," * @method isBoolean"," * @param {Object}"," * @return {Boolean}"," */","var isBoolean = function (object) {","    return typeof object === 'boolean';","};","","/**"," * Returns true if object is array, otherwise false"," *"," * @method isArray"," * @param {Object}"," * @return {Boolean}"," */","var isArray = function (object) {","    return object instanceof Array;","};","","/**"," * Returns true if given string is valid json object"," *"," * @method isJson"," * @param {String}"," * @return {Boolean}"," */","var isJson = function (str) {","    try {","        return !!JSON.parse(str);","    } catch (e) {","        return false;","    }","};","","module.exports = {","    padLeft: padLeft,","    padRight: padRight,","    toHex: toHex,","    toDecimal: toDecimal,","    fromDecimal: fromDecimal,","    toUtf8: toUtf8,","    toAscii: toAscii,","    fromUtf8: fromUtf8,","    fromAscii: fromAscii,","    transformToFullName: transformToFullName,","    extractDisplayName: extractDisplayName,","    extractTypeName: extractTypeName,","    toWei: toWei,","    fromWei: fromWei,","    toBigNumber: toBigNumber,","    toTwosComplement: toTwosComplement,","    toAddress: toAddress,","    isBigNumber: isBigNumber,","    isStrictAddress: isStrictAddress,","    isAddress: isAddress,","    isFunction: isFunction,","    isString: isString,","    isObject: isObject,","    isBoolean: isBoolean,","    isArray: isArray,","    isJson: isJson","};","","},{\"bignumber.js\":\"bignumber.js\",\"utf8\":83}],21:[function(require,module,exports){","module.exports={","    \"version\": \"0.14.0\"","}","","},{}],22:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/** "," * @file web3.js"," * @authors:"," *   Jeffrey Wilcke <jeff@ethdev.com>"," *   Marek Kotewicz <marek@ethdev.com>"," *   Marian Oancea <marian@ethdev.com>"," *   Fabian Vogelsteller <fabian@ethdev.com>"," *   Gav Wood <g@ethdev.com>"," * @date 2014"," */","","var RequestManager = require('./web3/requestmanager');","var Iban = require('./web3/iban');","var Eth = require('./web3/methods/eth');","var DB = require('./web3/methods/db');","var Shh = require('./web3/methods/shh');","var Net = require('./web3/methods/net');","var Settings = require('./web3/settings');","var version = require('./version.json');","var utils = require('./utils/utils');","var sha3 = require('./utils/sha3');","var extend = require('./web3/extend');","var Batch = require('./web3/batch');","var Property = require('./web3/property');","var HttpProvider = require('./web3/httpprovider');","var IpcProvider = require('./web3/ipcprovider');","","","","function Web3 (provider) {","    this._requestManager = new RequestManager(provider);","    this.currentProvider = provider;","    this.eth = new Eth(this);","    this.db = new DB(this);","    this.shh = new Shh(this);","    this.net = new Net(this);","    this.settings = new Settings();","    this.version = {","        version: version.version","    };","    this.providers = {","        HttpProvider: HttpProvider,","        IpcProvider: IpcProvider","    };","    this._extend = extend(this);","    this._extend({","        properties: properties()","    });","}","","// expose providers on the class","Web3.providers = {","    HttpProvider: HttpProvider,","    IpcProvider: IpcProvider","};","","Web3.prototype.setProvider = function (provider) {","    this._requestManager.setProvider(provider);","    this.currentProvider = provider;","};","","Web3.prototype.reset = function (keepIsSyncing) {","    this._requestManager.reset(keepIsSyncing);","    this.settings = new Settings();","};","","Web3.prototype.toHex = utils.toHex;","Web3.prototype.toAscii = utils.toAscii;","Web3.prototype.toUtf8 = utils.toUtf8;","Web3.prototype.fromAscii = utils.fromAscii;","Web3.prototype.fromUtf8 = utils.fromUtf8;","Web3.prototype.toDecimal = utils.toDecimal;","Web3.prototype.fromDecimal = utils.fromDecimal;","Web3.prototype.toBigNumber = utils.toBigNumber;","Web3.prototype.toWei = utils.toWei;","Web3.prototype.fromWei = utils.fromWei;","Web3.prototype.isAddress = utils.isAddress;","Web3.prototype.isIBAN = utils.isIBAN;","Web3.prototype.sha3 = sha3;","","/**"," * Transforms direct icap to address"," */","Web3.prototype.fromICAP = function (icap) {","    var iban = new Iban(icap);","    return iban.address();","};","","var properties = function () {","    return [","        new Property({","            name: 'version.client',","            getter: 'web3_clientVersion'","        }),","        new Property({","            name: 'version.network',","            getter: 'net_version',","            inputFormatter: utils.toDecimal","        }),","        new Property({","            name: 'version.ethereum',","            getter: 'eth_protocolVersion',","            inputFormatter: utils.toDecimal","        }),","        new Property({","            name: 'version.whisper',","            getter: 'shh_version',","            inputFormatter: utils.toDecimal","        })","    ];","};","","Web3.prototype.isConnected = function(){","    return (this.currentProvider && this.currentProvider.isConnected());","};","","Web3.prototype.createBatch = function () {","    return new Batch(this);","};","","module.exports = Web3;","","","},{\"./utils/sha3\":19,\"./utils/utils\":20,\"./version.json\":21,\"./web3/batch\":24,\"./web3/extend\":28,\"./web3/httpprovider\":32,\"./web3/iban\":33,\"./web3/ipcprovider\":34,\"./web3/methods/db\":37,\"./web3/methods/eth\":38,\"./web3/methods/net\":39,\"./web3/methods/shh\":40,\"./web3/property\":43,\"./web3/requestmanager\":44,\"./web3/settings\":45}],23:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/** "," * @file allevents.js"," * @author Marek Kotewicz <marek@ethdev.com>"," * @date 2014"," */","","var sha3 = require('../utils/sha3');","var SolidityEvent = require('./event');","var formatters = require('./formatters');","var utils = require('../utils/utils');","var Filter = require('./filter');","var watches = require('./methods/watches');","","var AllSolidityEvents = function (web3, json, address) {","    this._web3 = web3;","    this._json = json;","    this._address = address;","};","","AllSolidityEvents.prototype.encode = function (options) {","    options = options || {};","    var result = {};","","    ['fromBlock', 'toBlock'].filter(function (f) {","        return options[f] !== undefined;","    }).forEach(function (f) {","        result[f] = formatters.inputBlockNumberFormatter(options[f]);","    });","","    result.address = this._address;","","    return result;","};","","AllSolidityEvents.prototype.decode = function (data) {","    data.data = data.data || '';","    data.topics = data.topics || [];","","    var eventTopic = data.topics[0].slice(2);","    var match = this._json.filter(function (j) {","        return eventTopic === sha3(utils.transformToFullName(j));","    })[0];","","    if (!match) { // cannot find matching event?","        console.warn('cannot find event for log');","        return data;","    }","","    var event = new SolidityEvent(this._web3, match, this._address);","    return event.decode(data);","};","","AllSolidityEvents.prototype.execute = function (options, callback) {","","    if (utils.isFunction(arguments[arguments.length - 1])) {","        callback = arguments[arguments.length - 1];","        if(arguments.length === 1)","            options = null;","    }","","    var o = this.encode(options);","    var formatter = this.decode.bind(this);","    return new Filter(this._web3, o, watches.eth(), formatter, callback);","};","","AllSolidityEvents.prototype.attachToContract = function (contract) {","    var execute = this.execute.bind(this);","    contract.allEvents = execute;","};","","module.exports = AllSolidityEvents;","","","},{\"../utils/sha3\":19,\"../utils/utils\":20,\"./event\":27,\"./filter\":29,\"./formatters\":30,\"./methods/watches\":41}],24:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/** "," * @file batch.js"," * @author Marek Kotewicz <marek@ethdev.com>"," * @date 2015"," */","","var Jsonrpc = require('./jsonrpc');","var errors = require('./errors');","","var Batch = function (web3) {","    this.requestManager = web3._requestManager;","    this.requests = [];","};","","/**"," * Should be called to add create new request to batch request"," *"," * @method add"," * @param {Object} jsonrpc requet object"," */","Batch.prototype.add = function (request) {","    this.requests.push(request);","};","","/**"," * Should be called to execute batch request"," *"," * @method execute"," */","Batch.prototype.execute = function () {","    var requests = this.requests;","    this.requestManager.sendBatch(requests, function (err, results) {","        results = results || [];","        requests.map(function (request, index) {","            return results[index] || {};","        }).forEach(function (result, index) {","            if (requests[index].callback) {","","                if (!Jsonrpc.getInstance().isValidResponse(result)) {","                    return requests[index].callback(errors.InvalidResponse(result));","                }","","                requests[index].callback(null, (requests[index].format ? requests[index].format(result.result) : result.result));","            }","        });","    }); ","};","","module.exports = Batch;","","","},{\"./errors\":26,\"./jsonrpc\":35}],25:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/** "," * @file contract.js"," * @author Marek Kotewicz <marek@ethdev.com>"," * @date 2014"," */","","var utils = require('../utils/utils');","var coder = require('../solidity/coder');","var SolidityEvent = require('./event');","var SolidityFunction = require('./function');","var AllEvents = require('./allevents');","","/**"," * Should be called to encode constructor params"," *"," * @method encodeConstructorParams"," * @param {Array} abi"," * @param {Array} constructor params"," */","var encodeConstructorParams = function (abi, params) {","    return abi.filter(function (json) {","        return json.type === 'constructor' && json.inputs.length === params.length;","    }).map(function (json) {","        return json.inputs.map(function (input) {","            return input.type;","        });","    }).map(function (types) {","        return coder.encodeParams(types, params);","    })[0] || '';","};","","/**"," * Should be called to add functions to contract object"," *"," * @method addFunctionsToContract"," * @param {Contract} contract"," * @param {Array} abi"," */","var addFunctionsToContract = function (contract) {","    contract.abi.filter(function (json) {","        return json.type === 'function';","    }).map(function (json) {","        return new SolidityFunction(contract._web3, json, contract.address);","    }).forEach(function (f) {","        f.attachToContract(contract);","    });","};","","/**"," * Should be called to add events to contract object"," *"," * @method addEventsToContract"," * @param {Contract} contract"," * @param {Array} abi"," */","var addEventsToContract = function (contract) {","    var events = contract.abi.filter(function (json) {","        return json.type === 'event';","    });","","    var All = new AllEvents(contract._web3, events, contract.address);","    All.attachToContract(contract);","    ","    events.map(function (json) {","        return new SolidityEvent(contract._web3, json, contract.address);","    }).forEach(function (e) {","        e.attachToContract(contract);","    });","};","","","/**"," * Should be called to check if the contract gets properly deployed on the blockchain."," *"," * @method checkForContractAddress"," * @param {Object} contract"," * @param {Function} callback"," * @returns {Undefined}"," */","var checkForContractAddress = function(contract, callback){","    var count = 0,","        callbackFired = false;","","    // wait for receipt","    var filter = contract._web3.eth.filter('latest', function(e){","        if (!e && !callbackFired) {","            count++;","","            // stop watching after 50 blocks (timeout)","            if (count > 50) {","                ","                filter.stopWatching();","                callbackFired = true;","","                if (callback)","                    callback(new Error('Contract transaction couldn\\'t be found after 50 blocks'));","                else","                    throw new Error('Contract transaction couldn\\'t be found after 50 blocks');","","","            } else {","","                contract._web3.eth.getTransactionReceipt(contract.transactionHash, function(e, receipt){","                    if(receipt && !callbackFired) {","","                        contract._web3.eth.getCode(receipt.contractAddress, function(e, code){","                            /*jshint maxcomplexity: 5 */","","                            if(callbackFired)","                                return;","                            ","                            filter.stopWatching();","                            callbackFired = true;","","                            if(code.length > 2) {","","                                // console.log('Contract code deployed!');","","                                contract.address = receipt.contractAddress;","","                                // attach events and methods again after we have","                                addFunctionsToContract(contract);","                                addEventsToContract(contract);","","                                // call callback for the second time","                                if(callback)","                                    callback(null, contract);","","                            } else {","                                if(callback)","                                    callback(new Error('The contract code couldn\\'t be stored, please check your gas amount.'));","                                else","                                    throw new Error('The contract code couldn\\'t be stored, please check your gas amount.');","                            }","                        });","                    }","                });","            }","        }","    });","};","","/**"," * Should be called to create new ContractFactory instance"," *"," * @method ContractFactory"," * @param {Array} abi"," */","var ContractFactory = function (web3, abi) {","    this.web3 = web3;","    this.abi = abi;","};","","/**"," * Should be called to create new ContractFactory"," *"," * @method contract"," * @param {Array} abi"," * @returns {ContractFactory} new contract factory"," */","//var contract = function (abi) {","    //return new ContractFactory(abi);","//};","","/**"," * Should be called to create new contract on a blockchain"," * "," * @method new"," * @param {Any} contract constructor param1 (optional)"," * @param {Any} contract constructor param2 (optional)"," * @param {Object} contract transaction object (required)"," * @param {Function} callback"," * @returns {Contract} returns contract instance"," */","ContractFactory.prototype.new = function () {","    var contract = new Contract(this.web3, this.abi);","","    // parse arguments","    var options = {}; // required!","    var callback;","","    var args = Array.prototype.slice.call(arguments);","    if (utils.isFunction(args[args.length - 1])) {","        callback = args.pop();","    }","","    var last = args[args.length - 1];","    if (utils.isObject(last) && !utils.isArray(last)) {","        options = args.pop();","    }","","    var bytes = encodeConstructorParams(this.abi, args);","    options.data += bytes;","","    if (callback) {","","        // wait for the contract address adn check if the code was deployed","        this.web3.eth.sendTransaction(options, function (err, hash) {","            if (err) {","                callback(err);","            } else {","                // add the transaction hash","                contract.transactionHash = hash;","","                // call callback for the first time","                callback(null, contract);","","                checkForContractAddress(contract, callback);","            }","        });","    } else {","        var hash = this.web3.eth.sendTransaction(options);","        // add the transaction hash","        contract.transactionHash = hash;","        checkForContractAddress(contract);","    }","","    return contract;","};","","/**"," * Should be called to get access to existing contract on a blockchain"," *"," * @method at"," * @param {Address} contract address (required)"," * @param {Function} callback {optional)"," * @returns {Contract} returns contract if no callback was passed,"," * otherwise calls callback function (err, contract)"," */","ContractFactory.prototype.at = function (address, callback) {","    var contract = new Contract(this.web3, this.abi, address);","","    // this functions are not part of prototype, ","    // because we dont want to spoil the interface","    addFunctionsToContract(contract);","    addEventsToContract(contract);","    ","    if (callback) {","        callback(null, contract);","    } ","    return contract;","};","","/**"," * Should be called to create new contract instance"," *"," * @method Contract"," * @param {Array} abi"," * @param {Address} contract address"," */","var Contract = function (web3, abi, address) {","    this._web3 = web3;","    this.transactionHash = null;","    this.address = address;","    this.abi = abi;","};","","module.exports = ContractFactory;","","","},{\"../solidity/coder\":7,\"../utils/utils\":20,\"./allevents\":23,\"./event\":27,\"./function\":31}],26:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/** "," * @file errors.js"," * @author Marek Kotewicz <marek@ethdev.com>"," * @date 2015"," */","","module.exports = {","    InvalidNumberOfParams: function () {","        return new Error('Invalid number of input parameters');","    },","    InvalidConnection: function (host){","        return new Error('CONNECTION ERROR: Couldn\\'t connect to node '+ host +'.');","    },","    InvalidProvider: function () {","        return new Error('Provider not set or invalid');","    },","    InvalidResponse: function (result){","        var message = !!result && !!result.error && !!result.error.message ? result.error.message : 'Invalid JSON RPC response: ' + JSON.stringify(result);","        return new Error(message);","    }","};","","","},{}],27:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/** "," * @file event.js"," * @author Marek Kotewicz <marek@ethdev.com>"," * @date 2014"," */","","var utils = require('../utils/utils');","var coder = require('../solidity/coder');","var formatters = require('./formatters');","var sha3 = require('../utils/sha3');","var Filter = require('./filter');","var watches = require('./methods/watches');","","/**"," * This prototype should be used to create event filters"," */","var SolidityEvent = function (web3, json, address) {","    this._web3 = web3;","    this._params = json.inputs;","    this._name = utils.transformToFullName(json);","    this._address = address;","    this._anonymous = json.anonymous;","};","","/**"," * Should be used to get filtered param types"," *"," * @method types"," * @param {Bool} decide if returned typed should be indexed"," * @return {Array} array of types"," */","SolidityEvent.prototype.types = function (indexed) {","    return this._params.filter(function (i) {","        return i.indexed === indexed;","    }).map(function (i) {","        return i.type;","    });","};","","/**"," * Should be used to get event display name"," *"," * @method displayName"," * @return {String} event display name"," */","SolidityEvent.prototype.displayName = function () {","    return utils.extractDisplayName(this._name);","};","","/**"," * Should be used to get event type name"," *"," * @method typeName"," * @return {String} event type name"," */","SolidityEvent.prototype.typeName = function () {","    return utils.extractTypeName(this._name);","};","","/**"," * Should be used to get event signature"," *"," * @method signature"," * @return {String} event signature"," */","SolidityEvent.prototype.signature = function () {","    return sha3(this._name);","};","","/**"," * Should be used to encode indexed params and options to one final object"," * "," * @method encode"," * @param {Object} indexed"," * @param {Object} options"," * @return {Object} everything combined together and encoded"," */","SolidityEvent.prototype.encode = function (indexed, options) {","    indexed = indexed || {};","    options = options || {};","    var result = {};","","    ['fromBlock', 'toBlock'].filter(function (f) {","        return options[f] !== undefined;","    }).forEach(function (f) {","        result[f] = formatters.inputBlockNumberFormatter(options[f]);","    });","","    result.topics = [];","","    result.address = this._address;","    if (!this._anonymous) {","        result.topics.push('0x' + this.signature());","    }","","    var indexedTopics = this._params.filter(function (i) {","        return i.indexed === true;","    }).map(function (i) {","        var value = indexed[i.name];","        if (value === undefined || value === null) {","            return null;","        }","        ","        if (utils.isArray(value)) {","            return value.map(function (v) {","                return '0x' + coder.encodeParam(i.type, v);","            });","        }","        return '0x' + coder.encodeParam(i.type, value);","    });","","    result.topics = result.topics.concat(indexedTopics);","","    return result;","};","","/**"," * Should be used to decode indexed params and options"," *"," * @method decode"," * @param {Object} data"," * @return {Object} result object with decoded indexed && not indexed params"," */","SolidityEvent.prototype.decode = function (data) {"," ","    data.data = data.data || '';","    data.topics = data.topics || [];","","    var argTopics = this._anonymous ? data.topics : data.topics.slice(1);","    var indexedData = argTopics.map(function (topics) { return topics.slice(2); }).join(\"\");","    var indexedParams = coder.decodeParams(this.types(true), indexedData); ","","    var notIndexedData = data.data.slice(2);","    var notIndexedParams = coder.decodeParams(this.types(false), notIndexedData);","    ","    var result = formatters.outputLogFormatter(data);","    result.event = this.displayName();","    result.address = data.address;","","    result.args = this._params.reduce(function (acc, current) {","        acc[current.name] = current.indexed ? indexedParams.shift() : notIndexedParams.shift();","        return acc;","    }, {});","","    delete result.data;","    delete result.topics;","","    return result;","};","","/**"," * Should be used to create new filter object from event"," *"," * @method execute"," * @param {Object} indexed"," * @param {Object} options"," * @return {Object} filter object"," */","SolidityEvent.prototype.execute = function (indexed, options, callback) {","","    if (utils.isFunction(arguments[arguments.length - 1])) {","        callback = arguments[arguments.length - 1];","        if(arguments.length === 2)","            options = null;","        if(arguments.length === 1) {","            options = null;","            indexed = {};","        }","    }","    ","    var o = this.encode(indexed, options);","    var formatter = this.decode.bind(this);","    return new Filter(this._web3, o, watches.eth(), formatter, callback);","};","","/**"," * Should be used to attach event to contract object"," *"," * @method attachToContract"," * @param {Contract}"," */","SolidityEvent.prototype.attachToContract = function (contract) {","    var execute = this.execute.bind(this);","    var displayName = this.displayName();","    if (!contract[displayName]) {","        contract[displayName] = execute;","    }","    contract[displayName][this.typeName()] = this.execute.bind(this, contract);","};","","module.exports = SolidityEvent;","","","},{\"../solidity/coder\":7,\"../utils/sha3\":19,\"../utils/utils\":20,\"./filter\":29,\"./formatters\":30,\"./methods/watches\":41}],28:[function(require,module,exports){","var formatters = require('./formatters');","var utils = require('./../utils/utils');","var Method = require('./method');","var Property = require('./property');","","// TODO: refactor, so the input params are not altered.","// it's necessary to make same 'extension' work with multiple providers","var extend = function (web3) {","    /* jshint maxcomplexity:5 */","    var ex = function (extension) {","","        var extendedObject;","        if (extension.property) {","            if (!web3[extension.property]) {","                web3[extension.property] = {};","            }","            extendedObject = web3[extension.property];","        } else {","            extendedObject = web3;","        }","","        if (extension.methods) {","            extension.methods.forEach(function (method) {","                method.attachToObject(extendedObject);","                method.setRequestManager(web3._requestManager);","            });","        }","","        if (extension.properties) {","            extension.properties.forEach(function (property) {","                property.attachToObject(extendedObject);","                property.setRequestManager(web3._requestManager);","            });","        }","    };","","    ex.formatters = formatters; ","    ex.utils = utils;","    ex.Method = Method;","    ex.Property = Property;","","    return ex;","};","","","","module.exports = extend;","","","},{\"./../utils/utils\":20,\"./formatters\":30,\"./method\":36,\"./property\":43}],29:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/** @file filter.js"," * @authors:"," *   Jeffrey Wilcke <jeff@ethdev.com>"," *   Marek Kotewicz <marek@ethdev.com>"," *   Marian Oancea <marian@ethdev.com>"," *   Fabian Vogelsteller <fabian@ethdev.com>"," *   Gav Wood <g@ethdev.com>"," * @date 2014"," */","","var formatters = require('./formatters');","var utils = require('../utils/utils');","","/**","* Converts a given topic to a hex string, but also allows null values.","*","* @param {Mixed} value","* @return {String}","*/","var toTopic = function(value){","","    if(value === null || typeof value === 'undefined')","        return null;","","    value = String(value);","","    if(value.indexOf('0x') === 0)","        return value;","    else","        return utils.fromUtf8(value);","};","","/// This method should be called on options object, to verify deprecated properties && lazy load dynamic ones","/// @param should be string or object","/// @returns options string or object","var getOptions = function (options) {","","    if (utils.isString(options)) {","        return options;","    } ","","    options = options || {};","","    // make sure topics, get converted to hex","    options.topics = options.topics || [];","    options.topics = options.topics.map(function(topic){","        return (utils.isArray(topic)) ? topic.map(toTopic) : toTopic(topic);","    });","","    // lazy load","    return {","        topics: options.topics,","        to: options.to,","        address: options.address,","        fromBlock: formatters.inputBlockNumberFormatter(options.fromBlock),","        toBlock: formatters.inputBlockNumberFormatter(options.toBlock) ","    }; ","};","","/**","Adds the callback and sets up the methods, to iterate over the results.","","@method getLogsAtStart","@param {Object} self","@param {funciton} ","*/","var getLogsAtStart = function(self, callback){","    // call getFilterLogs for the first watch callback start","    if (!utils.isString(self.options)) {","        self.get(function (err, messages) {","            // don't send all the responses to all the watches again... just to self one","            if (err) {","                callback(err);","            }","","            if(utils.isArray(messages)) {","                messages.forEach(function (message) {","                    callback(null, message);","                });","            }","        });","    }","};","","/**","Adds the callback and sets up the methods, to iterate over the results.","","@method pollFilter","@param {Object} self","*/","var pollFilter = function(self) {","","    var onMessage = function (error, messages) {","        if (error) {","            return self.callbacks.forEach(function (callback) {","                callback(error);","            });","        }","","        if(utils.isArray(messages)) {","            messages.forEach(function (message) {","                message = self.formatter ? self.formatter(message) : message;","                self.callbacks.forEach(function (callback) {","                    callback(null, message);","                });","            });","        }","    };","","    self.requestManager.startPolling({","        method: self.implementation.poll.call,","        params: [self.filterId],","    }, self.filterId, onMessage, self.stopWatching.bind(self));","","};","","var Filter = function (web3, options, methods, formatter, callback) {","    var self = this;","    var implementation = {};","    methods.forEach(function (method) {","        method.setRequestManager(web3._requestManager);","        method.attachToObject(implementation);","    });","    this.requestManager = web3._requestManager;","    this.options = getOptions(options);","    this.implementation = implementation;","    this.filterId = null;","    this.callbacks = [];","    this.getLogsCallbacks = [];","    this.pollFilters = [];","    this.formatter = formatter;","    this.implementation.newFilter(this.options, function(error, id){","        if(error) {","            self.callbacks.forEach(function(cb){","                cb(error);","            });","        } else {","            self.filterId = id;","","            // check if there are get pending callbacks as a consequence","            // of calling get() with filterId unassigned.","            self.getLogsCallbacks.forEach(function (cb){","                self.get(cb);","            });","            self.getLogsCallbacks = [];","","            // get filter logs for the already existing watch calls","            self.callbacks.forEach(function(cb){","                getLogsAtStart(self, cb);","            });","            if(self.callbacks.length > 0)","                pollFilter(self);","","            // start to watch immediately","            if(callback) {","                return self.watch(callback);","            }","        }","    });","","    return this;","};","","Filter.prototype.watch = function (callback) {","    this.callbacks.push(callback);","","    if(this.filterId) {","        getLogsAtStart(this, callback);","        pollFilter(this);","    }","","    return this;","};","","Filter.prototype.stopWatching = function () {","    this.requestManager.stopPolling(this.filterId);","    // remove filter async","    this.implementation.uninstallFilter(this.filterId, function(){});","    this.callbacks = [];","};","","Filter.prototype.get = function (callback) {","    var self = this;","    if (utils.isFunction(callback)) {","        if (this.filterId === null) {","            // If filterId is not set yet, call it back","            // when newFilter() assigns it.","            this.getLogsCallbacks.push(callback);","        } else {","            this.implementation.getLogs(this.filterId, function(err, res){","                if (err) {","                    callback(err);","                } else {","                    callback(null, res.map(function (log) {","                        return self.formatter ? self.formatter(log) : log;","                    }));","                }","            });","        }","    } else {","        if (this.filterId === null) {","            throw new Error('Filter ID Error: filter().get() can\\'t be chained synchronous, please provide a callback for the get() method.');","        }","        var logs = this.implementation.getLogs(this.filterId);","        return logs.map(function (log) {","            return self.formatter ? self.formatter(log) : log;","        });","    }","","    return this;","};","","module.exports = Filter;","","","},{\"../utils/utils\":20,\"./formatters\":30}],30:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/** "," * @file formatters.js"," * @author Marek Kotewicz <marek@ethdev.com>"," * @author Fabian Vogelsteller <fabian@ethdev.com>"," * @date 2015"," */","","var utils = require('../utils/utils');","var config = require('../utils/config');","var Iban = require('./iban');","","/**"," * Should the format output to a big number"," *"," * @method outputBigNumberFormatter"," * @param {String|Number|BigNumber}"," * @returns {BigNumber} object"," */","var outputBigNumberFormatter = function (number) {","    return utils.toBigNumber(number);","};","","var isPredefinedBlockNumber = function (blockNumber) {","    return blockNumber === 'latest' || blockNumber === 'pending' || blockNumber === 'earliest';","};","","var inputDefaultBlockNumberFormatter = function (blockNumber) {","    if (blockNumber === undefined) {","        return config.defaultBlock;","    }","    return inputBlockNumberFormatter(blockNumber);","};","","var inputBlockNumberFormatter = function (blockNumber) {","    if (blockNumber === undefined) {","        return undefined;","    } else if (isPredefinedBlockNumber(blockNumber)) {","        return blockNumber;","    }","    return utils.toHex(blockNumber);","};","","/**"," * Formats the input of a transaction and converts all values to HEX"," *"," * @method inputCallFormatter"," * @param {Object} transaction options"," * @returns object","*/","var inputCallFormatter = function (options){","","    options.from = options.from || config.defaultAccount;","","    if (options.from) {","        options.from = inputAddressFormatter(options.from);","    }","","    if (options.to) { // it might be contract creation","        options.to = inputAddressFormatter(options.to);","    }","","    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {","        return options[key] !== undefined;","    }).forEach(function(key){","        options[key] = utils.fromDecimal(options[key]);","    });","","    return options; ","};","","/**"," * Formats the input of a transaction and converts all values to HEX"," *"," * @method inputTransactionFormatter"," * @param {Object} transaction options"," * @returns object","*/","var inputTransactionFormatter = function (options){","","    options.from = options.from || config.defaultAccount;","    options.from = inputAddressFormatter(options.from);","","    if (options.to) { // it might be contract creation","        options.to = inputAddressFormatter(options.to);","    }","","    ['gasPrice', 'gas', 'value', 'nonce'].filter(function (key) {","        return options[key] !== undefined;","    }).forEach(function(key){","        options[key] = utils.fromDecimal(options[key]);","    });","","    return options; ","};","","/**"," * Formats the output of a transaction to its proper values"," * "," * @method outputTransactionFormatter"," * @param {Object} tx"," * @returns {Object}","*/","var outputTransactionFormatter = function (tx){","    if(tx.blockNumber !== null)","        tx.blockNumber = utils.toDecimal(tx.blockNumber);","    if(tx.transactionIndex !== null)","        tx.transactionIndex = utils.toDecimal(tx.transactionIndex);","    tx.nonce = utils.toDecimal(tx.nonce);","    tx.gas = utils.toDecimal(tx.gas);","    tx.gasPrice = utils.toBigNumber(tx.gasPrice);","    tx.value = utils.toBigNumber(tx.value);","    return tx;","};","","/**"," * Formats the output of a transaction receipt to its proper values"," * "," * @method outputTransactionReceiptFormatter"," * @param {Object} receipt"," * @returns {Object}","*/","var outputTransactionReceiptFormatter = function (receipt){","    if(receipt.blockNumber !== null)","        receipt.blockNumber = utils.toDecimal(receipt.blockNumber);","    if(receipt.transactionIndex !== null)","        receipt.transactionIndex = utils.toDecimal(receipt.transactionIndex);","    receipt.cumulativeGasUsed = utils.toDecimal(receipt.cumulativeGasUsed);","    receipt.gasUsed = utils.toDecimal(receipt.gasUsed);","","    if(utils.isArray(receipt.logs)) {","        receipt.logs = receipt.logs.map(function(log){","            return outputLogFormatter(log);","        });","    }","","    return receipt;","};","","/**"," * Formats the output of a block to its proper values"," *"," * @method outputBlockFormatter"," * @param {Object} block "," * @returns {Object}","*/","var outputBlockFormatter = function(block) {","","    // transform to number","    block.gasLimit = utils.toDecimal(block.gasLimit);","    block.gasUsed = utils.toDecimal(block.gasUsed);","    block.size = utils.toDecimal(block.size);","    block.timestamp = utils.toDecimal(block.timestamp);","    if(block.number !== null)","        block.number = utils.toDecimal(block.number);","","    block.difficulty = utils.toBigNumber(block.difficulty);","    block.totalDifficulty = utils.toBigNumber(block.totalDifficulty);","","    if (utils.isArray(block.transactions)) {","        block.transactions.forEach(function(item){","            if(!utils.isString(item))","                return outputTransactionFormatter(item);","        });","    }","","    return block;","};","","/**"," * Formats the output of a log"," * "," * @method outputLogFormatter"," * @param {Object} log object"," * @returns {Object} log","*/","var outputLogFormatter = function(log) {","    if(log.blockNumber !== null)","        log.blockNumber = utils.toDecimal(log.blockNumber);","    if(log.transactionIndex !== null)","        log.transactionIndex = utils.toDecimal(log.transactionIndex);","    if(log.logIndex !== null)","        log.logIndex = utils.toDecimal(log.logIndex);","","    return log;","};","","/**"," * Formats the input of a whisper post and converts all values to HEX"," *"," * @method inputPostFormatter"," * @param {Object} transaction object"," * @returns {Object}","*/","var inputPostFormatter = function(post) {","","    post.payload = utils.toHex(post.payload);","    post.ttl = utils.fromDecimal(post.ttl);","    post.workToProve = utils.fromDecimal(post.workToProve);","    post.priority = utils.fromDecimal(post.priority);","","    // fallback","    if (!utils.isArray(post.topics)) {","        post.topics = post.topics ? [post.topics] : [];","    }","","    // format the following options","    post.topics = post.topics.map(function(topic){","        return utils.fromUtf8(topic);","    });","","    return post; ","};","","/**"," * Formats the output of a received post message"," *"," * @method outputPostFormatter"," * @param {Object}"," * @returns {Object}"," */","var outputPostFormatter = function(post){","","    post.expiry = utils.toDecimal(post.expiry);","    post.sent = utils.toDecimal(post.sent);","    post.ttl = utils.toDecimal(post.ttl);","    post.workProved = utils.toDecimal(post.workProved);","    post.payloadRaw = post.payload;","    post.payload = utils.toUtf8(post.payload);","","    if (utils.isJson(post.payload)) {","        post.payload = JSON.parse(post.payload);","    }","","    // format the following options","    if (!post.topics) {","        post.topics = [];","    }","    post.topics = post.topics.map(function(topic){","        return utils.toUtf8(topic);","    });","","    return post;","};","","var inputAddressFormatter = function (address) {","    var iban = new Iban(address);","    if (iban.isValid() && iban.isDirect()) {","        return '0x' + iban.address();","    } else if (utils.isStrictAddress(address)) {","        return address;","    } else if (utils.isAddress(address)) {","        return '0x' + address;","    }","    throw 'invalid address';","};","","","var outputSyncingFormatter = function(result) {","","    result.startingBlock = utils.toDecimal(result.startingBlock);","    result.currentBlock = utils.toDecimal(result.currentBlock);","    result.highestBlock = utils.toDecimal(result.highestBlock);","","    return result;","};","","module.exports = {","    inputDefaultBlockNumberFormatter: inputDefaultBlockNumberFormatter,","    inputBlockNumberFormatter: inputBlockNumberFormatter,","    inputCallFormatter: inputCallFormatter,","    inputTransactionFormatter: inputTransactionFormatter,","    inputAddressFormatter: inputAddressFormatter,","    inputPostFormatter: inputPostFormatter,","    outputBigNumberFormatter: outputBigNumberFormatter,","    outputTransactionFormatter: outputTransactionFormatter,","    outputTransactionReceiptFormatter: outputTransactionReceiptFormatter,","    outputBlockFormatter: outputBlockFormatter,","    outputLogFormatter: outputLogFormatter,","    outputPostFormatter: outputPostFormatter,","    outputSyncingFormatter: outputSyncingFormatter","};","","","},{\"../utils/config\":18,\"../utils/utils\":20,\"./iban\":33}],31:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/**"," * @file function.js"," * @author Marek Kotewicz <marek@ethdev.com>"," * @date 2015"," */","","var coder = require('../solidity/coder');","var utils = require('../utils/utils');","var formatters = require('./formatters');","var sha3 = require('../utils/sha3');","","/**"," * This prototype should be used to call/sendTransaction to solidity functions"," */","var SolidityFunction = function (web3, json, address) {","    this._web3 = web3;","    this._inputTypes = json.inputs.map(function (i) {","        return i.type;","    });","    this._outputTypes = json.outputs.map(function (i) {","        return i.type;","    });","    this._constant = json.constant;","    this._name = utils.transformToFullName(json);","    this._address = address;","};","","SolidityFunction.prototype.extractCallback = function (args) {","    if (utils.isFunction(args[args.length - 1])) {","        return args.pop(); // modify the args array!","    }","};","","SolidityFunction.prototype.extractDefaultBlock = function (args) {","    if (args.length > this._inputTypes.length && !utils.isObject(args[args.length -1])) {","        return formatters.inputDefaultBlockNumberFormatter(args.pop()); // modify the args array!","    }","};","","/**"," * Should be used to create payload from arguments"," *"," * @method toPayload"," * @param {Array} solidity function params"," * @param {Object} optional payload options"," */","SolidityFunction.prototype.toPayload = function (args) {","    var options = {};","    if (args.length > this._inputTypes.length && utils.isObject(args[args.length -1])) {","        options = args[args.length - 1];","    }","    options.to = this._address;","    options.data = '0x' + this.signature() + coder.encodeParams(this._inputTypes, args);","    return options;","};","","/**"," * Should be used to get function signature"," *"," * @method signature"," * @return {String} function signature"," */","SolidityFunction.prototype.signature = function () {","    return sha3(this._name).slice(0, 8);","};","","","SolidityFunction.prototype.unpackOutput = function (output) {","    if (!output) {","        return;","    }","","    output = output.length >= 2 ? output.slice(2) : output;","    var result = coder.decodeParams(this._outputTypes, output);","    return result.length === 1 ? result[0] : result;","};","","/**"," * Calls a contract function."," *"," * @method call"," * @param {...Object} Contract function arguments"," * @param {function} If the last argument is a function, the contract function"," *   call will be asynchronous, and the callback will be passed the"," *   error and result."," * @return {String} output bytes"," */","SolidityFunction.prototype.call = function () {","    var args = Array.prototype.slice.call(arguments).filter(function (a) {return a !== undefined; });","    var callback = this.extractCallback(args);","    var defaultBlock = this.extractDefaultBlock(args);","    var payload = this.toPayload(args);","","","    if (!callback) {","        var output = this._web3.eth.call(payload, defaultBlock);","        return this.unpackOutput(output);","    } ","        ","    var self = this;","    this._web3.eth.call(payload, defaultBlock, function (error, output) {","        callback(error, self.unpackOutput(output));","    });","};","","/**"," * Should be used to sendTransaction to solidity function"," *"," * @method sendTransaction"," * @param {Object} options"," */","SolidityFunction.prototype.sendTransaction = function () {","    var args = Array.prototype.slice.call(arguments).filter(function (a) {return a !== undefined; });","    var callback = this.extractCallback(args);","    var payload = this.toPayload(args);","","    if (!callback) {","        return this._web3.eth.sendTransaction(payload);","    }","","    this._web3.eth.sendTransaction(payload, callback);","};","","/**"," * Should be used to estimateGas of solidity function"," *"," * @method estimateGas"," * @param {Object} options"," */","SolidityFunction.prototype.estimateGas = function () {","    var args = Array.prototype.slice.call(arguments);","    var callback = this.extractCallback(args);","    var payload = this.toPayload(args);","","    if (!callback) {","        return this._web3.eth.estimateGas(payload);","    }","","    this._web3.eth.estimateGas(payload, callback);","};","","/**"," * Should be used to get function display name"," *"," * @method displayName"," * @return {String} display name of the function"," */","SolidityFunction.prototype.displayName = function () {","    return utils.extractDisplayName(this._name);","};","","/**"," * Should be used to get function type name"," *"," * @method typeName"," * @return {String} type name of the function"," */","SolidityFunction.prototype.typeName = function () {","    return utils.extractTypeName(this._name);","};","","/**"," * Should be called to get rpc requests from solidity function"," *"," * @method request"," * @returns {Object}"," */","SolidityFunction.prototype.request = function () {","    var args = Array.prototype.slice.call(arguments);","    var callback = this.extractCallback(args);","    var payload = this.toPayload(args);","    var format = this.unpackOutput.bind(this);","    ","    return {","        method: this._constant ? 'eth_call' : 'eth_sendTransaction',","        callback: callback,","        params: [payload], ","        format: format","    };","};","","/**"," * Should be called to execute function"," *"," * @method execute"," */","SolidityFunction.prototype.execute = function () {","    var transaction = !this._constant;","","    // send transaction","    if (transaction) {","        return this.sendTransaction.apply(this, Array.prototype.slice.call(arguments));","    }","","    // call","    return this.call.apply(this, Array.prototype.slice.call(arguments));","};","","/**"," * Should be called to attach function to contract"," *"," * @method attachToContract"," * @param {Contract}"," */","SolidityFunction.prototype.attachToContract = function (contract) {","    var execute = this.execute.bind(this);","    execute.request = this.request.bind(this);","    execute.call = this.call.bind(this);","    execute.sendTransaction = this.sendTransaction.bind(this);","    execute.estimateGas = this.estimateGas.bind(this);","    var displayName = this.displayName();","    if (!contract[displayName]) {","        contract[displayName] = execute;","    }","    contract[displayName][this.typeName()] = execute; // circular!!!!","};","","module.exports = SolidityFunction;","","","},{\"../solidity/coder\":7,\"../utils/sha3\":19,\"../utils/utils\":20,\"./formatters\":30}],32:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/** @file httpprovider.js"," * @authors:"," *   Marek Kotewicz <marek@ethdev.com>"," *   Marian Oancea <marian@ethdev.com>"," *   Fabian Vogelsteller <fabian@ethdev.com>"," * @date 2015"," */","","\"use strict\";","","var errors = require('./errors');","","// workaround to use httpprovider in different envs","var XMLHttpRequest; // jshint ignore: line","","// meteor server environment","if (typeof Meteor !== 'undefined' && Meteor.isServer) { // jshint ignore: line","    XMLHttpRequest = Npm.require('xmlhttprequest').XMLHttpRequest; // jshint ignore: line","","// browser","} else if (typeof window !== 'undefined' && window.XMLHttpRequest) {","    XMLHttpRequest = window.XMLHttpRequest; // jshint ignore: line","","// node","} else {","    XMLHttpRequest = require('xmlhttprequest').XMLHttpRequest; // jshint ignore: line","}","","/**"," * HttpProvider should be used to send rpc calls over http"," */","var HttpProvider = function (host) {","    this.host = host || 'http://localhost:8545';","};","","/**"," * Should be called to prepare new XMLHttpRequest"," *"," * @method prepareRequest"," * @param {Boolean} true if request should be async"," * @return {XMLHttpRequest} object"," */","HttpProvider.prototype.prepareRequest = function (async) {","    var request = new XMLHttpRequest();","    request.open('POST', this.host, async);","    request.setRequestHeader('Content-Type','application/json');","    return request;","};","","/**"," * Should be called to make sync request"," *"," * @method send"," * @param {Object} payload"," * @return {Object} result"," */","HttpProvider.prototype.send = function (payload) {","    var request = this.prepareRequest(false);","","    try {","        request.send(JSON.stringify(payload));","    } catch(error) {","        throw errors.InvalidConnection(this.host);","    }","","    var result = request.responseText;","","    try {","        result = JSON.parse(result);","    } catch(e) {","        throw errors.InvalidResponse(request.responseText);                ","    }","","    return result;","};","","/**"," * Should be used to make async request"," *"," * @method sendAsync"," * @param {Object} payload"," * @param {Function} callback triggered on end with (err, result)"," */","HttpProvider.prototype.sendAsync = function (payload, callback) {","    var request = this.prepareRequest(true); ","","    request.onreadystatechange = function() {","        if (request.readyState === 4) {","            var result = request.responseText;","            var error = null;","","            try {","                result = JSON.parse(result);","            } catch(e) {","                error = errors.InvalidResponse(request.responseText);                ","            }","","            callback(error, result);","        }","    };","    ","    try {","        request.send(JSON.stringify(payload));","    } catch(error) {","        callback(errors.InvalidConnection(this.host));","    }","};","","/**"," * Synchronously tries to make Http request"," *"," * @method isConnected"," * @return {Boolean} returns true if request haven't failed. Otherwise false"," */","HttpProvider.prototype.isConnected = function() {","    try {","        this.send({","            id: 9999999999,","            jsonrpc: '2.0',","            method: 'net_listening',","            params: []","        });","        return true;","    } catch(e) {","        return false;","    }","};","","module.exports = HttpProvider;","","","},{\"./errors\":26,\"xmlhttprequest\":17}],33:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/** "," * @file iban.js"," * @author Marek Kotewicz <marek@ethdev.com>"," * @date 2015"," */","","var BigNumber = require('bignumber.js');","","var padLeft = function (string, bytes) {","    var result = string;","    while (result.length < bytes * 2) {","        result = '00' + result;","    }","    return result;","};","","/**"," * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to"," * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616."," *"," * @method iso13616Prepare"," * @param {String} iban the IBAN"," * @returns {String} the prepared IBAN"," */","var iso13616Prepare = function (iban) {","    var A = 'A'.charCodeAt(0);","    var Z = 'Z'.charCodeAt(0);","","    iban = iban.toUpperCase();","    iban = iban.substr(4) + iban.substr(0,4);","","    return iban.split('').map(function(n){","        var code = n.charCodeAt(0);","        if (code >= A && code <= Z){","            // A = 10, B = 11, ... Z = 35","            return code - A + 10;","        } else {","            return n;","        }","    }).join('');","};","","/**"," * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064."," *"," * @method mod9710"," * @param {String} iban"," * @returns {Number}"," */","var mod9710 = function (iban) {","    var remainder = iban,","        block;","","    while (remainder.length > 2){","        block = remainder.slice(0, 9);","        remainder = parseInt(block, 10) % 97 + remainder.slice(block.length);","    }","","    return parseInt(remainder, 10) % 97;","};","","/**"," * This prototype should be used to create iban object from iban correct string"," *"," * @param {String} iban"," */","var Iban = function (iban) {","    this._iban = iban;","};","","/**"," * This method should be used to create iban object from ethereum address"," *"," * @method fromAddress"," * @param {String} address"," * @return {Iban} the IBAN object"," */","Iban.fromAddress = function (address) {","    var asBn = new BigNumber(address, 16);","    var base36 = asBn.toString(36);","    var padded = padLeft(base36, 15);","    return Iban.fromBban(padded.toUpperCase());","};","","/**"," * Convert the passed BBAN to an IBAN for this country specification."," * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>."," * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits"," *"," * @method fromBban"," * @param {String} bban the BBAN to convert to IBAN"," * @returns {Iban} the IBAN object"," */","Iban.fromBban = function (bban) {","    var countryCode = 'XE';","","    var remainder = mod9710(iso13616Prepare(countryCode + '00' + bban));","    var checkDigit = ('0' + (98 - remainder)).slice(-2);","","    return new Iban(countryCode + checkDigit + bban);","};","","/**"," * Should be used to create IBAN object for given institution and identifier"," *"," * @method createIndirect"," * @param {Object} options, required options are \"institution\" and \"identifier\""," * @return {Iban} the IBAN object"," */","Iban.createIndirect = function (options) {","    return Iban.fromBban('ETH' + options.institution + options.identifier);","};","","/**"," * Thos method should be used to check if given string is valid iban object"," *"," * @method isValid"," * @param {String} iban string"," * @return {Boolean} true if it is valid IBAN"," */","Iban.isValid = function (iban) {","    var i = new Iban(iban);","    return i.isValid();","};","","/**"," * Should be called to check if iban is correct"," *"," * @method isValid"," * @returns {Boolean} true if it is, otherwise false"," */","Iban.prototype.isValid = function () {","    return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(this._iban) &&","        mod9710(iso13616Prepare(this._iban)) === 1;","};","","/**"," * Should be called to check if iban number is direct"," *"," * @method isDirect"," * @returns {Boolean} true if it is, otherwise false"," */","Iban.prototype.isDirect = function () {","    return this._iban.length === 34 || this._iban.length === 35;","};","","/**"," * Should be called to check if iban number if indirect"," *"," * @method isIndirect"," * @returns {Boolean} true if it is, otherwise false"," */","Iban.prototype.isIndirect = function () {","    return this._iban.length === 20;","};","","/**"," * Should be called to get iban checksum"," * Uses the mod-97-10 checksumming protocol (ISO/IEC 7064:2003)"," *"," * @method checksum"," * @returns {String} checksum"," */","Iban.prototype.checksum = function () {","    return this._iban.substr(2, 2);","};","","/**"," * Should be called to get institution identifier"," * eg. XREG"," *"," * @method institution"," * @returns {String} institution identifier"," */","Iban.prototype.institution = function () {","    return this.isIndirect() ? this._iban.substr(7, 4) : '';","};","","/**"," * Should be called to get client identifier within institution"," * eg. GAVOFYORK"," *"," * @method client"," * @returns {String} client identifier"," */","Iban.prototype.client = function () {","    return this.isIndirect() ? this._iban.substr(11) : '';","};","","/**"," * Should be called to get client direct address"," *"," * @method address"," * @returns {String} client direct address"," */","Iban.prototype.address = function () {","    if (this.isDirect()) {","        var base36 = this._iban.substr(4);","        var asBn = new BigNumber(base36, 36);","        return padLeft(asBn.toString(16), 20);","    } ","","    return '';","};","","Iban.prototype.toString = function () {","    return this._iban;","};","","module.exports = Iban;","","","},{\"bignumber.js\":\"bignumber.js\"}],34:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/** @file ipcprovider.js"," * @authors:"," *   Fabian Vogelsteller <fabian@ethdev.com>"," * @date 2015"," */","","\"use strict\";","","var utils = require('../utils/utils');","var errors = require('./errors');","","","var IpcProvider = function (path, net) {","    var _this = this;","    this.responseCallbacks = {};","    this.path = path;","    ","    this.connection = net.connect({path: this.path});","","    this.connection.on('error', function(e){","        console.error('IPC Connection Error', e);","        _this._timeout();","    });","","    this.connection.on('end', function(){","        _this._timeout();","    }); ","","","    // LISTEN FOR CONNECTION RESPONSES","    this.connection.on('data', function(data) {","        /*jshint maxcomplexity: 6 */","","        _this._parseResponse(data.toString()).forEach(function(result){","","            var id = null;","","            // get the id which matches the returned id","            if(utils.isArray(result)) {","                result.forEach(function(load){","                    if(_this.responseCallbacks[load.id])","                        id = load.id;","                });","            } else {","                id = result.id;","            }","","            // fire the callback","            if(_this.responseCallbacks[id]) {","                _this.responseCallbacks[id](null, result);","                delete _this.responseCallbacks[id];","            }","        });","    });","};","","/**","Will parse the response and make an array out of it.","","@method _parseResponse","@param {String} data","*/","IpcProvider.prototype._parseResponse = function(data) {","    var _this = this,","        returnValues = [];","    ","    // DE-CHUNKER","    var dechunkedData = data","        .replace(/\\}\\{/g,'}|--|{') // }{","        .replace(/\\}\\]\\[\\{/g,'}]|--|[{') // }][{","        .replace(/\\}\\[\\{/g,'}|--|[{') // }[{","        .replace(/\\}\\]\\{/g,'}]|--|{') // }]{","        .split('|--|');","","    dechunkedData.forEach(function(data){","","        // prepend the last chunk","        if(_this.lastChunk)","            data = _this.lastChunk + data;","","        var result = null;","","        try {","            result = JSON.parse(data);","","        } catch(e) {","","            _this.lastChunk = data;","","            // start timeout to cancel all requests","            clearTimeout(_this.lastChunkTimeout);","            _this.lastChunkTimeout = setTimeout(function(){","                _this.timeout();","                throw errors.InvalidResponse(data);","            }, 1000 * 15);","","            return;","        }","","        // cancel timeout and set chunk to null","        clearTimeout(_this.lastChunkTimeout);","        _this.lastChunk = null;","","        if(result)","            returnValues.push(result);","    });","","    return returnValues;","};","","","/**","Get the adds a callback to the responseCallbacks object,","which will be called if a response matching the response Id will arrive.","","@method _addResponseCallback","*/","IpcProvider.prototype._addResponseCallback = function(payload, callback) {","    var id = payload.id || payload[0].id;","    var method = payload.method || payload[0].method;","","    this.responseCallbacks[id] = callback;","    this.responseCallbacks[id].method = method;","};","","/**","Timeout all requests when the end/error event is fired","","@method _timeout","*/","IpcProvider.prototype._timeout = function() {","    for(var key in this.responseCallbacks) {","        if(this.responseCallbacks.hasOwnProperty(key)){","            this.responseCallbacks[key](errors.InvalidConnection('on IPC'));","            delete this.responseCallbacks[key];","        }","    }","};","","","/**","Check if the current connection is still valid.","","@method isConnected","*/","IpcProvider.prototype.isConnected = function() {","    var _this = this;","","    // try reconnect, when connection is gone","    if(!_this.connection.writable)","        _this.connection.connect({path: _this.path});","","    return !!this.connection.writable;","};","","IpcProvider.prototype.send = function (payload) {","","    if(this.connection.writeSync) {","        var result;","","        // try reconnect, when connection is gone","        if(!this.connection.writable)","            this.connection.connect({path: this.path});","","        var data = this.connection.writeSync(JSON.stringify(payload));","","        try {","            result = JSON.parse(data);","        } catch(e) {","            throw errors.InvalidResponse(data);                ","        }","","        return result;","","    } else {","        throw new Error('You tried to send \"'+ payload.method +'\" synchronously. Synchronous requests are not supported by the IPC provider.');","    }","};","","IpcProvider.prototype.sendAsync = function (payload, callback) {","    // try reconnect, when connection is gone","    if(!this.connection.writable)","        this.connection.connect({path: this.path});","","","    this.connection.write(JSON.stringify(payload));","    this._addResponseCallback(payload, callback);","};","","module.exports = IpcProvider;","","","},{\"../utils/utils\":20,\"./errors\":26}],35:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/** @file jsonrpc.js"," * @authors:"," *   Marek Kotewicz <marek@ethdev.com>"," * @date 2015"," */","","var Jsonrpc = function () {","    // singleton pattern","    if (arguments.callee._singletonInstance) {","        return arguments.callee._singletonInstance;","    }","    arguments.callee._singletonInstance = this;","","    this.messageId = 1;","};","","/**"," * @return {Jsonrpc} singleton"," */","Jsonrpc.getInstance = function () {","    var instance = new Jsonrpc();","    return instance;","};","","/**"," * Should be called to valid json create payload object"," *"," * @method toPayload"," * @param {Function} method of jsonrpc call, required"," * @param {Array} params, an array of method params, optional"," * @returns {Object} valid jsonrpc payload object"," */","Jsonrpc.prototype.toPayload = function (method, params) {","    if (!method)","        console.error('jsonrpc method should be specified!');","","    return {","        jsonrpc: '2.0',","        method: method,","        params: params || [],","        id: this.messageId++","    };","};","","/**"," * Should be called to check if jsonrpc response is valid"," *"," * @method isValidResponse"," * @param {Object}"," * @returns {Boolean} true if response is valid, otherwise false"," */","Jsonrpc.prototype.isValidResponse = function (response) {","    return !!response &&","        !response.error &&","        response.jsonrpc === '2.0' &&","        typeof response.id === 'number' &&","        response.result !== undefined; // only undefined is not valid json object","};","","/**"," * Should be called to create batch payload object"," *"," * @method toBatchPayload"," * @param {Array} messages, an array of objects with method (required) and params (optional) fields"," * @returns {Array} batch payload"," */","Jsonrpc.prototype.toBatchPayload = function (messages) {","    var self = this;","    return messages.map(function (message) {","        return self.toPayload(message.method, message.params);","    });","};","","module.exports = Jsonrpc;","","","},{}],36:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/**"," * @file method.js"," * @author Marek Kotewicz <marek@ethdev.com>"," * @date 2015"," */","","var utils = require('../utils/utils');","var errors = require('./errors');","","var Method = function (options) {","    this.name = options.name;","    this.call = options.call;","    this.params = options.params || 0;","    this.inputFormatter = options.inputFormatter;","    this.outputFormatter = options.outputFormatter;","    this.requestManager = null;","};","","Method.prototype.setRequestManager = function (rm) {","    this.requestManager = rm;","};","","/**"," * Should be used to determine name of the jsonrpc method based on arguments"," *"," * @method getCall"," * @param {Array} arguments"," * @return {String} name of jsonrpc method"," */","Method.prototype.getCall = function (args) {","    return utils.isFunction(this.call) ? this.call(args) : this.call;","};","","/**"," * Should be used to extract callback from array of arguments. Modifies input param"," *"," * @method extractCallback"," * @param {Array} arguments"," * @return {Function|Null} callback, if exists"," */","Method.prototype.extractCallback = function (args) {","    if (utils.isFunction(args[args.length - 1])) {","        return args.pop(); // modify the args array!","    }","};","","/**"," * Should be called to check if the number of arguments is correct"," * "," * @method validateArgs"," * @param {Array} arguments"," * @throws {Error} if it is not"," */","Method.prototype.validateArgs = function (args) {","    if (args.length !== this.params) {","        throw errors.InvalidNumberOfParams();","    }","};","","/**"," * Should be called to format input args of method"," * "," * @method formatInput"," * @param {Array}"," * @return {Array}"," */","Method.prototype.formatInput = function (args) {","    if (!this.inputFormatter) {","        return args;","    }","","    return this.inputFormatter.map(function (formatter, index) {","        return formatter ? formatter(args[index]) : args[index];","    });","};","","/**"," * Should be called to format output(result) of method"," *"," * @method formatOutput"," * @param {Object}"," * @return {Object}"," */","Method.prototype.formatOutput = function (result) {","    return this.outputFormatter && result ? this.outputFormatter(result) : result;","};","","/**"," * Should create payload from given input args"," *"," * @method toPayload"," * @param {Array} args"," * @return {Object}"," */","Method.prototype.toPayload = function (args) {","    var call = this.getCall(args);","    var callback = this.extractCallback(args);","    var params = this.formatInput(args);","    this.validateArgs(params);","","    return {","        method: call,","        params: params,","        callback: callback","    };","};","","Method.prototype.attachToObject = function (obj) {","    var func = this.buildCall();","    func.call = this.call; // TODO!!! that's ugly. filter.js uses it","    var name = this.name.split('.');","    if (name.length > 1) {","        obj[name[0]] = obj[name[0]] || {};","        obj[name[0]][name[1]] = func;","    } else {","        obj[name[0]] = func; ","    }","};","","Method.prototype.buildCall = function() {","    var method = this;","    var send = function () {","        var payload = method.toPayload(Array.prototype.slice.call(arguments));","        if (payload.callback) {","            return method.requestManager.sendAsync(payload, function (err, result) {","                payload.callback(err, method.formatOutput(result));","            });","        }","        return method.formatOutput(method.requestManager.send(payload));","    };","    send.request = this.request.bind(this);","    return send;","};","","/**"," * Should be called to create pure JSONRPC request which can be used in batch request"," *"," * @method request"," * @param {...} params"," * @return {Object} jsonrpc request"," */","Method.prototype.request = function () {","    var payload = this.toPayload(Array.prototype.slice.call(arguments));","    payload.format = this.formatOutput.bind(this);","    return payload;","};","","module.exports = Method;","","","},{\"../utils/utils\":20,\"./errors\":26}],37:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/** @file db.js"," * @authors:"," *   Marek Kotewicz <marek@ethdev.com>"," * @date 2015"," */","","var Method = require('../method');","","var DB = function (web3) {","    this._requestManager = web3._requestManager;","","    var self = this;","    ","    methods().forEach(function(method) { ","        method.attachToObject(self);","        method.setRequestManager(web3._requestManager);","    });","};","","var methods = function () {","    var putString = new Method({","        name: 'putString',","        call: 'db_putString',","        params: 3","    });","","    var getString = new Method({","        name: 'getString',","        call: 'db_getString',","        params: 2","    });","","    var putHex = new Method({","        name: 'putHex',","        call: 'db_putHex',","        params: 3","    });","","    var getHex = new Method({","        name: 'getHex',","        call: 'db_getHex',","        params: 2","    });","","    return [","        putString, getString, putHex, getHex","    ];","};","","module.exports = DB;","","},{\"../method\":36}],38:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/**"," * @file eth.js"," * @author Marek Kotewicz <marek@ethdev.com>"," * @author Fabian Vogelsteller <fabian@ethdev.com>"," * @date 2015"," */","","\"use strict\";","","var formatters = require('../formatters');","var utils = require('../../utils/utils');","var Method = require('../method');","var Property = require('../property');","var c = require('../../utils/config');","var Contract = require('../contract');","var watches = require('./watches');","var Filter = require('../filter');","var IsSyncing = require('../syncing');","var namereg = require('../namereg');","var Iban = require('../iban');","var transfer = require('../transfer');","","var blockCall = function (args) {","    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? \"eth_getBlockByHash\" : \"eth_getBlockByNumber\";","};","","var transactionFromBlockCall = function (args) {","    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getTransactionByBlockHashAndIndex' : 'eth_getTransactionByBlockNumberAndIndex';","};","","var uncleCall = function (args) {","    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleByBlockHashAndIndex' : 'eth_getUncleByBlockNumberAndIndex';","};","","var getBlockTransactionCountCall = function (args) {","    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getBlockTransactionCountByHash' : 'eth_getBlockTransactionCountByNumber';","};","","var uncleCountCall = function (args) {","    return (utils.isString(args[0]) && args[0].indexOf('0x') === 0) ? 'eth_getUncleCountByBlockHash' : 'eth_getUncleCountByBlockNumber';","};","","function Eth(web3) {","    this.web3 = web3;","","    var self = this;","","    methods().forEach(function(method) { ","        method.attachToObject(self);","        method.setRequestManager(web3._requestManager);","    });","","    properties().forEach(function(p) { ","        p.attachToObject(self);","        p.setRequestManager(web3._requestManager);","    });","","    this.namereg = this.contract(namereg.global.abi).at(namereg.global.address);","    this.icapNamereg = this.contract(namereg.icap.abi).at(namereg.icap.address);","    this.iban = Iban;","    this.sendIBANTransaction = transfer.bind(null, web3);","}","","Object.defineProperty(Eth.prototype, 'defaultBlock', {","    get: function () {","        return c.defaultBlock;","    },","    set: function (val) {","        c.defaultBlock = val;","        return val;","    }","});","","Object.defineProperty(Eth.prototype, 'defaultAccount', {","    get: function () {","        return c.defaultAccount;","    },","    set: function (val) {","        c.defaultAccount = val;","        return val;","    }","});","","var methods = function () {","    var getBalance = new Method({","        name: 'getBalance',","        call: 'eth_getBalance',","        params: 2,","        inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],","        outputFormatter: formatters.outputBigNumberFormatter","    });","","    var getStorageAt = new Method({","        name: 'getStorageAt',","        call: 'eth_getStorageAt',","        params: 3,","        inputFormatter: [null, utils.toHex, formatters.inputDefaultBlockNumberFormatter]","    });","","    var getCode = new Method({","        name: 'getCode',","        call: 'eth_getCode',","        params: 2,","        inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]","    });","","    var getBlock = new Method({","        name: 'getBlock',","        call: blockCall,","        params: 2,","        inputFormatter: [formatters.inputBlockNumberFormatter, function (val) { return !!val; }],","        outputFormatter: formatters.outputBlockFormatter","    });","","    var getUncle = new Method({","        name: 'getUncle',","        call: uncleCall,","        params: 2,","        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],","        outputFormatter: formatters.outputBlockFormatter,","","    });","","    var getCompilers = new Method({","        name: 'getCompilers',","        call: 'eth_getCompilers',","        params: 0","    });","","    var getBlockTransactionCount = new Method({","        name: 'getBlockTransactionCount',","        call: getBlockTransactionCountCall,","        params: 1,","        inputFormatter: [formatters.inputBlockNumberFormatter],","        outputFormatter: utils.toDecimal","    });","","    var getBlockUncleCount = new Method({","        name: 'getBlockUncleCount',","        call: uncleCountCall,","        params: 1,","        inputFormatter: [formatters.inputBlockNumberFormatter],","        outputFormatter: utils.toDecimal","    });","","    var getTransaction = new Method({","        name: 'getTransaction',","        call: 'eth_getTransactionByHash',","        params: 1,","        outputFormatter: formatters.outputTransactionFormatter","    });","","    var getTransactionFromBlock = new Method({","        name: 'getTransactionFromBlock',","        call: transactionFromBlockCall,","        params: 2,","        inputFormatter: [formatters.inputBlockNumberFormatter, utils.toHex],","        outputFormatter: formatters.outputTransactionFormatter","    });","","    var getTransactionReceipt = new Method({","        name: 'getTransactionReceipt',","        call: 'eth_getTransactionReceipt',","        params: 1,","        outputFormatter: formatters.outputTransactionReceiptFormatter","    });","","    var getTransactionCount = new Method({","        name: 'getTransactionCount',","        call: 'eth_getTransactionCount',","        params: 2,","        inputFormatter: [null, formatters.inputDefaultBlockNumberFormatter],","        outputFormatter: utils.toDecimal","    });","","    var sendRawTransaction = new Method({","        name: 'sendRawTransaction',","        call: 'eth_sendRawTransaction',","        params: 1,","        inputFormatter: [null]","    });","","    var sendTransaction = new Method({","        name: 'sendTransaction',","        call: 'eth_sendTransaction',","        params: 1,","        inputFormatter: [formatters.inputTransactionFormatter]","    });","","    var call = new Method({","        name: 'call',","        call: 'eth_call',","        params: 2,","        inputFormatter: [formatters.inputCallFormatter, formatters.inputDefaultBlockNumberFormatter]","    });","","    var estimateGas = new Method({","        name: 'estimateGas',","        call: 'eth_estimateGas',","        params: 1,","        inputFormatter: [formatters.inputCallFormatter],","        outputFormatter: utils.toDecimal","    });","","    var compileSolidity = new Method({","        name: 'compile.solidity',","        call: 'eth_compileSolidity',","        params: 1","    });","","    var compileLLL = new Method({","        name: 'compile.lll',","        call: 'eth_compileLLL',","        params: 1","    });","","    var compileSerpent = new Method({","        name: 'compile.serpent',","        call: 'eth_compileSerpent',","        params: 1","    });","","    var submitWork = new Method({","        name: 'submitWork',","        call: 'eth_submitWork',","        params: 3","    });","","    var getWork = new Method({","        name: 'getWork',","        call: 'eth_getWork',","        params: 0","    });","","    return [","        getBalance,","        getStorageAt,","        getCode,","        getBlock,","        getUncle,","        getCompilers,","        getBlockTransactionCount,","        getBlockUncleCount,","        getTransaction,","        getTransactionFromBlock,","        getTransactionReceipt,","        getTransactionCount,","        call,","        estimateGas,","        sendRawTransaction,","        sendTransaction,","        compileSolidity,","        compileLLL,","        compileSerpent,","        submitWork,","        getWork","    ];","};","","","var properties = function () {","    return [","        new Property({","            name: 'coinbase',","            getter: 'eth_coinbase'","        }),","        new Property({","            name: 'mining',","            getter: 'eth_mining'","        }),","        new Property({","            name: 'hashrate',","            getter: 'eth_hashrate',","            outputFormatter: utils.toDecimal","        }),","        new Property({","            name: 'syncing',","            getter: 'eth_syncing',","            outputFormatter: formatters.outputSyncingFormatter","        }),","        new Property({","            name: 'gasPrice',","            getter: 'eth_gasPrice',","            outputFormatter: formatters.outputBigNumberFormatter","        }),","        new Property({","            name: 'accounts',","            getter: 'eth_accounts'","        }),","        new Property({","            name: 'blockNumber',","            getter: 'eth_blockNumber',","            outputFormatter: utils.toDecimal","        })","    ];","};","","Eth.prototype.contract = function (abi) {","    var factory = new Contract(this.web3, abi);","    return factory;","};","","Eth.prototype.filter = function (fil, callback) {","    return new Filter(this.web3, fil, watches.eth(), formatters.outputLogFormatter, callback);","};","","Eth.prototype.isSyncing = function (callback) {","    return new IsSyncing(this.web3, callback);","};","","module.exports = Eth;","","","},{\"../../utils/config\":18,\"../../utils/utils\":20,\"../contract\":25,\"../filter\":29,\"../formatters\":30,\"../iban\":33,\"../method\":36,\"../namereg\":42,\"../property\":43,\"../syncing\":46,\"../transfer\":47,\"./watches\":41}],39:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/** @file eth.js"," * @authors:"," *   Marek Kotewicz <marek@ethdev.com>"," * @date 2015"," */","","var utils = require('../../utils/utils');","var Property = require('../property');","","var Net = function (web3) {","    this._requestManager = web3._requestManager;","","    var self = this;","","    properties().forEach(function(p) { ","        p.attachToObject(self);","        p.setRequestManager(web3._requestManager);","    });","};","","/// @returns an array of objects describing web3.eth api properties","var properties = function () {","    return [","        new Property({","            name: 'listening',","            getter: 'net_listening'","        }),","        new Property({","            name: 'peerCount',","            getter: 'net_peerCount',","            outputFormatter: utils.toDecimal","        })","    ];","};","","module.exports = Net;","","},{\"../../utils/utils\":20,\"../property\":43}],40:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/** @file shh.js"," * @authors:"," *   Marek Kotewicz <marek@ethdev.com>"," * @date 2015"," */","","var Method = require('../method');","var formatters = require('../formatters');","var Filter = require('../filter');","var watches = require('./watches');","","var Shh = function (web3) {","    this.web3 = web3;","","    var self = this;","","    methods().forEach(function(method) { ","        method.attachToObject(self);","        method.setRequestManager(web3._requestManager);","    });","};","","Shh.prototype.filter = function (fil, callback) {","    return new Filter(this.web3, fil, watches.shh(), formatters.outputPostFormatter, callback);","};","","var methods = function () { ","","    var post = new Method({","        name: 'post', ","        call: 'shh_post', ","        params: 1,","        inputFormatter: [formatters.inputPostFormatter]","    });","","    var newIdentity = new Method({","        name: 'newIdentity',","        call: 'shh_newIdentity',","        params: 0","    });","","    var hasIdentity = new Method({","        name: 'hasIdentity',","        call: 'shh_hasIdentity',","        params: 1","    });","","    var newGroup = new Method({","        name: 'newGroup',","        call: 'shh_newGroup',","        params: 0","    });","","    var addToGroup = new Method({","        name: 'addToGroup',","        call: 'shh_addToGroup',","        params: 0","    });","","    return [","        post,","        newIdentity,","        hasIdentity,","        newGroup,","        addToGroup","    ];","};","","module.exports = Shh;","","","},{\"../filter\":29,\"../formatters\":30,\"../method\":36,\"./watches\":41}],41:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/** @file watches.js"," * @authors:"," *   Marek Kotewicz <marek@ethdev.com>"," * @date 2015"," */","","var Method = require('../method');","","/// @returns an array of objects describing web3.eth.filter api methods","var eth = function () {","    var newFilterCall = function (args) {","        var type = args[0];","","        switch(type) {","            case 'latest':","                args.shift();","                this.params = 0;","                return 'eth_newBlockFilter';","            case 'pending':","                args.shift();","                this.params = 0;","                return 'eth_newPendingTransactionFilter';","            default:","                return 'eth_newFilter';","        }","    };","","    var newFilter = new Method({","        name: 'newFilter',","        call: newFilterCall,","        params: 1","    });","","    var uninstallFilter = new Method({","        name: 'uninstallFilter',","        call: 'eth_uninstallFilter',","        params: 1","    });","","    var getLogs = new Method({","        name: 'getLogs',","        call: 'eth_getFilterLogs',","        params: 1","    });","","    var poll = new Method({","        name: 'poll',","        call: 'eth_getFilterChanges',","        params: 1","    });","","    return [","        newFilter,","        uninstallFilter,","        getLogs,","        poll","    ];","};","","/// @returns an array of objects describing web3.shh.watch api methods","var shh = function () {","    var newFilter = new Method({","        name: 'newFilter',","        call: 'shh_newFilter',","        params: 1","    });","","    var uninstallFilter = new Method({","        name: 'uninstallFilter',","        call: 'shh_uninstallFilter',","        params: 1","    });","","    var getLogs = new Method({","        name: 'getLogs',","        call: 'shh_getMessages',","        params: 1","    });","","    var poll = new Method({","        name: 'poll',","        call: 'shh_getFilterChanges',","        params: 1","    });","","    return [","        newFilter,","        uninstallFilter,","        getLogs,","        poll","    ];","};","","module.exports = {","    eth: eth,","    shh: shh","};","","","},{\"../method\":36}],42:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/** "," * @file namereg.js"," * @author Marek Kotewicz <marek@ethdev.com>"," * @date 2015"," */","","var globalRegistrarAbi = require('../contracts/GlobalRegistrar.json');","var icapRegistrarAbi= require('../contracts/ICAPRegistrar.json');","","var globalNameregAddress = '0xc6d9d2cd449a754c494264e1809c50e34d64562b';","var icapNameregAddress = '0xa1a111bc074c9cfa781f0c38e63bd51c91b8af00';","","module.exports = {","    global: {","        abi: globalRegistrarAbi,","        address: globalNameregAddress","    },","    icap: {","        abi: icapRegistrarAbi,","        address: icapNameregAddress","    }","};","","","},{\"../contracts/GlobalRegistrar.json\":1,\"../contracts/ICAPRegistrar.json\":2}],43:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/**"," * @file property.js"," * @author Fabian Vogelsteller <fabian@frozeman.de>"," * @author Marek Kotewicz <marek@ethdev.com>"," * @date 2015"," */","","var utils = require('../utils/utils');","","var Property = function (options) {","    this.name = options.name;","    this.getter = options.getter;","    this.setter = options.setter;","    this.outputFormatter = options.outputFormatter;","    this.inputFormatter = options.inputFormatter;","    this.requestManager = null;","};","","Property.prototype.setRequestManager = function (rm) {","    this.requestManager = rm;","};","","/**"," * Should be called to format input args of method"," * "," * @method formatInput"," * @param {Array}"," * @return {Array}"," */","Property.prototype.formatInput = function (arg) {","    return this.inputFormatter ? this.inputFormatter(arg) : arg;","};","","/**"," * Should be called to format output(result) of method"," *"," * @method formatOutput"," * @param {Object}"," * @return {Object}"," */","Property.prototype.formatOutput = function (result) {","    return this.outputFormatter && result !== null ? this.outputFormatter(result) : result;","};","","/**"," * Should be used to extract callback from array of arguments. Modifies input param"," *"," * @method extractCallback"," * @param {Array} arguments"," * @return {Function|Null} callback, if exists"," */","Property.prototype.extractCallback = function (args) {","    if (utils.isFunction(args[args.length - 1])) {","        return args.pop(); // modify the args array!","    }","};","","","/**"," * Should attach function to method"," * "," * @method attachToObject"," * @param {Object}"," * @param {Function}"," */","Property.prototype.attachToObject = function (obj) {","    var proto = {","        get: this.buildGet() ","    };","","    var names = this.name.split('.');","    var name = names[0];","    if (names.length > 1) {","        obj[names[0]] = obj[names[0]] || {};","        obj = obj[names[0]];","        name = names[1];","    }","","    Object.defineProperty(obj, name, proto);","    obj[asyncGetterName(name)] = this.buildAsyncGet();","};","","var asyncGetterName = function (name) {","    return 'get' + name.charAt(0).toUpperCase() + name.slice(1);","};","","Property.prototype.buildGet = function () {","    var property = this;","    return function get() {","        return property.formatOutput(property.requestManager.send({","            method: property.getter","        })); ","    };","};","","Property.prototype.buildAsyncGet = function () {","    var property = this;","    var get = function (callback) {","        property.requestManager.sendAsync({","            method: property.getter","        }, function (err, result) {","            callback(err, property.formatOutput(result));","        });","    };","    get.request = this.request.bind(this);","    return get;","};","","/**"," * Should be called to create pure JSONRPC request which can be used in batch request"," *"," * @method request"," * @param {...} params"," * @return {Object} jsonrpc request"," */","Property.prototype.request = function () {","    var payload = {","        method: this.getter,","        params: [],","        callback: this.extractCallback(Array.prototype.slice.call(arguments))","    };","    payload.format = this.formatOutput.bind(this);","    return payload;","};","","module.exports = Property;","","","},{\"../utils/utils\":20}],44:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/** "," * @file requestmanager.js"," * @author Jeffrey Wilcke <jeff@ethdev.com>"," * @author Marek Kotewicz <marek@ethdev.com>"," * @author Marian Oancea <marian@ethdev.com>"," * @author Fabian Vogelsteller <fabian@ethdev.com>"," * @author Gav Wood <g@ethdev.com>"," * @date 2014"," */","","var Jsonrpc = require('./jsonrpc');","var utils = require('../utils/utils');","var c = require('../utils/config');","var errors = require('./errors');","","/**"," * It's responsible for passing messages to providers"," * It's also responsible for polling the ethereum node for incoming messages"," * Default poll timeout is 1 second"," * Singleton"," */","var RequestManager = function (provider) {","    this.provider = provider;","    this.polls = {};","    this.timeout = null;","};","","/**"," * Should be used to synchronously send request"," *"," * @method send"," * @param {Object} data"," * @return {Object}"," */","RequestManager.prototype.send = function (data) {","    if (!this.provider) {","        console.error(errors.InvalidProvider());","        return null;","    }","","    var payload = Jsonrpc.getInstance().toPayload(data.method, data.params);","    var result = this.provider.send(payload);","","    if (!Jsonrpc.getInstance().isValidResponse(result)) {","        throw errors.InvalidResponse(result);","    }","","    return result.result;","};","","/**"," * Should be used to asynchronously send request"," *"," * @method sendAsync"," * @param {Object} data"," * @param {Function} callback"," */","RequestManager.prototype.sendAsync = function (data, callback) {","    if (!this.provider) {","        return callback(errors.InvalidProvider());","    }","","    var payload = Jsonrpc.getInstance().toPayload(data.method, data.params);","    this.provider.sendAsync(payload, function (err, result) {","        if (err) {","            return callback(err);","        }","        ","        if (!Jsonrpc.getInstance().isValidResponse(result)) {","            return callback(errors.InvalidResponse(result));","        }","","        callback(null, result.result);","    });","};","","/**"," * Should be called to asynchronously send batch request"," *"," * @method sendBatch"," * @param {Array} batch data"," * @param {Function} callback"," */","RequestManager.prototype.sendBatch = function (data, callback) {","    if (!this.provider) {","        return callback(errors.InvalidProvider());","    }","","    var payload = Jsonrpc.getInstance().toBatchPayload(data);","","    this.provider.sendAsync(payload, function (err, results) {","        if (err) {","            return callback(err);","        }","","        if (!utils.isArray(results)) {","            return callback(errors.InvalidResponse(results));","        }","","        callback(err, results);","    }); ","};","","/**"," * Should be used to set provider of request manager"," *"," * @method setProvider"," * @param {Object}"," */","RequestManager.prototype.setProvider = function (p) {","    this.provider = p;","};","","/**"," * Should be used to start polling"," *"," * @method startPolling"," * @param {Object} data"," * @param {Number} pollId"," * @param {Function} callback"," * @param {Function} uninstall"," *"," * @todo cleanup number of params"," */","RequestManager.prototype.startPolling = function (data, pollId, callback, uninstall) {","    this.polls[pollId] = {data: data, id: pollId, callback: callback, uninstall: uninstall};","","","    // start polling","    if (!this.timeout) {","        this.poll();","    }","};","","/**"," * Should be used to stop polling for filter with given id"," *"," * @method stopPolling"," * @param {Number} pollId"," */","RequestManager.prototype.stopPolling = function (pollId) {","    delete this.polls[pollId];","","    // stop polling","    if(Object.keys(this.polls).length === 0 && this.timeout) {","        clearTimeout(this.timeout);","        this.timeout = null;","    }","};","","/**"," * Should be called to reset the polling mechanism of the request manager"," *"," * @method reset"," */","RequestManager.prototype.reset = function (keepIsSyncing) {","    /*jshint maxcomplexity:5 */","","    for (var key in this.polls) {","        // remove all polls, except sync polls,","        // they need to be removed manually by calling syncing.stopWatching()","        if(!keepIsSyncing || key.indexOf('syncPoll_') === -1) {","            this.polls[key].uninstall();","            delete this.polls[key];","        }","    }","","    // stop polling","    if(Object.keys(this.polls).length === 0 && this.timeout) {","        clearTimeout(this.timeout);","        this.timeout = null;","    }","};","","/**"," * Should be called to poll for changes on filter with given id"," *"," * @method poll"," */","RequestManager.prototype.poll = function () {","    /*jshint maxcomplexity: 6 */","    this.timeout = setTimeout(this.poll.bind(this), c.ETH_POLLING_TIMEOUT);","","    if (Object.keys(this.polls).length === 0) {","        return;","    }","","    if (!this.provider) {","        console.error(errors.InvalidProvider());","        return;","    }","","    var pollsData = [];","    var pollsIds = [];","    for (var key in this.polls) {","        pollsData.push(this.polls[key].data);","        pollsIds.push(key);","    }","","    if (pollsData.length === 0) {","        return;","    }","","    var payload = Jsonrpc.getInstance().toBatchPayload(pollsData);","    ","    // map the request id to they poll id","    var pollsIdMap = {};","    payload.forEach(function(load, index){","        pollsIdMap[load.id] = pollsIds[index];","    });","","","    var self = this;","    this.provider.sendAsync(payload, function (error, results) {","","","        // TODO: console log?","        if (error) {","            return;","        }","","        if (!utils.isArray(results)) {","            throw errors.InvalidResponse(results);","        }","        results.map(function (result) {","            var id = pollsIdMap[result.id];","","            // make sure the filter is still installed after arrival of the request","            if (self.polls[id]) {","                result.callback = self.polls[id].callback;","                return result;","            } else","                return false;","        }).filter(function (result) {","            return !!result; ","        }).filter(function (result) {","            var valid = Jsonrpc.getInstance().isValidResponse(result);","            if (!valid) {","                result.callback(errors.InvalidResponse(result));","            }","            return valid;","        }).forEach(function (result) {","            result.callback(null, result.result);","        });","    });","};","","module.exports = RequestManager;","","","},{\"../utils/config\":18,\"../utils/utils\":20,\"./errors\":26,\"./jsonrpc\":35}],45:[function(require,module,exports){","","","var Settings = function () {","    this.defaultBlock = 'latest';","    this.defaultAccount = undefined;","};","","module.exports = Settings;","","","},{}],46:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/** @file syncing.js"," * @authors:"," *   Fabian Vogelsteller <fabian@ethdev.com>"," * @date 2015"," */","","var formatters = require('./formatters');","var utils = require('../utils/utils');","","var count = 1;","","/**","Adds the callback and sets up the methods, to iterate over the results.","","@method pollSyncing","@param {Object} self","*/","var pollSyncing = function(self) {","","    var onMessage = function (error, sync) {","        if (error) {","            return self.callbacks.forEach(function (callback) {","                callback(error);","            });","        }","","        if(utils.isObject(sync))","            sync = formatters.outputSyncingFormatter(sync);","","        self.callbacks.forEach(function (callback) {","            if (self.lastSyncState !== sync) {","                ","                // call the callback with true first so the app can stop anything, before receiving the sync data","                if(!self.lastSyncState && utils.isObject(sync))","                    callback(null, true);","                ","                // call on the next CPU cycle, so the actions of the sync stop can be processes first","                setTimeout(function() {","                    callback(null, sync);","                }, 0);","                ","                self.lastSyncState = sync;","            }","        });","    };","","    self.requestManager.startPolling({","        method: 'eth_syncing',","        params: [],","    }, self.pollId, onMessage, self.stopWatching.bind(self));","","};","","var IsSyncing = function (web3, callback) {","    this._web3 = web3;","    this.requestManager = web3._requestManager;","    this.pollId = 'syncPoll_'+ count++;","    this.callbacks = [];","    this.addCallback(callback);","    this.lastSyncState = false;","    pollSyncing(this);","","    return this;","};","","IsSyncing.prototype.addCallback = function (callback) {","    if(callback)","        this.callbacks.push(callback);","    return this;","};","","IsSyncing.prototype.stopWatching = function () {","    this._web3._requestManager.stopPolling(this.pollId);","    this.callbacks = [];","};","","module.exports = IsSyncing;","","","},{\"../utils/utils\":20,\"./formatters\":30}],47:[function(require,module,exports){","/*","    This file is part of web3.js.","","    web3.js is free software: you can redistribute it and/or modify","    it under the terms of the GNU Lesser General Public License as published by","    the Free Software Foundation, either version 3 of the License, or","    (at your option) any later version.","","    web3.js is distributed in the hope that it will be useful,","    but WITHOUT ANY WARRANTY; without even the implied warranty of","    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the","    GNU Lesser General Public License for more details.","","    You should have received a copy of the GNU Lesser General Public License","    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.","*/","/** "," * @file transfer.js"," * @author Marek Kotewicz <marek@ethdev.com>"," * @date 2015"," */","","var Iban = require('./iban');","var exchangeAbi = require('../contracts/SmartExchange.json');","","/**"," * Should be used to make Iban transfer"," *"," * @method transfer"," * @param {String} from"," * @param {String} to iban"," * @param {Value} value to be tranfered"," * @param {Function} callback, callback"," */","var transfer = function (web3, from, to, value, callback) {","    var iban = new Iban(to); ","    if (!iban.isValid()) {","        throw new Error('invalid iban address');","    }","","    if (iban.isDirect()) {","        return transferToAddress(web3, from, iban.address(), value, callback);","    }","    ","    if (!callback) {","        var address = web3.eth.icapNamereg.addr(iban.institution());","        return deposit(web3, from, address, value, iban.client());","    }","","    web3.eth.icapNamereg.addr(iban.institution(), function (err, address) {","        return deposit(web3, from, address, value, iban.client(), callback);","    });","    ","};","","/**"," * Should be used to transfer funds to certain address"," *"," * @method transferToAddress"," * @param {String} from"," * @param {String} to"," * @param {Value} value to be tranfered"," * @param {Function} callback, callback"," */","var transferToAddress = function (web3, from, to, value, callback) {","    return web3.eth.sendTransaction({","        address: to,","        from: from,","        value: value","    }, callback);","};","","/**"," * Should be used to deposit funds to generic Exchange contract (must implement deposit(bytes32) method!)"," *"," * @method deposit"," * @param {String} from"," * @param {String} to"," * @param {Value} value to be transfered"," * @param {String} client unique identifier"," * @param {Function} callback, callback"," */","var deposit = function (web3, from, to, value, client, callback) {","    var abi = exchangeAbi;","    return web3.eth.contract(abi).at(to).deposit(client, {","        from: from,","        value: value","    }, callback);","};","","module.exports = transfer;","","","},{\"../contracts/SmartExchange.json\":3,\"./iban\":33}],48:[function(require,module,exports){","","},{}],49:[function(require,module,exports){",";(function (root, factory, undef) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t(function () {","\t    // Shortcuts","\t    var C = CryptoJS;","\t    var C_lib = C.lib;","\t    var BlockCipher = C_lib.BlockCipher;","\t    var C_algo = C.algo;","","\t    // Lookup tables","\t    var SBOX = [];","\t    var INV_SBOX = [];","\t    var SUB_MIX_0 = [];","\t    var SUB_MIX_1 = [];","\t    var SUB_MIX_2 = [];","\t    var SUB_MIX_3 = [];","\t    var INV_SUB_MIX_0 = [];","\t    var INV_SUB_MIX_1 = [];","\t    var INV_SUB_MIX_2 = [];","\t    var INV_SUB_MIX_3 = [];","","\t    // Compute lookup tables","\t    (function () {","\t        // Compute double table","\t        var d = [];","\t        for (var i = 0; i < 256; i++) {","\t            if (i < 128) {","\t                d[i] = i << 1;","\t            } else {","\t                d[i] = (i << 1) ^ 0x11b;","\t            }","\t        }","","\t        // Walk GF(2^8)","\t        var x = 0;","\t        var xi = 0;","\t        for (var i = 0; i < 256; i++) {","\t            // Compute sbox","\t            var sx = xi ^ (xi << 1) ^ (xi << 2) ^ (xi << 3) ^ (xi << 4);","\t            sx = (sx >>> 8) ^ (sx & 0xff) ^ 0x63;","\t            SBOX[x] = sx;","\t            INV_SBOX[sx] = x;","","\t            // Compute multiplication","\t            var x2 = d[x];","\t            var x4 = d[x2];","\t            var x8 = d[x4];","","\t            // Compute sub bytes, mix columns tables","\t            var t = (d[sx] * 0x101) ^ (sx * 0x1010100);","\t            SUB_MIX_0[x] = (t << 24) | (t >>> 8);","\t            SUB_MIX_1[x] = (t << 16) | (t >>> 16);","\t            SUB_MIX_2[x] = (t << 8)  | (t >>> 24);","\t            SUB_MIX_3[x] = t;","","\t            // Compute inv sub bytes, inv mix columns tables","\t            var t = (x8 * 0x1010101) ^ (x4 * 0x10001) ^ (x2 * 0x101) ^ (x * 0x1010100);","\t            INV_SUB_MIX_0[sx] = (t << 24) | (t >>> 8);","\t            INV_SUB_MIX_1[sx] = (t << 16) | (t >>> 16);","\t            INV_SUB_MIX_2[sx] = (t << 8)  | (t >>> 24);","\t            INV_SUB_MIX_3[sx] = t;","","\t            // Compute next counter","\t            if (!x) {","\t                x = xi = 1;","\t            } else {","\t                x = x2 ^ d[d[d[x8 ^ x2]]];","\t                xi ^= d[d[xi]];","\t            }","\t        }","\t    }());","","\t    // Precomputed Rcon lookup","\t    var RCON = [0x00, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36];","","\t    /**","\t     * AES block cipher algorithm.","\t     */","\t    var AES = C_algo.AES = BlockCipher.extend({","\t        _doReset: function () {","\t            // Shortcuts","\t            var key = this._key;","\t            var keyWords = key.words;","\t            var keySize = key.sigBytes / 4;","","\t            // Compute number of rounds","\t            var nRounds = this._nRounds = keySize + 6","","\t            // Compute number of key schedule rows","\t            var ksRows = (nRounds + 1) * 4;","","\t            // Compute key schedule","\t            var keySchedule = this._keySchedule = [];","\t            for (var ksRow = 0; ksRow < ksRows; ksRow++) {","\t                if (ksRow < keySize) {","\t                    keySchedule[ksRow] = keyWords[ksRow];","\t                } else {","\t                    var t = keySchedule[ksRow - 1];","","\t                    if (!(ksRow % keySize)) {","\t                        // Rot word","\t                        t = (t << 8) | (t >>> 24);","","\t                        // Sub word","\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];","","\t                        // Mix Rcon","\t                        t ^= RCON[(ksRow / keySize) | 0] << 24;","\t                    } else if (keySize > 6 && ksRow % keySize == 4) {","\t                        // Sub word","\t                        t = (SBOX[t >>> 24] << 24) | (SBOX[(t >>> 16) & 0xff] << 16) | (SBOX[(t >>> 8) & 0xff] << 8) | SBOX[t & 0xff];","\t                    }","","\t                    keySchedule[ksRow] = keySchedule[ksRow - keySize] ^ t;","\t                }","\t            }","","\t            // Compute inv key schedule","\t            var invKeySchedule = this._invKeySchedule = [];","\t            for (var invKsRow = 0; invKsRow < ksRows; invKsRow++) {","\t                var ksRow = ksRows - invKsRow;","","\t                if (invKsRow % 4) {","\t                    var t = keySchedule[ksRow];","\t                } else {","\t                    var t = keySchedule[ksRow - 4];","\t                }","","\t                if (invKsRow < 4 || ksRow <= 4) {","\t                    invKeySchedule[invKsRow] = t;","\t                } else {","\t                    invKeySchedule[invKsRow] = INV_SUB_MIX_0[SBOX[t >>> 24]] ^ INV_SUB_MIX_1[SBOX[(t >>> 16) & 0xff]] ^","\t                                               INV_SUB_MIX_2[SBOX[(t >>> 8) & 0xff]] ^ INV_SUB_MIX_3[SBOX[t & 0xff]];","\t                }","\t            }","\t        },","","\t        encryptBlock: function (M, offset) {","\t            this._doCryptBlock(M, offset, this._keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX);","\t        },","","\t        decryptBlock: function (M, offset) {","\t            // Swap 2nd and 4th rows","\t            var t = M[offset + 1];","\t            M[offset + 1] = M[offset + 3];","\t            M[offset + 3] = t;","","\t            this._doCryptBlock(M, offset, this._invKeySchedule, INV_SUB_MIX_0, INV_SUB_MIX_1, INV_SUB_MIX_2, INV_SUB_MIX_3, INV_SBOX);","","\t            // Inv swap 2nd and 4th rows","\t            var t = M[offset + 1];","\t            M[offset + 1] = M[offset + 3];","\t            M[offset + 3] = t;","\t        },","","\t        _doCryptBlock: function (M, offset, keySchedule, SUB_MIX_0, SUB_MIX_1, SUB_MIX_2, SUB_MIX_3, SBOX) {","\t            // Shortcut","\t            var nRounds = this._nRounds;","","\t            // Get input, add round key","\t            var s0 = M[offset]     ^ keySchedule[0];","\t            var s1 = M[offset + 1] ^ keySchedule[1];","\t            var s2 = M[offset + 2] ^ keySchedule[2];","\t            var s3 = M[offset + 3] ^ keySchedule[3];","","\t            // Key schedule row counter","\t            var ksRow = 4;","","\t            // Rounds","\t            for (var round = 1; round < nRounds; round++) {","\t                // Shift rows, sub bytes, mix columns, add round key","\t                var t0 = SUB_MIX_0[s0 >>> 24] ^ SUB_MIX_1[(s1 >>> 16) & 0xff] ^ SUB_MIX_2[(s2 >>> 8) & 0xff] ^ SUB_MIX_3[s3 & 0xff] ^ keySchedule[ksRow++];","\t                var t1 = SUB_MIX_0[s1 >>> 24] ^ SUB_MIX_1[(s2 >>> 16) & 0xff] ^ SUB_MIX_2[(s3 >>> 8) & 0xff] ^ SUB_MIX_3[s0 & 0xff] ^ keySchedule[ksRow++];","\t                var t2 = SUB_MIX_0[s2 >>> 24] ^ SUB_MIX_1[(s3 >>> 16) & 0xff] ^ SUB_MIX_2[(s0 >>> 8) & 0xff] ^ SUB_MIX_3[s1 & 0xff] ^ keySchedule[ksRow++];","\t                var t3 = SUB_MIX_0[s3 >>> 24] ^ SUB_MIX_1[(s0 >>> 16) & 0xff] ^ SUB_MIX_2[(s1 >>> 8) & 0xff] ^ SUB_MIX_3[s2 & 0xff] ^ keySchedule[ksRow++];","","\t                // Update state","\t                s0 = t0;","\t                s1 = t1;","\t                s2 = t2;","\t                s3 = t3;","\t            }","","\t            // Shift rows, sub bytes, add round key","\t            var t0 = ((SBOX[s0 >>> 24] << 24) | (SBOX[(s1 >>> 16) & 0xff] << 16) | (SBOX[(s2 >>> 8) & 0xff] << 8) | SBOX[s3 & 0xff]) ^ keySchedule[ksRow++];","\t            var t1 = ((SBOX[s1 >>> 24] << 24) | (SBOX[(s2 >>> 16) & 0xff] << 16) | (SBOX[(s3 >>> 8) & 0xff] << 8) | SBOX[s0 & 0xff]) ^ keySchedule[ksRow++];","\t            var t2 = ((SBOX[s2 >>> 24] << 24) | (SBOX[(s3 >>> 16) & 0xff] << 16) | (SBOX[(s0 >>> 8) & 0xff] << 8) | SBOX[s1 & 0xff]) ^ keySchedule[ksRow++];","\t            var t3 = ((SBOX[s3 >>> 24] << 24) | (SBOX[(s0 >>> 16) & 0xff] << 16) | (SBOX[(s1 >>> 8) & 0xff] << 8) | SBOX[s2 & 0xff]) ^ keySchedule[ksRow++];","","\t            // Set output","\t            M[offset]     = t0;","\t            M[offset + 1] = t1;","\t            M[offset + 2] = t2;","\t            M[offset + 3] = t3;","\t        },","","\t        keySize: 256/32","\t    });","","\t    /**","\t     * Shortcut functions to the cipher's object interface.","\t     *","\t     * @example","\t     *","\t     *     var ciphertext = CryptoJS.AES.encrypt(message, key, cfg);","\t     *     var plaintext  = CryptoJS.AES.decrypt(ciphertext, key, cfg);","\t     */","\t    C.AES = BlockCipher._createHelper(AES);","\t}());","","","\treturn CryptoJS.AES;","","}));","},{\"./cipher-core\":50,\"./core\":51,\"./enc-base64\":52,\"./evpkdf\":54,\"./md5\":59}],50:[function(require,module,exports){",";(function (root, factory) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t/**","\t * Cipher core components.","\t */","\tCryptoJS.lib.Cipher || (function (undefined) {","\t    // Shortcuts","\t    var C = CryptoJS;","\t    var C_lib = C.lib;","\t    var Base = C_lib.Base;","\t    var WordArray = C_lib.WordArray;","\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm;","\t    var C_enc = C.enc;","\t    var Utf8 = C_enc.Utf8;","\t    var Base64 = C_enc.Base64;","\t    var C_algo = C.algo;","\t    var EvpKDF = C_algo.EvpKDF;","","\t    /**","\t     * Abstract base cipher template.","\t     *","\t     * @property {number} keySize This cipher's key size. Default: 4 (128 bits)","\t     * @property {number} ivSize This cipher's IV size. Default: 4 (128 bits)","\t     * @property {number} _ENC_XFORM_MODE A constant representing encryption mode.","\t     * @property {number} _DEC_XFORM_MODE A constant representing decryption mode.","\t     */","\t    var Cipher = C_lib.Cipher = BufferedBlockAlgorithm.extend({","\t        /**","\t         * Configuration options.","\t         *","\t         * @property {WordArray} iv The IV to use for this operation.","\t         */","\t        cfg: Base.extend(),","","\t        /**","\t         * Creates this cipher in encryption mode.","\t         *","\t         * @param {WordArray} key The key.","\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.","\t         *","\t         * @return {Cipher} A cipher instance.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var cipher = CryptoJS.algo.AES.createEncryptor(keyWordArray, { iv: ivWordArray });","\t         */","\t        createEncryptor: function (key, cfg) {","\t            return this.create(this._ENC_XFORM_MODE, key, cfg);","\t        },","","\t        /**","\t         * Creates this cipher in decryption mode.","\t         *","\t         * @param {WordArray} key The key.","\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.","\t         *","\t         * @return {Cipher} A cipher instance.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var cipher = CryptoJS.algo.AES.createDecryptor(keyWordArray, { iv: ivWordArray });","\t         */","\t        createDecryptor: function (key, cfg) {","\t            return this.create(this._DEC_XFORM_MODE, key, cfg);","\t        },","","\t        /**","\t         * Initializes a newly created cipher.","\t         *","\t         * @param {number} xformMode Either the encryption or decryption transormation mode constant.","\t         * @param {WordArray} key The key.","\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.","\t         *","\t         * @example","\t         *","\t         *     var cipher = CryptoJS.algo.AES.create(CryptoJS.algo.AES._ENC_XFORM_MODE, keyWordArray, { iv: ivWordArray });","\t         */","\t        init: function (xformMode, key, cfg) {","\t            // Apply config defaults","\t            this.cfg = this.cfg.extend(cfg);","","\t            // Store transform mode and key","\t            this._xformMode = xformMode;","\t            this._key = key;","","\t            // Set initial values","\t            this.reset();","\t        },","","\t        /**","\t         * Resets this cipher to its initial state.","\t         *","\t         * @example","\t         *","\t         *     cipher.reset();","\t         */","\t        reset: function () {","\t            // Reset data buffer","\t            BufferedBlockAlgorithm.reset.call(this);","","\t            // Perform concrete-cipher logic","\t            this._doReset();","\t        },","","\t        /**","\t         * Adds data to be encrypted or decrypted.","\t         *","\t         * @param {WordArray|string} dataUpdate The data to encrypt or decrypt.","\t         *","\t         * @return {WordArray} The data after processing.","\t         *","\t         * @example","\t         *","\t         *     var encrypted = cipher.process('data');","\t         *     var encrypted = cipher.process(wordArray);","\t         */","\t        process: function (dataUpdate) {","\t            // Append","\t            this._append(dataUpdate);","","\t            // Process available blocks","\t            return this._process();","\t        },","","\t        /**","\t         * Finalizes the encryption or decryption process.","\t         * Note that the finalize operation is effectively a destructive, read-once operation.","\t         *","\t         * @param {WordArray|string} dataUpdate The final data to encrypt or decrypt.","\t         *","\t         * @return {WordArray} The data after final processing.","\t         *","\t         * @example","\t         *","\t         *     var encrypted = cipher.finalize();","\t         *     var encrypted = cipher.finalize('data');","\t         *     var encrypted = cipher.finalize(wordArray);","\t         */","\t        finalize: function (dataUpdate) {","\t            // Final data update","\t            if (dataUpdate) {","\t                this._append(dataUpdate);","\t            }","","\t            // Perform concrete-cipher logic","\t            var finalProcessedData = this._doFinalize();","","\t            return finalProcessedData;","\t        },","","\t        keySize: 128/32,","","\t        ivSize: 128/32,","","\t        _ENC_XFORM_MODE: 1,","","\t        _DEC_XFORM_MODE: 2,","","\t        /**","\t         * Creates shortcut functions to a cipher's object interface.","\t         *","\t         * @param {Cipher} cipher The cipher to create a helper for.","\t         *","\t         * @return {Object} An object with encrypt and decrypt shortcut functions.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var AES = CryptoJS.lib.Cipher._createHelper(CryptoJS.algo.AES);","\t         */","\t        _createHelper: (function () {","\t            function selectCipherStrategy(key) {","\t                if (typeof key == 'string') {","\t                    return PasswordBasedCipher;","\t                } else {","\t                    return SerializableCipher;","\t                }","\t            }","","\t            return function (cipher) {","\t                return {","\t                    encrypt: function (message, key, cfg) {","\t                        return selectCipherStrategy(key).encrypt(cipher, message, key, cfg);","\t                    },","","\t                    decrypt: function (ciphertext, key, cfg) {","\t                        return selectCipherStrategy(key).decrypt(cipher, ciphertext, key, cfg);","\t                    }","\t                };","\t            };","\t        }())","\t    });","","\t    /**","\t     * Abstract base stream cipher template.","\t     *","\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 1 (32 bits)","\t     */","\t    var StreamCipher = C_lib.StreamCipher = Cipher.extend({","\t        _doFinalize: function () {","\t            // Process partial blocks","\t            var finalProcessedBlocks = this._process(!!'flush');","","\t            return finalProcessedBlocks;","\t        },","","\t        blockSize: 1","\t    });","","\t    /**","\t     * Mode namespace.","\t     */","\t    var C_mode = C.mode = {};","","\t    /**","\t     * Abstract base block cipher mode template.","\t     */","\t    var BlockCipherMode = C_lib.BlockCipherMode = Base.extend({","\t        /**","\t         * Creates this mode for encryption.","\t         *","\t         * @param {Cipher} cipher A block cipher instance.","\t         * @param {Array} iv The IV words.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var mode = CryptoJS.mode.CBC.createEncryptor(cipher, iv.words);","\t         */","\t        createEncryptor: function (cipher, iv) {","\t            return this.Encryptor.create(cipher, iv);","\t        },","","\t        /**","\t         * Creates this mode for decryption.","\t         *","\t         * @param {Cipher} cipher A block cipher instance.","\t         * @param {Array} iv The IV words.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var mode = CryptoJS.mode.CBC.createDecryptor(cipher, iv.words);","\t         */","\t        createDecryptor: function (cipher, iv) {","\t            return this.Decryptor.create(cipher, iv);","\t        },","","\t        /**","\t         * Initializes a newly created mode.","\t         *","\t         * @param {Cipher} cipher A block cipher instance.","\t         * @param {Array} iv The IV words.","\t         *","\t         * @example","\t         *","\t         *     var mode = CryptoJS.mode.CBC.Encryptor.create(cipher, iv.words);","\t         */","\t        init: function (cipher, iv) {","\t            this._cipher = cipher;","\t            this._iv = iv;","\t        }","\t    });","","\t    /**","\t     * Cipher Block Chaining mode.","\t     */","\t    var CBC = C_mode.CBC = (function () {","\t        /**","\t         * Abstract base CBC mode.","\t         */","\t        var CBC = BlockCipherMode.extend();","","\t        /**","\t         * CBC encryptor.","\t         */","\t        CBC.Encryptor = CBC.extend({","\t            /**","\t             * Processes the data block at offset.","\t             *","\t             * @param {Array} words The data words to operate on.","\t             * @param {number} offset The offset where the block starts.","\t             *","\t             * @example","\t             *","\t             *     mode.processBlock(data.words, offset);","\t             */","\t            processBlock: function (words, offset) {","\t                // Shortcuts","\t                var cipher = this._cipher;","\t                var blockSize = cipher.blockSize;","","\t                // XOR and encrypt","\t                xorBlock.call(this, words, offset, blockSize);","\t                cipher.encryptBlock(words, offset);","","\t                // Remember this block to use with next block","\t                this._prevBlock = words.slice(offset, offset + blockSize);","\t            }","\t        });","","\t        /**","\t         * CBC decryptor.","\t         */","\t        CBC.Decryptor = CBC.extend({","\t            /**","\t             * Processes the data block at offset.","\t             *","\t             * @param {Array} words The data words to operate on.","\t             * @param {number} offset The offset where the block starts.","\t             *","\t             * @example","\t             *","\t             *     mode.processBlock(data.words, offset);","\t             */","\t            processBlock: function (words, offset) {","\t                // Shortcuts","\t                var cipher = this._cipher;","\t                var blockSize = cipher.blockSize;","","\t                // Remember this block to use with next block","\t                var thisBlock = words.slice(offset, offset + blockSize);","","\t                // Decrypt and XOR","\t                cipher.decryptBlock(words, offset);","\t                xorBlock.call(this, words, offset, blockSize);","","\t                // This block becomes the previous block","\t                this._prevBlock = thisBlock;","\t            }","\t        });","","\t        function xorBlock(words, offset, blockSize) {","\t            // Shortcut","\t            var iv = this._iv;","","\t            // Choose mixing block","\t            if (iv) {","\t                var block = iv;","","\t                // Remove IV for subsequent blocks","\t                this._iv = undefined;","\t            } else {","\t                var block = this._prevBlock;","\t            }","","\t            // XOR blocks","\t            for (var i = 0; i < blockSize; i++) {","\t                words[offset + i] ^= block[i];","\t            }","\t        }","","\t        return CBC;","\t    }());","","\t    /**","\t     * Padding namespace.","\t     */","\t    var C_pad = C.pad = {};","","\t    /**","\t     * PKCS #5/7 padding strategy.","\t     */","\t    var Pkcs7 = C_pad.Pkcs7 = {","\t        /**","\t         * Pads data using the algorithm defined in PKCS #5/7.","\t         *","\t         * @param {WordArray} data The data to pad.","\t         * @param {number} blockSize The multiple that the data should be padded to.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     CryptoJS.pad.Pkcs7.pad(wordArray, 4);","\t         */","\t        pad: function (data, blockSize) {","\t            // Shortcut","\t            var blockSizeBytes = blockSize * 4;","","\t            // Count padding bytes","\t            var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;","","\t            // Create padding word","\t            var paddingWord = (nPaddingBytes << 24) | (nPaddingBytes << 16) | (nPaddingBytes << 8) | nPaddingBytes;","","\t            // Create padding","\t            var paddingWords = [];","\t            for (var i = 0; i < nPaddingBytes; i += 4) {","\t                paddingWords.push(paddingWord);","\t            }","\t            var padding = WordArray.create(paddingWords, nPaddingBytes);","","\t            // Add padding","\t            data.concat(padding);","\t        },","","\t        /**","\t         * Unpads data that had been padded using the algorithm defined in PKCS #5/7.","\t         *","\t         * @param {WordArray} data The data to unpad.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     CryptoJS.pad.Pkcs7.unpad(wordArray);","\t         */","\t        unpad: function (data) {","\t            // Get number of padding bytes from last byte","\t            var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;","","\t            // Remove padding","\t            data.sigBytes -= nPaddingBytes;","\t        }","\t    };","","\t    /**","\t     * Abstract base block cipher template.","\t     *","\t     * @property {number} blockSize The number of 32-bit words this cipher operates on. Default: 4 (128 bits)","\t     */","\t    var BlockCipher = C_lib.BlockCipher = Cipher.extend({","\t        /**","\t         * Configuration options.","\t         *","\t         * @property {Mode} mode The block mode to use. Default: CBC","\t         * @property {Padding} padding The padding strategy to use. Default: Pkcs7","\t         */","\t        cfg: Cipher.cfg.extend({","\t            mode: CBC,","\t            padding: Pkcs7","\t        }),","","\t        reset: function () {","\t            // Reset cipher","\t            Cipher.reset.call(this);","","\t            // Shortcuts","\t            var cfg = this.cfg;","\t            var iv = cfg.iv;","\t            var mode = cfg.mode;","","\t            // Reset block mode","\t            if (this._xformMode == this._ENC_XFORM_MODE) {","\t                var modeCreator = mode.createEncryptor;","\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {","\t                var modeCreator = mode.createDecryptor;","","\t                // Keep at least one block in the buffer for unpadding","\t                this._minBufferSize = 1;","\t            }","\t            this._mode = modeCreator.call(mode, this, iv && iv.words);","\t        },","","\t        _doProcessBlock: function (words, offset) {","\t            this._mode.processBlock(words, offset);","\t        },","","\t        _doFinalize: function () {","\t            // Shortcut","\t            var padding = this.cfg.padding;","","\t            // Finalize","\t            if (this._xformMode == this._ENC_XFORM_MODE) {","\t                // Pad data","\t                padding.pad(this._data, this.blockSize);","","\t                // Process final blocks","\t                var finalProcessedBlocks = this._process(!!'flush');","\t            } else /* if (this._xformMode == this._DEC_XFORM_MODE) */ {","\t                // Process final blocks","\t                var finalProcessedBlocks = this._process(!!'flush');","","\t                // Unpad data","\t                padding.unpad(finalProcessedBlocks);","\t            }","","\t            return finalProcessedBlocks;","\t        },","","\t        blockSize: 128/32","\t    });","","\t    /**","\t     * A collection of cipher parameters.","\t     *","\t     * @property {WordArray} ciphertext The raw ciphertext.","\t     * @property {WordArray} key The key to this ciphertext.","\t     * @property {WordArray} iv The IV used in the ciphering operation.","\t     * @property {WordArray} salt The salt used with a key derivation function.","\t     * @property {Cipher} algorithm The cipher algorithm.","\t     * @property {Mode} mode The block mode used in the ciphering operation.","\t     * @property {Padding} padding The padding scheme used in the ciphering operation.","\t     * @property {number} blockSize The block size of the cipher.","\t     * @property {Format} formatter The default formatting strategy to convert this cipher params object to a string.","\t     */","\t    var CipherParams = C_lib.CipherParams = Base.extend({","\t        /**","\t         * Initializes a newly created cipher params object.","\t         *","\t         * @param {Object} cipherParams An object with any of the possible cipher parameters.","\t         *","\t         * @example","\t         *","\t         *     var cipherParams = CryptoJS.lib.CipherParams.create({","\t         *         ciphertext: ciphertextWordArray,","\t         *         key: keyWordArray,","\t         *         iv: ivWordArray,","\t         *         salt: saltWordArray,","\t         *         algorithm: CryptoJS.algo.AES,","\t         *         mode: CryptoJS.mode.CBC,","\t         *         padding: CryptoJS.pad.PKCS7,","\t         *         blockSize: 4,","\t         *         formatter: CryptoJS.format.OpenSSL","\t         *     });","\t         */","\t        init: function (cipherParams) {","\t            this.mixIn(cipherParams);","\t        },","","\t        /**","\t         * Converts this cipher params object to a string.","\t         *","\t         * @param {Format} formatter (Optional) The formatting strategy to use.","\t         *","\t         * @return {string} The stringified cipher params.","\t         *","\t         * @throws Error If neither the formatter nor the default formatter is set.","\t         *","\t         * @example","\t         *","\t         *     var string = cipherParams + '';","\t         *     var string = cipherParams.toString();","\t         *     var string = cipherParams.toString(CryptoJS.format.OpenSSL);","\t         */","\t        toString: function (formatter) {","\t            return (formatter || this.formatter).stringify(this);","\t        }","\t    });","","\t    /**","\t     * Format namespace.","\t     */","\t    var C_format = C.format = {};","","\t    /**","\t     * OpenSSL formatting strategy.","\t     */","\t    var OpenSSLFormatter = C_format.OpenSSL = {","\t        /**","\t         * Converts a cipher params object to an OpenSSL-compatible string.","\t         *","\t         * @param {CipherParams} cipherParams The cipher params object.","\t         *","\t         * @return {string} The OpenSSL-compatible string.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var openSSLString = CryptoJS.format.OpenSSL.stringify(cipherParams);","\t         */","\t        stringify: function (cipherParams) {","\t            // Shortcuts","\t            var ciphertext = cipherParams.ciphertext;","\t            var salt = cipherParams.salt;","","\t            // Format","\t            if (salt) {","\t                var wordArray = WordArray.create([0x53616c74, 0x65645f5f]).concat(salt).concat(ciphertext);","\t            } else {","\t                var wordArray = ciphertext;","\t            }","","\t            return wordArray.toString(Base64);","\t        },","","\t        /**","\t         * Converts an OpenSSL-compatible string to a cipher params object.","\t         *","\t         * @param {string} openSSLStr The OpenSSL-compatible string.","\t         *","\t         * @return {CipherParams} The cipher params object.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var cipherParams = CryptoJS.format.OpenSSL.parse(openSSLString);","\t         */","\t        parse: function (openSSLStr) {","\t            // Parse base64","\t            var ciphertext = Base64.parse(openSSLStr);","","\t            // Shortcut","\t            var ciphertextWords = ciphertext.words;","","\t            // Test for salt","\t            if (ciphertextWords[0] == 0x53616c74 && ciphertextWords[1] == 0x65645f5f) {","\t                // Extract salt","\t                var salt = WordArray.create(ciphertextWords.slice(2, 4));","","\t                // Remove salt from ciphertext","\t                ciphertextWords.splice(0, 4);","\t                ciphertext.sigBytes -= 16;","\t            }","","\t            return CipherParams.create({ ciphertext: ciphertext, salt: salt });","\t        }","\t    };","","\t    /**","\t     * A cipher wrapper that returns ciphertext as a serializable cipher params object.","\t     */","\t    var SerializableCipher = C_lib.SerializableCipher = Base.extend({","\t        /**","\t         * Configuration options.","\t         *","\t         * @property {Formatter} format The formatting strategy to convert cipher param objects to and from a string. Default: OpenSSL","\t         */","\t        cfg: Base.extend({","\t            format: OpenSSLFormatter","\t        }),","","\t        /**","\t         * Encrypts a message.","\t         *","\t         * @param {Cipher} cipher The cipher algorithm to use.","\t         * @param {WordArray|string} message The message to encrypt.","\t         * @param {WordArray} key The key.","\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.","\t         *","\t         * @return {CipherParams} A cipher params object.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key);","\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv });","\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher.encrypt(CryptoJS.algo.AES, message, key, { iv: iv, format: CryptoJS.format.OpenSSL });","\t         */","\t        encrypt: function (cipher, message, key, cfg) {","\t            // Apply config defaults","\t            cfg = this.cfg.extend(cfg);","","\t            // Encrypt","\t            var encryptor = cipher.createEncryptor(key, cfg);","\t            var ciphertext = encryptor.finalize(message);","","\t            // Shortcut","\t            var cipherCfg = encryptor.cfg;","","\t            // Create and return serializable cipher params","\t            return CipherParams.create({","\t                ciphertext: ciphertext,","\t                key: key,","\t                iv: cipherCfg.iv,","\t                algorithm: cipher,","\t                mode: cipherCfg.mode,","\t                padding: cipherCfg.padding,","\t                blockSize: cipher.blockSize,","\t                formatter: cfg.format","\t            });","\t        },","","\t        /**","\t         * Decrypts serialized ciphertext.","\t         *","\t         * @param {Cipher} cipher The cipher algorithm to use.","\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.","\t         * @param {WordArray} key The key.","\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.","\t         *","\t         * @return {WordArray} The plaintext.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, key, { iv: iv, format: CryptoJS.format.OpenSSL });","\t         *     var plaintext = CryptoJS.lib.SerializableCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, key, { iv: iv, format: CryptoJS.format.OpenSSL });","\t         */","\t        decrypt: function (cipher, ciphertext, key, cfg) {","\t            // Apply config defaults","\t            cfg = this.cfg.extend(cfg);","","\t            // Convert string to CipherParams","\t            ciphertext = this._parse(ciphertext, cfg.format);","","\t            // Decrypt","\t            var plaintext = cipher.createDecryptor(key, cfg).finalize(ciphertext.ciphertext);","","\t            return plaintext;","\t        },","","\t        /**","\t         * Converts serialized ciphertext to CipherParams,","\t         * else assumed CipherParams already and returns ciphertext unchanged.","\t         *","\t         * @param {CipherParams|string} ciphertext The ciphertext.","\t         * @param {Formatter} format The formatting strategy to use to parse serialized ciphertext.","\t         *","\t         * @return {CipherParams} The unserialized ciphertext.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var ciphertextParams = CryptoJS.lib.SerializableCipher._parse(ciphertextStringOrParams, format);","\t         */","\t        _parse: function (ciphertext, format) {","\t            if (typeof ciphertext == 'string') {","\t                return format.parse(ciphertext, this);","\t            } else {","\t                return ciphertext;","\t            }","\t        }","\t    });","","\t    /**","\t     * Key derivation function namespace.","\t     */","\t    var C_kdf = C.kdf = {};","","\t    /**","\t     * OpenSSL key derivation function.","\t     */","\t    var OpenSSLKdf = C_kdf.OpenSSL = {","\t        /**","\t         * Derives a key and IV from a password.","\t         *","\t         * @param {string} password The password to derive from.","\t         * @param {number} keySize The size in words of the key to generate.","\t         * @param {number} ivSize The size in words of the IV to generate.","\t         * @param {WordArray|string} salt (Optional) A 64-bit salt to use. If omitted, a salt will be generated randomly.","\t         *","\t         * @return {CipherParams} A cipher params object with the key, IV, and salt.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32);","\t         *     var derivedParams = CryptoJS.kdf.OpenSSL.execute('Password', 256/32, 128/32, 'saltsalt');","\t         */","\t        execute: function (password, keySize, ivSize, salt) {","\t            // Generate random salt","\t            if (!salt) {","\t                salt = WordArray.random(64/8);","\t            }","","\t            // Derive key and IV","\t            var key = EvpKDF.create({ keySize: keySize + ivSize }).compute(password, salt);","","\t            // Separate key and IV","\t            var iv = WordArray.create(key.words.slice(keySize), ivSize * 4);","\t            key.sigBytes = keySize * 4;","","\t            // Return params","\t            return CipherParams.create({ key: key, iv: iv, salt: salt });","\t        }","\t    };","","\t    /**","\t     * A serializable cipher wrapper that derives the key from a password,","\t     * and returns ciphertext as a serializable cipher params object.","\t     */","\t    var PasswordBasedCipher = C_lib.PasswordBasedCipher = SerializableCipher.extend({","\t        /**","\t         * Configuration options.","\t         *","\t         * @property {KDF} kdf The key derivation function to use to generate a key and IV from a password. Default: OpenSSL","\t         */","\t        cfg: SerializableCipher.cfg.extend({","\t            kdf: OpenSSLKdf","\t        }),","","\t        /**","\t         * Encrypts a message using a password.","\t         *","\t         * @param {Cipher} cipher The cipher algorithm to use.","\t         * @param {WordArray|string} message The message to encrypt.","\t         * @param {string} password The password.","\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.","\t         *","\t         * @return {CipherParams} A cipher params object.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password');","\t         *     var ciphertextParams = CryptoJS.lib.PasswordBasedCipher.encrypt(CryptoJS.algo.AES, message, 'password', { format: CryptoJS.format.OpenSSL });","\t         */","\t        encrypt: function (cipher, message, password, cfg) {","\t            // Apply config defaults","\t            cfg = this.cfg.extend(cfg);","","\t            // Derive key and other params","\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize);","","\t            // Add IV to config","\t            cfg.iv = derivedParams.iv;","","\t            // Encrypt","\t            var ciphertext = SerializableCipher.encrypt.call(this, cipher, message, derivedParams.key, cfg);","","\t            // Mix in derived params","\t            ciphertext.mixIn(derivedParams);","","\t            return ciphertext;","\t        },","","\t        /**","\t         * Decrypts serialized ciphertext using a password.","\t         *","\t         * @param {Cipher} cipher The cipher algorithm to use.","\t         * @param {CipherParams|string} ciphertext The ciphertext to decrypt.","\t         * @param {string} password The password.","\t         * @param {Object} cfg (Optional) The configuration options to use for this operation.","\t         *","\t         * @return {WordArray} The plaintext.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, formattedCiphertext, 'password', { format: CryptoJS.format.OpenSSL });","\t         *     var plaintext = CryptoJS.lib.PasswordBasedCipher.decrypt(CryptoJS.algo.AES, ciphertextParams, 'password', { format: CryptoJS.format.OpenSSL });","\t         */","\t        decrypt: function (cipher, ciphertext, password, cfg) {","\t            // Apply config defaults","\t            cfg = this.cfg.extend(cfg);","","\t            // Convert string to CipherParams","\t            ciphertext = this._parse(ciphertext, cfg.format);","","\t            // Derive key and other params","\t            var derivedParams = cfg.kdf.execute(password, cipher.keySize, cipher.ivSize, ciphertext.salt);","","\t            // Add IV to config","\t            cfg.iv = derivedParams.iv;","","\t            // Decrypt","\t            var plaintext = SerializableCipher.decrypt.call(this, cipher, ciphertext, derivedParams.key, cfg);","","\t            return plaintext;","\t        }","\t    });","\t}());","","","}));","},{\"./core\":51}],51:[function(require,module,exports){",";(function (root, factory) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory();","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([], factory);","\t}","\telse {","\t\t// Global (browser)","\t\troot.CryptoJS = factory();","\t}","}(this, function () {","","\t/**","\t * CryptoJS core components.","\t */","\tvar CryptoJS = CryptoJS || (function (Math, undefined) {","\t    /**","\t     * CryptoJS namespace.","\t     */","\t    var C = {};","","\t    /**","\t     * Library namespace.","\t     */","\t    var C_lib = C.lib = {};","","\t    /**","\t     * Base object for prototypal inheritance.","\t     */","\t    var Base = C_lib.Base = (function () {","\t        function F() {}","","\t        return {","\t            /**","\t             * Creates a new object that inherits from this object.","\t             *","\t             * @param {Object} overrides Properties to copy into the new object.","\t             *","\t             * @return {Object} The new object.","\t             *","\t             * @static","\t             *","\t             * @example","\t             *","\t             *     var MyType = CryptoJS.lib.Base.extend({","\t             *         field: 'value',","\t             *","\t             *         method: function () {","\t             *         }","\t             *     });","\t             */","\t            extend: function (overrides) {","\t                // Spawn","\t                F.prototype = this;","\t                var subtype = new F();","","\t                // Augment","\t                if (overrides) {","\t                    subtype.mixIn(overrides);","\t                }","","\t                // Create default initializer","\t                if (!subtype.hasOwnProperty('init')) {","\t                    subtype.init = function () {","\t                        subtype.$super.init.apply(this, arguments);","\t                    };","\t                }","","\t                // Initializer's prototype is the subtype object","\t                subtype.init.prototype = subtype;","","\t                // Reference supertype","\t                subtype.$super = this;","","\t                return subtype;","\t            },","","\t            /**","\t             * Extends this object and runs the init method.","\t             * Arguments to create() will be passed to init().","\t             *","\t             * @return {Object} The new object.","\t             *","\t             * @static","\t             *","\t             * @example","\t             *","\t             *     var instance = MyType.create();","\t             */","\t            create: function () {","\t                var instance = this.extend();","\t                instance.init.apply(instance, arguments);","","\t                return instance;","\t            },","","\t            /**","\t             * Initializes a newly created object.","\t             * Override this method to add some logic when your objects are created.","\t             *","\t             * @example","\t             *","\t             *     var MyType = CryptoJS.lib.Base.extend({","\t             *         init: function () {","\t             *             // ...","\t             *         }","\t             *     });","\t             */","\t            init: function () {","\t            },","","\t            /**","\t             * Copies properties into this object.","\t             *","\t             * @param {Object} properties The properties to mix in.","\t             *","\t             * @example","\t             *","\t             *     MyType.mixIn({","\t             *         field: 'value'","\t             *     });","\t             */","\t            mixIn: function (properties) {","\t                for (var propertyName in properties) {","\t                    if (properties.hasOwnProperty(propertyName)) {","\t                        this[propertyName] = properties[propertyName];","\t                    }","\t                }","","\t                // IE won't copy toString using the loop above","\t                if (properties.hasOwnProperty('toString')) {","\t                    this.toString = properties.toString;","\t                }","\t            },","","\t            /**","\t             * Creates a copy of this object.","\t             *","\t             * @return {Object} The clone.","\t             *","\t             * @example","\t             *","\t             *     var clone = instance.clone();","\t             */","\t            clone: function () {","\t                return this.init.prototype.extend(this);","\t            }","\t        };","\t    }());","","\t    /**","\t     * An array of 32-bit words.","\t     *","\t     * @property {Array} words The array of 32-bit words.","\t     * @property {number} sigBytes The number of significant bytes in this word array.","\t     */","\t    var WordArray = C_lib.WordArray = Base.extend({","\t        /**","\t         * Initializes a newly created word array.","\t         *","\t         * @param {Array} words (Optional) An array of 32-bit words.","\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.","\t         *","\t         * @example","\t         *","\t         *     var wordArray = CryptoJS.lib.WordArray.create();","\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607]);","\t         *     var wordArray = CryptoJS.lib.WordArray.create([0x00010203, 0x04050607], 6);","\t         */","\t        init: function (words, sigBytes) {","\t            words = this.words = words || [];","","\t            if (sigBytes != undefined) {","\t                this.sigBytes = sigBytes;","\t            } else {","\t                this.sigBytes = words.length * 4;","\t            }","\t        },","","\t        /**","\t         * Converts this word array to a string.","\t         *","\t         * @param {Encoder} encoder (Optional) The encoding strategy to use. Default: CryptoJS.enc.Hex","\t         *","\t         * @return {string} The stringified word array.","\t         *","\t         * @example","\t         *","\t         *     var string = wordArray + '';","\t         *     var string = wordArray.toString();","\t         *     var string = wordArray.toString(CryptoJS.enc.Utf8);","\t         */","\t        toString: function (encoder) {","\t            return (encoder || Hex).stringify(this);","\t        },","","\t        /**","\t         * Concatenates a word array to this word array.","\t         *","\t         * @param {WordArray} wordArray The word array to append.","\t         *","\t         * @return {WordArray} This word array.","\t         *","\t         * @example","\t         *","\t         *     wordArray1.concat(wordArray2);","\t         */","\t        concat: function (wordArray) {","\t            // Shortcuts","\t            var thisWords = this.words;","\t            var thatWords = wordArray.words;","\t            var thisSigBytes = this.sigBytes;","\t            var thatSigBytes = wordArray.sigBytes;","","\t            // Clamp excess bits","\t            this.clamp();","","\t            // Concat","\t            if (thisSigBytes % 4) {","\t                // Copy one byte at a time","\t                for (var i = 0; i < thatSigBytes; i++) {","\t                    var thatByte = (thatWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;","\t                    thisWords[(thisSigBytes + i) >>> 2] |= thatByte << (24 - ((thisSigBytes + i) % 4) * 8);","\t                }","\t            } else {","\t                // Copy one word at a time","\t                for (var i = 0; i < thatSigBytes; i += 4) {","\t                    thisWords[(thisSigBytes + i) >>> 2] = thatWords[i >>> 2];","\t                }","\t            }","\t            this.sigBytes += thatSigBytes;","","\t            // Chainable","\t            return this;","\t        },","","\t        /**","\t         * Removes insignificant bits.","\t         *","\t         * @example","\t         *","\t         *     wordArray.clamp();","\t         */","\t        clamp: function () {","\t            // Shortcuts","\t            var words = this.words;","\t            var sigBytes = this.sigBytes;","","\t            // Clamp","\t            words[sigBytes >>> 2] &= 0xffffffff << (32 - (sigBytes % 4) * 8);","\t            words.length = Math.ceil(sigBytes / 4);","\t        },","","\t        /**","\t         * Creates a copy of this word array.","\t         *","\t         * @return {WordArray} The clone.","\t         *","\t         * @example","\t         *","\t         *     var clone = wordArray.clone();","\t         */","\t        clone: function () {","\t            var clone = Base.clone.call(this);","\t            clone.words = this.words.slice(0);","","\t            return clone;","\t        },","","\t        /**","\t         * Creates a word array filled with random bytes.","\t         *","\t         * @param {number} nBytes The number of random bytes to generate.","\t         *","\t         * @return {WordArray} The random word array.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var wordArray = CryptoJS.lib.WordArray.random(16);","\t         */","\t        random: function (nBytes) {","\t            var words = [];","","\t            var r = (function (m_w) {","\t                var m_w = m_w;","\t                var m_z = 0x3ade68b1;","\t                var mask = 0xffffffff;","","\t                return function () {","\t                    m_z = (0x9069 * (m_z & 0xFFFF) + (m_z >> 0x10)) & mask;","\t                    m_w = (0x4650 * (m_w & 0xFFFF) + (m_w >> 0x10)) & mask;","\t                    var result = ((m_z << 0x10) + m_w) & mask;","\t                    result /= 0x100000000;","\t                    result += 0.5;","\t                    return result * (Math.random() > .5 ? 1 : -1);","\t                }","\t            });","","\t            for (var i = 0, rcache; i < nBytes; i += 4) {","\t                var _r = r((rcache || Math.random()) * 0x100000000);","","\t                rcache = _r() * 0x3ade67b7;","\t                words.push((_r() * 0x100000000) | 0);","\t            }","","\t            return new WordArray.init(words, nBytes);","\t        }","\t    });","","\t    /**","\t     * Encoder namespace.","\t     */","\t    var C_enc = C.enc = {};","","\t    /**","\t     * Hex encoding strategy.","\t     */","\t    var Hex = C_enc.Hex = {","\t        /**","\t         * Converts a word array to a hex string.","\t         *","\t         * @param {WordArray} wordArray The word array.","\t         *","\t         * @return {string} The hex string.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var hexString = CryptoJS.enc.Hex.stringify(wordArray);","\t         */","\t        stringify: function (wordArray) {","\t            // Shortcuts","\t            var words = wordArray.words;","\t            var sigBytes = wordArray.sigBytes;","","\t            // Convert","\t            var hexChars = [];","\t            for (var i = 0; i < sigBytes; i++) {","\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;","\t                hexChars.push((bite >>> 4).toString(16));","\t                hexChars.push((bite & 0x0f).toString(16));","\t            }","","\t            return hexChars.join('');","\t        },","","\t        /**","\t         * Converts a hex string to a word array.","\t         *","\t         * @param {string} hexStr The hex string.","\t         *","\t         * @return {WordArray} The word array.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var wordArray = CryptoJS.enc.Hex.parse(hexString);","\t         */","\t        parse: function (hexStr) {","\t            // Shortcut","\t            var hexStrLength = hexStr.length;","","\t            // Convert","\t            var words = [];","\t            for (var i = 0; i < hexStrLength; i += 2) {","\t                words[i >>> 3] |= parseInt(hexStr.substr(i, 2), 16) << (24 - (i % 8) * 4);","\t            }","","\t            return new WordArray.init(words, hexStrLength / 2);","\t        }","\t    };","","\t    /**","\t     * Latin1 encoding strategy.","\t     */","\t    var Latin1 = C_enc.Latin1 = {","\t        /**","\t         * Converts a word array to a Latin1 string.","\t         *","\t         * @param {WordArray} wordArray The word array.","\t         *","\t         * @return {string} The Latin1 string.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var latin1String = CryptoJS.enc.Latin1.stringify(wordArray);","\t         */","\t        stringify: function (wordArray) {","\t            // Shortcuts","\t            var words = wordArray.words;","\t            var sigBytes = wordArray.sigBytes;","","\t            // Convert","\t            var latin1Chars = [];","\t            for (var i = 0; i < sigBytes; i++) {","\t                var bite = (words[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff;","\t                latin1Chars.push(String.fromCharCode(bite));","\t            }","","\t            return latin1Chars.join('');","\t        },","","\t        /**","\t         * Converts a Latin1 string to a word array.","\t         *","\t         * @param {string} latin1Str The Latin1 string.","\t         *","\t         * @return {WordArray} The word array.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var wordArray = CryptoJS.enc.Latin1.parse(latin1String);","\t         */","\t        parse: function (latin1Str) {","\t            // Shortcut","\t            var latin1StrLength = latin1Str.length;","","\t            // Convert","\t            var words = [];","\t            for (var i = 0; i < latin1StrLength; i++) {","\t                words[i >>> 2] |= (latin1Str.charCodeAt(i) & 0xff) << (24 - (i % 4) * 8);","\t            }","","\t            return new WordArray.init(words, latin1StrLength);","\t        }","\t    };","","\t    /**","\t     * UTF-8 encoding strategy.","\t     */","\t    var Utf8 = C_enc.Utf8 = {","\t        /**","\t         * Converts a word array to a UTF-8 string.","\t         *","\t         * @param {WordArray} wordArray The word array.","\t         *","\t         * @return {string} The UTF-8 string.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var utf8String = CryptoJS.enc.Utf8.stringify(wordArray);","\t         */","\t        stringify: function (wordArray) {","\t            try {","\t                return decodeURIComponent(escape(Latin1.stringify(wordArray)));","\t            } catch (e) {","\t                throw new Error('Malformed UTF-8 data');","\t            }","\t        },","","\t        /**","\t         * Converts a UTF-8 string to a word array.","\t         *","\t         * @param {string} utf8Str The UTF-8 string.","\t         *","\t         * @return {WordArray} The word array.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var wordArray = CryptoJS.enc.Utf8.parse(utf8String);","\t         */","\t        parse: function (utf8Str) {","\t            return Latin1.parse(unescape(encodeURIComponent(utf8Str)));","\t        }","\t    };","","\t    /**","\t     * Abstract buffered block algorithm template.","\t     *","\t     * The property blockSize must be implemented in a concrete subtype.","\t     *","\t     * @property {number} _minBufferSize The number of blocks that should be kept unprocessed in the buffer. Default: 0","\t     */","\t    var BufferedBlockAlgorithm = C_lib.BufferedBlockAlgorithm = Base.extend({","\t        /**","\t         * Resets this block algorithm's data buffer to its initial state.","\t         *","\t         * @example","\t         *","\t         *     bufferedBlockAlgorithm.reset();","\t         */","\t        reset: function () {","\t            // Initial values","\t            this._data = new WordArray.init();","\t            this._nDataBytes = 0;","\t        },","","\t        /**","\t         * Adds new data to this block algorithm's buffer.","\t         *","\t         * @param {WordArray|string} data The data to append. Strings are converted to a WordArray using UTF-8.","\t         *","\t         * @example","\t         *","\t         *     bufferedBlockAlgorithm._append('data');","\t         *     bufferedBlockAlgorithm._append(wordArray);","\t         */","\t        _append: function (data) {","\t            // Convert string to WordArray, else assume WordArray already","\t            if (typeof data == 'string') {","\t                data = Utf8.parse(data);","\t            }","","\t            // Append","\t            this._data.concat(data);","\t            this._nDataBytes += data.sigBytes;","\t        },","","\t        /**","\t         * Processes available data blocks.","\t         *","\t         * This method invokes _doProcessBlock(offset), which must be implemented by a concrete subtype.","\t         *","\t         * @param {boolean} doFlush Whether all blocks and partial blocks should be processed.","\t         *","\t         * @return {WordArray} The processed data.","\t         *","\t         * @example","\t         *","\t         *     var processedData = bufferedBlockAlgorithm._process();","\t         *     var processedData = bufferedBlockAlgorithm._process(!!'flush');","\t         */","\t        _process: function (doFlush) {","\t            // Shortcuts","\t            var data = this._data;","\t            var dataWords = data.words;","\t            var dataSigBytes = data.sigBytes;","\t            var blockSize = this.blockSize;","\t            var blockSizeBytes = blockSize * 4;","","\t            // Count blocks ready","\t            var nBlocksReady = dataSigBytes / blockSizeBytes;","\t            if (doFlush) {","\t                // Round up to include partial blocks","\t                nBlocksReady = Math.ceil(nBlocksReady);","\t            } else {","\t                // Round down to include only full blocks,","\t                // less the number of blocks that must remain in the buffer","\t                nBlocksReady = Math.max((nBlocksReady | 0) - this._minBufferSize, 0);","\t            }","","\t            // Count words ready","\t            var nWordsReady = nBlocksReady * blockSize;","","\t            // Count bytes ready","\t            var nBytesReady = Math.min(nWordsReady * 4, dataSigBytes);","","\t            // Process blocks","\t            if (nWordsReady) {","\t                for (var offset = 0; offset < nWordsReady; offset += blockSize) {","\t                    // Perform concrete-algorithm logic","\t                    this._doProcessBlock(dataWords, offset);","\t                }","","\t                // Remove processed words","\t                var processedWords = dataWords.splice(0, nWordsReady);","\t                data.sigBytes -= nBytesReady;","\t            }","","\t            // Return processed words","\t            return new WordArray.init(processedWords, nBytesReady);","\t        },","","\t        /**","\t         * Creates a copy of this object.","\t         *","\t         * @return {Object} The clone.","\t         *","\t         * @example","\t         *","\t         *     var clone = bufferedBlockAlgorithm.clone();","\t         */","\t        clone: function () {","\t            var clone = Base.clone.call(this);","\t            clone._data = this._data.clone();","","\t            return clone;","\t        },","","\t        _minBufferSize: 0","\t    });","","\t    /**","\t     * Abstract hasher template.","\t     *","\t     * @property {number} blockSize The number of 32-bit words this hasher operates on. Default: 16 (512 bits)","\t     */","\t    var Hasher = C_lib.Hasher = BufferedBlockAlgorithm.extend({","\t        /**","\t         * Configuration options.","\t         */","\t        cfg: Base.extend(),","","\t        /**","\t         * Initializes a newly created hasher.","\t         *","\t         * @param {Object} cfg (Optional) The configuration options to use for this hash computation.","\t         *","\t         * @example","\t         *","\t         *     var hasher = CryptoJS.algo.SHA256.create();","\t         */","\t        init: function (cfg) {","\t            // Apply config defaults","\t            this.cfg = this.cfg.extend(cfg);","","\t            // Set initial values","\t            this.reset();","\t        },","","\t        /**","\t         * Resets this hasher to its initial state.","\t         *","\t         * @example","\t         *","\t         *     hasher.reset();","\t         */","\t        reset: function () {","\t            // Reset data buffer","\t            BufferedBlockAlgorithm.reset.call(this);","","\t            // Perform concrete-hasher logic","\t            this._doReset();","\t        },","","\t        /**","\t         * Updates this hasher with a message.","\t         *","\t         * @param {WordArray|string} messageUpdate The message to append.","\t         *","\t         * @return {Hasher} This hasher.","\t         *","\t         * @example","\t         *","\t         *     hasher.update('message');","\t         *     hasher.update(wordArray);","\t         */","\t        update: function (messageUpdate) {","\t            // Append","\t            this._append(messageUpdate);","","\t            // Update the hash","\t            this._process();","","\t            // Chainable","\t            return this;","\t        },","","\t        /**","\t         * Finalizes the hash computation.","\t         * Note that the finalize operation is effectively a destructive, read-once operation.","\t         *","\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.","\t         *","\t         * @return {WordArray} The hash.","\t         *","\t         * @example","\t         *","\t         *     var hash = hasher.finalize();","\t         *     var hash = hasher.finalize('message');","\t         *     var hash = hasher.finalize(wordArray);","\t         */","\t        finalize: function (messageUpdate) {","\t            // Final message update","\t            if (messageUpdate) {","\t                this._append(messageUpdate);","\t            }","","\t            // Perform concrete-hasher logic","\t            var hash = this._doFinalize();","","\t            return hash;","\t        },","","\t        blockSize: 512/32,","","\t        /**","\t         * Creates a shortcut function to a hasher's object interface.","\t         *","\t         * @param {Hasher} hasher The hasher to create a helper for.","\t         *","\t         * @return {Function} The shortcut function.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var SHA256 = CryptoJS.lib.Hasher._createHelper(CryptoJS.algo.SHA256);","\t         */","\t        _createHelper: function (hasher) {","\t            return function (message, cfg) {","\t                return new hasher.init(cfg).finalize(message);","\t            };","\t        },","","\t        /**","\t         * Creates a shortcut function to the HMAC's object interface.","\t         *","\t         * @param {Hasher} hasher The hasher to use in this HMAC helper.","\t         *","\t         * @return {Function} The shortcut function.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var HmacSHA256 = CryptoJS.lib.Hasher._createHmacHelper(CryptoJS.algo.SHA256);","\t         */","\t        _createHmacHelper: function (hasher) {","\t            return function (message, key) {","\t                return new C_algo.HMAC.init(hasher, key).finalize(message);","\t            };","\t        }","\t    });","","\t    /**","\t     * Algorithm namespace.","\t     */","\t    var C_algo = C.algo = {};","","\t    return C;","\t}(Math));","","","\treturn CryptoJS;","","}));","},{}],52:[function(require,module,exports){",";(function (root, factory) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t(function () {","\t    // Shortcuts","\t    var C = CryptoJS;","\t    var C_lib = C.lib;","\t    var WordArray = C_lib.WordArray;","\t    var C_enc = C.enc;","","\t    /**","\t     * Base64 encoding strategy.","\t     */","\t    var Base64 = C_enc.Base64 = {","\t        /**","\t         * Converts a word array to a Base64 string.","\t         *","\t         * @param {WordArray} wordArray The word array.","\t         *","\t         * @return {string} The Base64 string.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var base64String = CryptoJS.enc.Base64.stringify(wordArray);","\t         */","\t        stringify: function (wordArray) {","\t            // Shortcuts","\t            var words = wordArray.words;","\t            var sigBytes = wordArray.sigBytes;","\t            var map = this._map;","","\t            // Clamp excess bits","\t            wordArray.clamp();","","\t            // Convert","\t            var base64Chars = [];","\t            for (var i = 0; i < sigBytes; i += 3) {","\t                var byte1 = (words[i >>> 2]       >>> (24 - (i % 4) * 8))       & 0xff;","\t                var byte2 = (words[(i + 1) >>> 2] >>> (24 - ((i + 1) % 4) * 8)) & 0xff;","\t                var byte3 = (words[(i + 2) >>> 2] >>> (24 - ((i + 2) % 4) * 8)) & 0xff;","","\t                var triplet = (byte1 << 16) | (byte2 << 8) | byte3;","","\t                for (var j = 0; (j < 4) && (i + j * 0.75 < sigBytes); j++) {","\t                    base64Chars.push(map.charAt((triplet >>> (6 * (3 - j))) & 0x3f));","\t                }","\t            }","","\t            // Add padding","\t            var paddingChar = map.charAt(64);","\t            if (paddingChar) {","\t                while (base64Chars.length % 4) {","\t                    base64Chars.push(paddingChar);","\t                }","\t            }","","\t            return base64Chars.join('');","\t        },","","\t        /**","\t         * Converts a Base64 string to a word array.","\t         *","\t         * @param {string} base64Str The Base64 string.","\t         *","\t         * @return {WordArray} The word array.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var wordArray = CryptoJS.enc.Base64.parse(base64String);","\t         */","\t        parse: function (base64Str) {","\t            // Shortcuts","\t            var base64StrLength = base64Str.length;","\t            var map = this._map;","","\t            // Ignore padding","\t            var paddingChar = map.charAt(64);","\t            if (paddingChar) {","\t                var paddingIndex = base64Str.indexOf(paddingChar);","\t                if (paddingIndex != -1) {","\t                    base64StrLength = paddingIndex;","\t                }","\t            }","","\t            // Convert","\t            var words = [];","\t            var nBytes = 0;","\t            for (var i = 0; i < base64StrLength; i++) {","\t                if (i % 4) {","\t                    var bits1 = map.indexOf(base64Str.charAt(i - 1)) << ((i % 4) * 2);","\t                    var bits2 = map.indexOf(base64Str.charAt(i)) >>> (6 - (i % 4) * 2);","\t                    words[nBytes >>> 2] |= (bits1 | bits2) << (24 - (nBytes % 4) * 8);","\t                    nBytes++;","\t                }","\t            }","","\t            return WordArray.create(words, nBytes);","\t        },","","\t        _map: 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/='","\t    };","\t}());","","","\treturn CryptoJS.enc.Base64;","","}));","},{\"./core\":51}],53:[function(require,module,exports){",";(function (root, factory) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t(function () {","\t    // Shortcuts","\t    var C = CryptoJS;","\t    var C_lib = C.lib;","\t    var WordArray = C_lib.WordArray;","\t    var C_enc = C.enc;","","\t    /**","\t     * UTF-16 BE encoding strategy.","\t     */","\t    var Utf16BE = C_enc.Utf16 = C_enc.Utf16BE = {","\t        /**","\t         * Converts a word array to a UTF-16 BE string.","\t         *","\t         * @param {WordArray} wordArray The word array.","\t         *","\t         * @return {string} The UTF-16 BE string.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var utf16String = CryptoJS.enc.Utf16.stringify(wordArray);","\t         */","\t        stringify: function (wordArray) {","\t            // Shortcuts","\t            var words = wordArray.words;","\t            var sigBytes = wordArray.sigBytes;","","\t            // Convert","\t            var utf16Chars = [];","\t            for (var i = 0; i < sigBytes; i += 2) {","\t                var codePoint = (words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff;","\t                utf16Chars.push(String.fromCharCode(codePoint));","\t            }","","\t            return utf16Chars.join('');","\t        },","","\t        /**","\t         * Converts a UTF-16 BE string to a word array.","\t         *","\t         * @param {string} utf16Str The UTF-16 BE string.","\t         *","\t         * @return {WordArray} The word array.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var wordArray = CryptoJS.enc.Utf16.parse(utf16String);","\t         */","\t        parse: function (utf16Str) {","\t            // Shortcut","\t            var utf16StrLength = utf16Str.length;","","\t            // Convert","\t            var words = [];","\t            for (var i = 0; i < utf16StrLength; i++) {","\t                words[i >>> 1] |= utf16Str.charCodeAt(i) << (16 - (i % 2) * 16);","\t            }","","\t            return WordArray.create(words, utf16StrLength * 2);","\t        }","\t    };","","\t    /**","\t     * UTF-16 LE encoding strategy.","\t     */","\t    C_enc.Utf16LE = {","\t        /**","\t         * Converts a word array to a UTF-16 LE string.","\t         *","\t         * @param {WordArray} wordArray The word array.","\t         *","\t         * @return {string} The UTF-16 LE string.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var utf16Str = CryptoJS.enc.Utf16LE.stringify(wordArray);","\t         */","\t        stringify: function (wordArray) {","\t            // Shortcuts","\t            var words = wordArray.words;","\t            var sigBytes = wordArray.sigBytes;","","\t            // Convert","\t            var utf16Chars = [];","\t            for (var i = 0; i < sigBytes; i += 2) {","\t                var codePoint = swapEndian((words[i >>> 2] >>> (16 - (i % 4) * 8)) & 0xffff);","\t                utf16Chars.push(String.fromCharCode(codePoint));","\t            }","","\t            return utf16Chars.join('');","\t        },","","\t        /**","\t         * Converts a UTF-16 LE string to a word array.","\t         *","\t         * @param {string} utf16Str The UTF-16 LE string.","\t         *","\t         * @return {WordArray} The word array.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var wordArray = CryptoJS.enc.Utf16LE.parse(utf16Str);","\t         */","\t        parse: function (utf16Str) {","\t            // Shortcut","\t            var utf16StrLength = utf16Str.length;","","\t            // Convert","\t            var words = [];","\t            for (var i = 0; i < utf16StrLength; i++) {","\t                words[i >>> 1] |= swapEndian(utf16Str.charCodeAt(i) << (16 - (i % 2) * 16));","\t            }","","\t            return WordArray.create(words, utf16StrLength * 2);","\t        }","\t    };","","\t    function swapEndian(word) {","\t        return ((word << 8) & 0xff00ff00) | ((word >>> 8) & 0x00ff00ff);","\t    }","\t}());","","","\treturn CryptoJS.enc.Utf16;","","}));","},{\"./core\":51}],54:[function(require,module,exports){",";(function (root, factory, undef) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\", \"./sha1\", \"./hmac\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t(function () {","\t    // Shortcuts","\t    var C = CryptoJS;","\t    var C_lib = C.lib;","\t    var Base = C_lib.Base;","\t    var WordArray = C_lib.WordArray;","\t    var C_algo = C.algo;","\t    var MD5 = C_algo.MD5;","","\t    /**","\t     * This key derivation function is meant to conform with EVP_BytesToKey.","\t     * www.openssl.org/docs/crypto/EVP_BytesToKey.html","\t     */","\t    var EvpKDF = C_algo.EvpKDF = Base.extend({","\t        /**","\t         * Configuration options.","\t         *","\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)","\t         * @property {Hasher} hasher The hash algorithm to use. Default: MD5","\t         * @property {number} iterations The number of iterations to perform. Default: 1","\t         */","\t        cfg: Base.extend({","\t            keySize: 128/32,","\t            hasher: MD5,","\t            iterations: 1","\t        }),","","\t        /**","\t         * Initializes a newly created key derivation function.","\t         *","\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.","\t         *","\t         * @example","\t         *","\t         *     var kdf = CryptoJS.algo.EvpKDF.create();","\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8 });","\t         *     var kdf = CryptoJS.algo.EvpKDF.create({ keySize: 8, iterations: 1000 });","\t         */","\t        init: function (cfg) {","\t            this.cfg = this.cfg.extend(cfg);","\t        },","","\t        /**","\t         * Derives a key from a password.","\t         *","\t         * @param {WordArray|string} password The password.","\t         * @param {WordArray|string} salt A salt.","\t         *","\t         * @return {WordArray} The derived key.","\t         *","\t         * @example","\t         *","\t         *     var key = kdf.compute(password, salt);","\t         */","\t        compute: function (password, salt) {","\t            // Shortcut","\t            var cfg = this.cfg;","","\t            // Init hasher","\t            var hasher = cfg.hasher.create();","","\t            // Initial values","\t            var derivedKey = WordArray.create();","","\t            // Shortcuts","\t            var derivedKeyWords = derivedKey.words;","\t            var keySize = cfg.keySize;","\t            var iterations = cfg.iterations;","","\t            // Generate key","\t            while (derivedKeyWords.length < keySize) {","\t                if (block) {","\t                    hasher.update(block);","\t                }","\t                var block = hasher.update(password).finalize(salt);","\t                hasher.reset();","","\t                // Iterations","\t                for (var i = 1; i < iterations; i++) {","\t                    block = hasher.finalize(block);","\t                    hasher.reset();","\t                }","","\t                derivedKey.concat(block);","\t            }","\t            derivedKey.sigBytes = keySize * 4;","","\t            return derivedKey;","\t        }","\t    });","","\t    /**","\t     * Derives a key from a password.","\t     *","\t     * @param {WordArray|string} password The password.","\t     * @param {WordArray|string} salt A salt.","\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.","\t     *","\t     * @return {WordArray} The derived key.","\t     *","\t     * @static","\t     *","\t     * @example","\t     *","\t     *     var key = CryptoJS.EvpKDF(password, salt);","\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8 });","\t     *     var key = CryptoJS.EvpKDF(password, salt, { keySize: 8, iterations: 1000 });","\t     */","\t    C.EvpKDF = function (password, salt, cfg) {","\t        return EvpKDF.create(cfg).compute(password, salt);","\t    };","\t}());","","","\treturn CryptoJS.EvpKDF;","","}));","},{\"./core\":51,\"./hmac\":56,\"./sha1\":75}],55:[function(require,module,exports){",";(function (root, factory, undef) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\", \"./cipher-core\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t(function (undefined) {","\t    // Shortcuts","\t    var C = CryptoJS;","\t    var C_lib = C.lib;","\t    var CipherParams = C_lib.CipherParams;","\t    var C_enc = C.enc;","\t    var Hex = C_enc.Hex;","\t    var C_format = C.format;","","\t    var HexFormatter = C_format.Hex = {","\t        /**","\t         * Converts the ciphertext of a cipher params object to a hexadecimally encoded string.","\t         *","\t         * @param {CipherParams} cipherParams The cipher params object.","\t         *","\t         * @return {string} The hexadecimally encoded string.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var hexString = CryptoJS.format.Hex.stringify(cipherParams);","\t         */","\t        stringify: function (cipherParams) {","\t            return cipherParams.ciphertext.toString(Hex);","\t        },","","\t        /**","\t         * Converts a hexadecimally encoded ciphertext string to a cipher params object.","\t         *","\t         * @param {string} input The hexadecimally encoded string.","\t         *","\t         * @return {CipherParams} The cipher params object.","\t         *","\t         * @static","\t         *","\t         * @example","\t         *","\t         *     var cipherParams = CryptoJS.format.Hex.parse(hexString);","\t         */","\t        parse: function (input) {","\t            var ciphertext = Hex.parse(input);","\t            return CipherParams.create({ ciphertext: ciphertext });","\t        }","\t    };","\t}());","","","\treturn CryptoJS.format.Hex;","","}));","},{\"./cipher-core\":50,\"./core\":51}],56:[function(require,module,exports){",";(function (root, factory) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t(function () {","\t    // Shortcuts","\t    var C = CryptoJS;","\t    var C_lib = C.lib;","\t    var Base = C_lib.Base;","\t    var C_enc = C.enc;","\t    var Utf8 = C_enc.Utf8;","\t    var C_algo = C.algo;","","\t    /**","\t     * HMAC algorithm.","\t     */","\t    var HMAC = C_algo.HMAC = Base.extend({","\t        /**","\t         * Initializes a newly created HMAC.","\t         *","\t         * @param {Hasher} hasher The hash algorithm to use.","\t         * @param {WordArray|string} key The secret key.","\t         *","\t         * @example","\t         *","\t         *     var hmacHasher = CryptoJS.algo.HMAC.create(CryptoJS.algo.SHA256, key);","\t         */","\t        init: function (hasher, key) {","\t            // Init hasher","\t            hasher = this._hasher = new hasher.init();","","\t            // Convert string to WordArray, else assume WordArray already","\t            if (typeof key == 'string') {","\t                key = Utf8.parse(key);","\t            }","","\t            // Shortcuts","\t            var hasherBlockSize = hasher.blockSize;","\t            var hasherBlockSizeBytes = hasherBlockSize * 4;","","\t            // Allow arbitrary length keys","\t            if (key.sigBytes > hasherBlockSizeBytes) {","\t                key = hasher.finalize(key);","\t            }","","\t            // Clamp excess bits","\t            key.clamp();","","\t            // Clone key for inner and outer pads","\t            var oKey = this._oKey = key.clone();","\t            var iKey = this._iKey = key.clone();","","\t            // Shortcuts","\t            var oKeyWords = oKey.words;","\t            var iKeyWords = iKey.words;","","\t            // XOR keys with pad constants","\t            for (var i = 0; i < hasherBlockSize; i++) {","\t                oKeyWords[i] ^= 0x5c5c5c5c;","\t                iKeyWords[i] ^= 0x36363636;","\t            }","\t            oKey.sigBytes = iKey.sigBytes = hasherBlockSizeBytes;","","\t            // Set initial values","\t            this.reset();","\t        },","","\t        /**","\t         * Resets this HMAC to its initial state.","\t         *","\t         * @example","\t         *","\t         *     hmacHasher.reset();","\t         */","\t        reset: function () {","\t            // Shortcut","\t            var hasher = this._hasher;","","\t            // Reset","\t            hasher.reset();","\t            hasher.update(this._iKey);","\t        },","","\t        /**","\t         * Updates this HMAC with a message.","\t         *","\t         * @param {WordArray|string} messageUpdate The message to append.","\t         *","\t         * @return {HMAC} This HMAC instance.","\t         *","\t         * @example","\t         *","\t         *     hmacHasher.update('message');","\t         *     hmacHasher.update(wordArray);","\t         */","\t        update: function (messageUpdate) {","\t            this._hasher.update(messageUpdate);","","\t            // Chainable","\t            return this;","\t        },","","\t        /**","\t         * Finalizes the HMAC computation.","\t         * Note that the finalize operation is effectively a destructive, read-once operation.","\t         *","\t         * @param {WordArray|string} messageUpdate (Optional) A final message update.","\t         *","\t         * @return {WordArray} The HMAC.","\t         *","\t         * @example","\t         *","\t         *     var hmac = hmacHasher.finalize();","\t         *     var hmac = hmacHasher.finalize('message');","\t         *     var hmac = hmacHasher.finalize(wordArray);","\t         */","\t        finalize: function (messageUpdate) {","\t            // Shortcut","\t            var hasher = this._hasher;","","\t            // Compute HMAC","\t            var innerHash = hasher.finalize(messageUpdate);","\t            hasher.reset();","\t            var hmac = hasher.finalize(this._oKey.clone().concat(innerHash));","","\t            return hmac;","\t        }","\t    });","\t}());","","","}));","},{\"./core\":51}],57:[function(require,module,exports){",";(function (root, factory, undef) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"), require(\"./lib-typedarrays\"), require(\"./enc-utf16\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./sha1\"), require(\"./sha256\"), require(\"./sha224\"), require(\"./sha512\"), require(\"./sha384\"), require(\"./sha3\"), require(\"./ripemd160\"), require(\"./hmac\"), require(\"./pbkdf2\"), require(\"./evpkdf\"), require(\"./cipher-core\"), require(\"./mode-cfb\"), require(\"./mode-ctr\"), require(\"./mode-ctr-gladman\"), require(\"./mode-ofb\"), require(\"./mode-ecb\"), require(\"./pad-ansix923\"), require(\"./pad-iso10126\"), require(\"./pad-iso97971\"), require(\"./pad-zeropadding\"), require(\"./pad-nopadding\"), require(\"./format-hex\"), require(\"./aes\"), require(\"./tripledes\"), require(\"./rc4\"), require(\"./rabbit\"), require(\"./rabbit-legacy\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\", \"./x64-core\", \"./lib-typedarrays\", \"./enc-utf16\", \"./enc-base64\", \"./md5\", \"./sha1\", \"./sha256\", \"./sha224\", \"./sha512\", \"./sha384\", \"./sha3\", \"./ripemd160\", \"./hmac\", \"./pbkdf2\", \"./evpkdf\", \"./cipher-core\", \"./mode-cfb\", \"./mode-ctr\", \"./mode-ctr-gladman\", \"./mode-ofb\", \"./mode-ecb\", \"./pad-ansix923\", \"./pad-iso10126\", \"./pad-iso97971\", \"./pad-zeropadding\", \"./pad-nopadding\", \"./format-hex\", \"./aes\", \"./tripledes\", \"./rc4\", \"./rabbit\", \"./rabbit-legacy\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\troot.CryptoJS = factory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\treturn CryptoJS;","","}));","},{\"./aes\":49,\"./cipher-core\":50,\"./core\":51,\"./enc-base64\":52,\"./enc-utf16\":53,\"./evpkdf\":54,\"./format-hex\":55,\"./hmac\":56,\"./lib-typedarrays\":58,\"./md5\":59,\"./mode-cfb\":60,\"./mode-ctr\":62,\"./mode-ctr-gladman\":61,\"./mode-ecb\":63,\"./mode-ofb\":64,\"./pad-ansix923\":65,\"./pad-iso10126\":66,\"./pad-iso97971\":67,\"./pad-nopadding\":68,\"./pad-zeropadding\":69,\"./pbkdf2\":70,\"./rabbit\":72,\"./rabbit-legacy\":71,\"./rc4\":73,\"./ripemd160\":74,\"./sha1\":75,\"./sha224\":76,\"./sha256\":77,\"./sha3\":78,\"./sha384\":79,\"./sha512\":80,\"./tripledes\":81,\"./x64-core\":82}],58:[function(require,module,exports){",";(function (root, factory) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t(function () {","\t    // Check if typed arrays are supported","\t    if (typeof ArrayBuffer != 'function') {","\t        return;","\t    }","","\t    // Shortcuts","\t    var C = CryptoJS;","\t    var C_lib = C.lib;","\t    var WordArray = C_lib.WordArray;","","\t    // Reference original init","\t    var superInit = WordArray.init;","","\t    // Augment WordArray.init to handle typed arrays","\t    var subInit = WordArray.init = function (typedArray) {","\t        // Convert buffers to uint8","\t        if (typedArray instanceof ArrayBuffer) {","\t            typedArray = new Uint8Array(typedArray);","\t        }","","\t        // Convert other array views to uint8","\t        if (","\t            typedArray instanceof Int8Array ||","\t            (typeof Uint8ClampedArray !== \"undefined\" && typedArray instanceof Uint8ClampedArray) ||","\t            typedArray instanceof Int16Array ||","\t            typedArray instanceof Uint16Array ||","\t            typedArray instanceof Int32Array ||","\t            typedArray instanceof Uint32Array ||","\t            typedArray instanceof Float32Array ||","\t            typedArray instanceof Float64Array","\t        ) {","\t            typedArray = new Uint8Array(typedArray.buffer, typedArray.byteOffset, typedArray.byteLength);","\t        }","","\t        // Handle Uint8Array","\t        if (typedArray instanceof Uint8Array) {","\t            // Shortcut","\t            var typedArrayByteLength = typedArray.byteLength;","","\t            // Extract bytes","\t            var words = [];","\t            for (var i = 0; i < typedArrayByteLength; i++) {","\t                words[i >>> 2] |= typedArray[i] << (24 - (i % 4) * 8);","\t            }","","\t            // Initialize this word array","\t            superInit.call(this, words, typedArrayByteLength);","\t        } else {","\t            // Else call normal init","\t            superInit.apply(this, arguments);","\t        }","\t    };","","\t    subInit.prototype = WordArray;","\t}());","","","\treturn CryptoJS.lib.WordArray;","","}));","},{\"./core\":51}],59:[function(require,module,exports){",";(function (root, factory) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t(function (Math) {","\t    // Shortcuts","\t    var C = CryptoJS;","\t    var C_lib = C.lib;","\t    var WordArray = C_lib.WordArray;","\t    var Hasher = C_lib.Hasher;","\t    var C_algo = C.algo;","","\t    // Constants table","\t    var T = [];","","\t    // Compute constants","\t    (function () {","\t        for (var i = 0; i < 64; i++) {","\t            T[i] = (Math.abs(Math.sin(i + 1)) * 0x100000000) | 0;","\t        }","\t    }());","","\t    /**","\t     * MD5 hash algorithm.","\t     */","\t    var MD5 = C_algo.MD5 = Hasher.extend({","\t        _doReset: function () {","\t            this._hash = new WordArray.init([","\t                0x67452301, 0xefcdab89,","\t                0x98badcfe, 0x10325476","\t            ]);","\t        },","","\t        _doProcessBlock: function (M, offset) {","\t            // Swap endian","\t            for (var i = 0; i < 16; i++) {","\t                // Shortcuts","\t                var offset_i = offset + i;","\t                var M_offset_i = M[offset_i];","","\t                M[offset_i] = (","\t                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |","\t                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)","\t                );","\t            }","","\t            // Shortcuts","\t            var H = this._hash.words;","","\t            var M_offset_0  = M[offset + 0];","\t            var M_offset_1  = M[offset + 1];","\t            var M_offset_2  = M[offset + 2];","\t            var M_offset_3  = M[offset + 3];","\t            var M_offset_4  = M[offset + 4];","\t            var M_offset_5  = M[offset + 5];","\t            var M_offset_6  = M[offset + 6];","\t            var M_offset_7  = M[offset + 7];","\t            var M_offset_8  = M[offset + 8];","\t            var M_offset_9  = M[offset + 9];","\t            var M_offset_10 = M[offset + 10];","\t            var M_offset_11 = M[offset + 11];","\t            var M_offset_12 = M[offset + 12];","\t            var M_offset_13 = M[offset + 13];","\t            var M_offset_14 = M[offset + 14];","\t            var M_offset_15 = M[offset + 15];","","\t            // Working varialbes","\t            var a = H[0];","\t            var b = H[1];","\t            var c = H[2];","\t            var d = H[3];","","\t            // Computation","\t            a = FF(a, b, c, d, M_offset_0,  7,  T[0]);","\t            d = FF(d, a, b, c, M_offset_1,  12, T[1]);","\t            c = FF(c, d, a, b, M_offset_2,  17, T[2]);","\t            b = FF(b, c, d, a, M_offset_3,  22, T[3]);","\t            a = FF(a, b, c, d, M_offset_4,  7,  T[4]);","\t            d = FF(d, a, b, c, M_offset_5,  12, T[5]);","\t            c = FF(c, d, a, b, M_offset_6,  17, T[6]);","\t            b = FF(b, c, d, a, M_offset_7,  22, T[7]);","\t            a = FF(a, b, c, d, M_offset_8,  7,  T[8]);","\t            d = FF(d, a, b, c, M_offset_9,  12, T[9]);","\t            c = FF(c, d, a, b, M_offset_10, 17, T[10]);","\t            b = FF(b, c, d, a, M_offset_11, 22, T[11]);","\t            a = FF(a, b, c, d, M_offset_12, 7,  T[12]);","\t            d = FF(d, a, b, c, M_offset_13, 12, T[13]);","\t            c = FF(c, d, a, b, M_offset_14, 17, T[14]);","\t            b = FF(b, c, d, a, M_offset_15, 22, T[15]);","","\t            a = GG(a, b, c, d, M_offset_1,  5,  T[16]);","\t            d = GG(d, a, b, c, M_offset_6,  9,  T[17]);","\t            c = GG(c, d, a, b, M_offset_11, 14, T[18]);","\t            b = GG(b, c, d, a, M_offset_0,  20, T[19]);","\t            a = GG(a, b, c, d, M_offset_5,  5,  T[20]);","\t            d = GG(d, a, b, c, M_offset_10, 9,  T[21]);","\t            c = GG(c, d, a, b, M_offset_15, 14, T[22]);","\t            b = GG(b, c, d, a, M_offset_4,  20, T[23]);","\t            a = GG(a, b, c, d, M_offset_9,  5,  T[24]);","\t            d = GG(d, a, b, c, M_offset_14, 9,  T[25]);","\t            c = GG(c, d, a, b, M_offset_3,  14, T[26]);","\t            b = GG(b, c, d, a, M_offset_8,  20, T[27]);","\t            a = GG(a, b, c, d, M_offset_13, 5,  T[28]);","\t            d = GG(d, a, b, c, M_offset_2,  9,  T[29]);","\t            c = GG(c, d, a, b, M_offset_7,  14, T[30]);","\t            b = GG(b, c, d, a, M_offset_12, 20, T[31]);","","\t            a = HH(a, b, c, d, M_offset_5,  4,  T[32]);","\t            d = HH(d, a, b, c, M_offset_8,  11, T[33]);","\t            c = HH(c, d, a, b, M_offset_11, 16, T[34]);","\t            b = HH(b, c, d, a, M_offset_14, 23, T[35]);","\t            a = HH(a, b, c, d, M_offset_1,  4,  T[36]);","\t            d = HH(d, a, b, c, M_offset_4,  11, T[37]);","\t            c = HH(c, d, a, b, M_offset_7,  16, T[38]);","\t            b = HH(b, c, d, a, M_offset_10, 23, T[39]);","\t            a = HH(a, b, c, d, M_offset_13, 4,  T[40]);","\t            d = HH(d, a, b, c, M_offset_0,  11, T[41]);","\t            c = HH(c, d, a, b, M_offset_3,  16, T[42]);","\t            b = HH(b, c, d, a, M_offset_6,  23, T[43]);","\t            a = HH(a, b, c, d, M_offset_9,  4,  T[44]);","\t            d = HH(d, a, b, c, M_offset_12, 11, T[45]);","\t            c = HH(c, d, a, b, M_offset_15, 16, T[46]);","\t            b = HH(b, c, d, a, M_offset_2,  23, T[47]);","","\t            a = II(a, b, c, d, M_offset_0,  6,  T[48]);","\t            d = II(d, a, b, c, M_offset_7,  10, T[49]);","\t            c = II(c, d, a, b, M_offset_14, 15, T[50]);","\t            b = II(b, c, d, a, M_offset_5,  21, T[51]);","\t            a = II(a, b, c, d, M_offset_12, 6,  T[52]);","\t            d = II(d, a, b, c, M_offset_3,  10, T[53]);","\t            c = II(c, d, a, b, M_offset_10, 15, T[54]);","\t            b = II(b, c, d, a, M_offset_1,  21, T[55]);","\t            a = II(a, b, c, d, M_offset_8,  6,  T[56]);","\t            d = II(d, a, b, c, M_offset_15, 10, T[57]);","\t            c = II(c, d, a, b, M_offset_6,  15, T[58]);","\t            b = II(b, c, d, a, M_offset_13, 21, T[59]);","\t            a = II(a, b, c, d, M_offset_4,  6,  T[60]);","\t            d = II(d, a, b, c, M_offset_11, 10, T[61]);","\t            c = II(c, d, a, b, M_offset_2,  15, T[62]);","\t            b = II(b, c, d, a, M_offset_9,  21, T[63]);","","\t            // Intermediate hash value","\t            H[0] = (H[0] + a) | 0;","\t            H[1] = (H[1] + b) | 0;","\t            H[2] = (H[2] + c) | 0;","\t            H[3] = (H[3] + d) | 0;","\t        },","","\t        _doFinalize: function () {","\t            // Shortcuts","\t            var data = this._data;","\t            var dataWords = data.words;","","\t            var nBitsTotal = this._nDataBytes * 8;","\t            var nBitsLeft = data.sigBytes * 8;","","\t            // Add padding","\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);","","\t            var nBitsTotalH = Math.floor(nBitsTotal / 0x100000000);","\t            var nBitsTotalL = nBitsTotal;","\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = (","\t                (((nBitsTotalH << 8)  | (nBitsTotalH >>> 24)) & 0x00ff00ff) |","\t                (((nBitsTotalH << 24) | (nBitsTotalH >>> 8))  & 0xff00ff00)","\t            );","\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (","\t                (((nBitsTotalL << 8)  | (nBitsTotalL >>> 24)) & 0x00ff00ff) |","\t                (((nBitsTotalL << 24) | (nBitsTotalL >>> 8))  & 0xff00ff00)","\t            );","","\t            data.sigBytes = (dataWords.length + 1) * 4;","","\t            // Hash final blocks","\t            this._process();","","\t            // Shortcuts","\t            var hash = this._hash;","\t            var H = hash.words;","","\t            // Swap endian","\t            for (var i = 0; i < 4; i++) {","\t                // Shortcut","\t                var H_i = H[i];","","\t                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |","\t                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);","\t            }","","\t            // Return final computed hash","\t            return hash;","\t        },","","\t        clone: function () {","\t            var clone = Hasher.clone.call(this);","\t            clone._hash = this._hash.clone();","","\t            return clone;","\t        }","\t    });","","\t    function FF(a, b, c, d, x, s, t) {","\t        var n = a + ((b & c) | (~b & d)) + x + t;","\t        return ((n << s) | (n >>> (32 - s))) + b;","\t    }","","\t    function GG(a, b, c, d, x, s, t) {","\t        var n = a + ((b & d) | (c & ~d)) + x + t;","\t        return ((n << s) | (n >>> (32 - s))) + b;","\t    }","","\t    function HH(a, b, c, d, x, s, t) {","\t        var n = a + (b ^ c ^ d) + x + t;","\t        return ((n << s) | (n >>> (32 - s))) + b;","\t    }","","\t    function II(a, b, c, d, x, s, t) {","\t        var n = a + (c ^ (b | ~d)) + x + t;","\t        return ((n << s) | (n >>> (32 - s))) + b;","\t    }","","\t    /**","\t     * Shortcut function to the hasher's object interface.","\t     *","\t     * @param {WordArray|string} message The message to hash.","\t     *","\t     * @return {WordArray} The hash.","\t     *","\t     * @static","\t     *","\t     * @example","\t     *","\t     *     var hash = CryptoJS.MD5('message');","\t     *     var hash = CryptoJS.MD5(wordArray);","\t     */","\t    C.MD5 = Hasher._createHelper(MD5);","","\t    /**","\t     * Shortcut function to the HMAC's object interface.","\t     *","\t     * @param {WordArray|string} message The message to hash.","\t     * @param {WordArray|string} key The secret key.","\t     *","\t     * @return {WordArray} The HMAC.","\t     *","\t     * @static","\t     *","\t     * @example","\t     *","\t     *     var hmac = CryptoJS.HmacMD5(message, key);","\t     */","\t    C.HmacMD5 = Hasher._createHmacHelper(MD5);","\t}(Math));","","","\treturn CryptoJS.MD5;","","}));","},{\"./core\":51}],60:[function(require,module,exports){",";(function (root, factory, undef) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\", \"./cipher-core\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t/**","\t * Cipher Feedback block mode.","\t */","\tCryptoJS.mode.CFB = (function () {","\t    var CFB = CryptoJS.lib.BlockCipherMode.extend();","","\t    CFB.Encryptor = CFB.extend({","\t        processBlock: function (words, offset) {","\t            // Shortcuts","\t            var cipher = this._cipher;","\t            var blockSize = cipher.blockSize;","","\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);","","\t            // Remember this block to use with next block","\t            this._prevBlock = words.slice(offset, offset + blockSize);","\t        }","\t    });","","\t    CFB.Decryptor = CFB.extend({","\t        processBlock: function (words, offset) {","\t            // Shortcuts","\t            var cipher = this._cipher;","\t            var blockSize = cipher.blockSize;","","\t            // Remember this block to use with next block","\t            var thisBlock = words.slice(offset, offset + blockSize);","","\t            generateKeystreamAndEncrypt.call(this, words, offset, blockSize, cipher);","","\t            // This block becomes the previous block","\t            this._prevBlock = thisBlock;","\t        }","\t    });","","\t    function generateKeystreamAndEncrypt(words, offset, blockSize, cipher) {","\t        // Shortcut","\t        var iv = this._iv;","","\t        // Generate keystream","\t        if (iv) {","\t            var keystream = iv.slice(0);","","\t            // Remove IV for subsequent blocks","\t            this._iv = undefined;","\t        } else {","\t            var keystream = this._prevBlock;","\t        }","\t        cipher.encryptBlock(keystream, 0);","","\t        // Encrypt","\t        for (var i = 0; i < blockSize; i++) {","\t            words[offset + i] ^= keystream[i];","\t        }","\t    }","","\t    return CFB;","\t}());","","","\treturn CryptoJS.mode.CFB;","","}));","},{\"./cipher-core\":50,\"./core\":51}],61:[function(require,module,exports){",";(function (root, factory, undef) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\", \"./cipher-core\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t/** @preserve","\t * Counter block mode compatible with  Dr Brian Gladman fileenc.c","\t * derived from CryptoJS.mode.CTR","\t * Jan Hruby jhruby.web@gmail.com","\t */","\tCryptoJS.mode.CTRGladman = (function () {","\t    var CTRGladman = CryptoJS.lib.BlockCipherMode.extend();","","\t\tfunction incWord(word)","\t\t{","\t\t\tif (((word >> 24) & 0xff) === 0xff) { //overflow","\t\t\tvar b1 = (word >> 16)&0xff;","\t\t\tvar b2 = (word >> 8)&0xff;","\t\t\tvar b3 = word & 0xff;","","\t\t\tif (b1 === 0xff) // overflow b1","\t\t\t{","\t\t\tb1 = 0;","\t\t\tif (b2 === 0xff)","\t\t\t{","\t\t\t\tb2 = 0;","\t\t\t\tif (b3 === 0xff)","\t\t\t\t{","\t\t\t\t\tb3 = 0;","\t\t\t\t}","\t\t\t\telse","\t\t\t\t{","\t\t\t\t\t++b3;","\t\t\t\t}","\t\t\t}","\t\t\telse","\t\t\t{","\t\t\t\t++b2;","\t\t\t}","\t\t\t}","\t\t\telse","\t\t\t{","\t\t\t++b1;","\t\t\t}","","\t\t\tword = 0;","\t\t\tword += (b1 << 16);","\t\t\tword += (b2 << 8);","\t\t\tword += b3;","\t\t\t}","\t\t\telse","\t\t\t{","\t\t\tword += (0x01 << 24);","\t\t\t}","\t\t\treturn word;","\t\t}","","\t\tfunction incCounter(counter)","\t\t{","\t\t\tif ((counter[0] = incWord(counter[0])) === 0)","\t\t\t{","\t\t\t\t// encr_data in fileenc.c from  Dr Brian Gladman's counts only with DWORD j < 8","\t\t\t\tcounter[1] = incWord(counter[1]);","\t\t\t}","\t\t\treturn counter;","\t\t}","","\t    var Encryptor = CTRGladman.Encryptor = CTRGladman.extend({","\t        processBlock: function (words, offset) {","\t            // Shortcuts","\t            var cipher = this._cipher","\t            var blockSize = cipher.blockSize;","\t            var iv = this._iv;","\t            var counter = this._counter;","","\t            // Generate keystream","\t            if (iv) {","\t                counter = this._counter = iv.slice(0);","","\t                // Remove IV for subsequent blocks","\t                this._iv = undefined;","\t            }","","\t\t\t\tincCounter(counter);","","\t\t\t\tvar keystream = counter.slice(0);","\t            cipher.encryptBlock(keystream, 0);","","\t            // Encrypt","\t            for (var i = 0; i < blockSize; i++) {","\t                words[offset + i] ^= keystream[i];","\t            }","\t        }","\t    });","","\t    CTRGladman.Decryptor = Encryptor;","","\t    return CTRGladman;","\t}());","","","","","\treturn CryptoJS.mode.CTRGladman;","","}));","},{\"./cipher-core\":50,\"./core\":51}],62:[function(require,module,exports){",";(function (root, factory, undef) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\", \"./cipher-core\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t/**","\t * Counter block mode.","\t */","\tCryptoJS.mode.CTR = (function () {","\t    var CTR = CryptoJS.lib.BlockCipherMode.extend();","","\t    var Encryptor = CTR.Encryptor = CTR.extend({","\t        processBlock: function (words, offset) {","\t            // Shortcuts","\t            var cipher = this._cipher","\t            var blockSize = cipher.blockSize;","\t            var iv = this._iv;","\t            var counter = this._counter;","","\t            // Generate keystream","\t            if (iv) {","\t                counter = this._counter = iv.slice(0);","","\t                // Remove IV for subsequent blocks","\t                this._iv = undefined;","\t            }","\t            var keystream = counter.slice(0);","\t            cipher.encryptBlock(keystream, 0);","","\t            // Increment counter","\t            counter[blockSize - 1] = (counter[blockSize - 1] + 1) | 0","","\t            // Encrypt","\t            for (var i = 0; i < blockSize; i++) {","\t                words[offset + i] ^= keystream[i];","\t            }","\t        }","\t    });","","\t    CTR.Decryptor = Encryptor;","","\t    return CTR;","\t}());","","","\treturn CryptoJS.mode.CTR;","","}));","},{\"./cipher-core\":50,\"./core\":51}],63:[function(require,module,exports){",";(function (root, factory, undef) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\", \"./cipher-core\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t/**","\t * Electronic Codebook block mode.","\t */","\tCryptoJS.mode.ECB = (function () {","\t    var ECB = CryptoJS.lib.BlockCipherMode.extend();","","\t    ECB.Encryptor = ECB.extend({","\t        processBlock: function (words, offset) {","\t            this._cipher.encryptBlock(words, offset);","\t        }","\t    });","","\t    ECB.Decryptor = ECB.extend({","\t        processBlock: function (words, offset) {","\t            this._cipher.decryptBlock(words, offset);","\t        }","\t    });","","\t    return ECB;","\t}());","","","\treturn CryptoJS.mode.ECB;","","}));","},{\"./cipher-core\":50,\"./core\":51}],64:[function(require,module,exports){",";(function (root, factory, undef) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\", \"./cipher-core\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t/**","\t * Output Feedback block mode.","\t */","\tCryptoJS.mode.OFB = (function () {","\t    var OFB = CryptoJS.lib.BlockCipherMode.extend();","","\t    var Encryptor = OFB.Encryptor = OFB.extend({","\t        processBlock: function (words, offset) {","\t            // Shortcuts","\t            var cipher = this._cipher","\t            var blockSize = cipher.blockSize;","\t            var iv = this._iv;","\t            var keystream = this._keystream;","","\t            // Generate keystream","\t            if (iv) {","\t                keystream = this._keystream = iv.slice(0);","","\t                // Remove IV for subsequent blocks","\t                this._iv = undefined;","\t            }","\t            cipher.encryptBlock(keystream, 0);","","\t            // Encrypt","\t            for (var i = 0; i < blockSize; i++) {","\t                words[offset + i] ^= keystream[i];","\t            }","\t        }","\t    });","","\t    OFB.Decryptor = Encryptor;","","\t    return OFB;","\t}());","","","\treturn CryptoJS.mode.OFB;","","}));","},{\"./cipher-core\":50,\"./core\":51}],65:[function(require,module,exports){",";(function (root, factory, undef) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\", \"./cipher-core\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t/**","\t * ANSI X.923 padding strategy.","\t */","\tCryptoJS.pad.AnsiX923 = {","\t    pad: function (data, blockSize) {","\t        // Shortcuts","\t        var dataSigBytes = data.sigBytes;","\t        var blockSizeBytes = blockSize * 4;","","\t        // Count padding bytes","\t        var nPaddingBytes = blockSizeBytes - dataSigBytes % blockSizeBytes;","","\t        // Compute last byte position","\t        var lastBytePos = dataSigBytes + nPaddingBytes - 1;","","\t        // Pad","\t        data.clamp();","\t        data.words[lastBytePos >>> 2] |= nPaddingBytes << (24 - (lastBytePos % 4) * 8);","\t        data.sigBytes += nPaddingBytes;","\t    },","","\t    unpad: function (data) {","\t        // Get number of padding bytes from last byte","\t        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;","","\t        // Remove padding","\t        data.sigBytes -= nPaddingBytes;","\t    }","\t};","","","\treturn CryptoJS.pad.Ansix923;","","}));","},{\"./cipher-core\":50,\"./core\":51}],66:[function(require,module,exports){",";(function (root, factory, undef) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\", \"./cipher-core\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t/**","\t * ISO 10126 padding strategy.","\t */","\tCryptoJS.pad.Iso10126 = {","\t    pad: function (data, blockSize) {","\t        // Shortcut","\t        var blockSizeBytes = blockSize * 4;","","\t        // Count padding bytes","\t        var nPaddingBytes = blockSizeBytes - data.sigBytes % blockSizeBytes;","","\t        // Pad","\t        data.concat(CryptoJS.lib.WordArray.random(nPaddingBytes - 1)).","\t             concat(CryptoJS.lib.WordArray.create([nPaddingBytes << 24], 1));","\t    },","","\t    unpad: function (data) {","\t        // Get number of padding bytes from last byte","\t        var nPaddingBytes = data.words[(data.sigBytes - 1) >>> 2] & 0xff;","","\t        // Remove padding","\t        data.sigBytes -= nPaddingBytes;","\t    }","\t};","","","\treturn CryptoJS.pad.Iso10126;","","}));","},{\"./cipher-core\":50,\"./core\":51}],67:[function(require,module,exports){",";(function (root, factory, undef) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\", \"./cipher-core\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t/**","\t * ISO/IEC 9797-1 Padding Method 2.","\t */","\tCryptoJS.pad.Iso97971 = {","\t    pad: function (data, blockSize) {","\t        // Add 0x80 byte","\t        data.concat(CryptoJS.lib.WordArray.create([0x80000000], 1));","","\t        // Zero pad the rest","\t        CryptoJS.pad.ZeroPadding.pad(data, blockSize);","\t    },","","\t    unpad: function (data) {","\t        // Remove zero padding","\t        CryptoJS.pad.ZeroPadding.unpad(data);","","\t        // Remove one more byte -- the 0x80 byte","\t        data.sigBytes--;","\t    }","\t};","","","\treturn CryptoJS.pad.Iso97971;","","}));","},{\"./cipher-core\":50,\"./core\":51}],68:[function(require,module,exports){",";(function (root, factory, undef) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\", \"./cipher-core\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t/**","\t * A noop padding strategy.","\t */","\tCryptoJS.pad.NoPadding = {","\t    pad: function () {","\t    },","","\t    unpad: function () {","\t    }","\t};","","","\treturn CryptoJS.pad.NoPadding;","","}));","},{\"./cipher-core\":50,\"./core\":51}],69:[function(require,module,exports){",";(function (root, factory, undef) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./cipher-core\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\", \"./cipher-core\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t/**","\t * Zero padding strategy.","\t */","\tCryptoJS.pad.ZeroPadding = {","\t    pad: function (data, blockSize) {","\t        // Shortcut","\t        var blockSizeBytes = blockSize * 4;","","\t        // Pad","\t        data.clamp();","\t        data.sigBytes += blockSizeBytes - ((data.sigBytes % blockSizeBytes) || blockSizeBytes);","\t    },","","\t    unpad: function (data) {","\t        // Shortcut","\t        var dataWords = data.words;","","\t        // Unpad","\t        var i = data.sigBytes - 1;","\t        while (!((dataWords[i >>> 2] >>> (24 - (i % 4) * 8)) & 0xff)) {","\t            i--;","\t        }","\t        data.sigBytes = i + 1;","\t    }","\t};","","","\treturn CryptoJS.pad.ZeroPadding;","","}));","},{\"./cipher-core\":50,\"./core\":51}],70:[function(require,module,exports){",";(function (root, factory, undef) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha1\"), require(\"./hmac\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\", \"./sha1\", \"./hmac\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t(function () {","\t    // Shortcuts","\t    var C = CryptoJS;","\t    var C_lib = C.lib;","\t    var Base = C_lib.Base;","\t    var WordArray = C_lib.WordArray;","\t    var C_algo = C.algo;","\t    var SHA1 = C_algo.SHA1;","\t    var HMAC = C_algo.HMAC;","","\t    /**","\t     * Password-Based Key Derivation Function 2 algorithm.","\t     */","\t    var PBKDF2 = C_algo.PBKDF2 = Base.extend({","\t        /**","\t         * Configuration options.","\t         *","\t         * @property {number} keySize The key size in words to generate. Default: 4 (128 bits)","\t         * @property {Hasher} hasher The hasher to use. Default: SHA1","\t         * @property {number} iterations The number of iterations to perform. Default: 1","\t         */","\t        cfg: Base.extend({","\t            keySize: 128/32,","\t            hasher: SHA1,","\t            iterations: 1","\t        }),","","\t        /**","\t         * Initializes a newly created key derivation function.","\t         *","\t         * @param {Object} cfg (Optional) The configuration options to use for the derivation.","\t         *","\t         * @example","\t         *","\t         *     var kdf = CryptoJS.algo.PBKDF2.create();","\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8 });","\t         *     var kdf = CryptoJS.algo.PBKDF2.create({ keySize: 8, iterations: 1000 });","\t         */","\t        init: function (cfg) {","\t            this.cfg = this.cfg.extend(cfg);","\t        },","","\t        /**","\t         * Computes the Password-Based Key Derivation Function 2.","\t         *","\t         * @param {WordArray|string} password The password.","\t         * @param {WordArray|string} salt A salt.","\t         *","\t         * @return {WordArray} The derived key.","\t         *","\t         * @example","\t         *","\t         *     var key = kdf.compute(password, salt);","\t         */","\t        compute: function (password, salt) {","\t            // Shortcut","\t            var cfg = this.cfg;","","\t            // Init HMAC","\t            var hmac = HMAC.create(cfg.hasher, password);","","\t            // Initial values","\t            var derivedKey = WordArray.create();","\t            var blockIndex = WordArray.create([0x00000001]);","","\t            // Shortcuts","\t            var derivedKeyWords = derivedKey.words;","\t            var blockIndexWords = blockIndex.words;","\t            var keySize = cfg.keySize;","\t            var iterations = cfg.iterations;","","\t            // Generate key","\t            while (derivedKeyWords.length < keySize) {","\t                var block = hmac.update(salt).finalize(blockIndex);","\t                hmac.reset();","","\t                // Shortcuts","\t                var blockWords = block.words;","\t                var blockWordsLength = blockWords.length;","","\t                // Iterations","\t                var intermediate = block;","\t                for (var i = 1; i < iterations; i++) {","\t                    intermediate = hmac.finalize(intermediate);","\t                    hmac.reset();","","\t                    // Shortcut","\t                    var intermediateWords = intermediate.words;","","\t                    // XOR intermediate with block","\t                    for (var j = 0; j < blockWordsLength; j++) {","\t                        blockWords[j] ^= intermediateWords[j];","\t                    }","\t                }","","\t                derivedKey.concat(block);","\t                blockIndexWords[0]++;","\t            }","\t            derivedKey.sigBytes = keySize * 4;","","\t            return derivedKey;","\t        }","\t    });","","\t    /**","\t     * Computes the Password-Based Key Derivation Function 2.","\t     *","\t     * @param {WordArray|string} password The password.","\t     * @param {WordArray|string} salt A salt.","\t     * @param {Object} cfg (Optional) The configuration options to use for this computation.","\t     *","\t     * @return {WordArray} The derived key.","\t     *","\t     * @static","\t     *","\t     * @example","\t     *","\t     *     var key = CryptoJS.PBKDF2(password, salt);","\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8 });","\t     *     var key = CryptoJS.PBKDF2(password, salt, { keySize: 8, iterations: 1000 });","\t     */","\t    C.PBKDF2 = function (password, salt, cfg) {","\t        return PBKDF2.create(cfg).compute(password, salt);","\t    };","\t}());","","","\treturn CryptoJS.PBKDF2;","","}));","},{\"./core\":51,\"./hmac\":56,\"./sha1\":75}],71:[function(require,module,exports){",";(function (root, factory, undef) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t(function () {","\t    // Shortcuts","\t    var C = CryptoJS;","\t    var C_lib = C.lib;","\t    var StreamCipher = C_lib.StreamCipher;","\t    var C_algo = C.algo;","","\t    // Reusable objects","\t    var S  = [];","\t    var C_ = [];","\t    var G  = [];","","\t    /**","\t     * Rabbit stream cipher algorithm.","\t     *","\t     * This is a legacy version that neglected to convert the key to little-endian.","\t     * This error doesn't affect the cipher's security,","\t     * but it does affect its compatibility with other implementations.","\t     */","\t    var RabbitLegacy = C_algo.RabbitLegacy = StreamCipher.extend({","\t        _doReset: function () {","\t            // Shortcuts","\t            var K = this._key.words;","\t            var iv = this.cfg.iv;","","\t            // Generate initial state values","\t            var X = this._X = [","\t                K[0], (K[3] << 16) | (K[2] >>> 16),","\t                K[1], (K[0] << 16) | (K[3] >>> 16),","\t                K[2], (K[1] << 16) | (K[0] >>> 16),","\t                K[3], (K[2] << 16) | (K[1] >>> 16)","\t            ];","","\t            // Generate initial counter values","\t            var C = this._C = [","\t                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),","\t                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),","\t                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),","\t                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)","\t            ];","","\t            // Carry bit","\t            this._b = 0;","","\t            // Iterate the system four times","\t            for (var i = 0; i < 4; i++) {","\t                nextState.call(this);","\t            }","","\t            // Modify the counters","\t            for (var i = 0; i < 8; i++) {","\t                C[i] ^= X[(i + 4) & 7];","\t            }","","\t            // IV setup","\t            if (iv) {","\t                // Shortcuts","\t                var IV = iv.words;","\t                var IV_0 = IV[0];","\t                var IV_1 = IV[1];","","\t                // Generate four subvectors","\t                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);","\t                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);","\t                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);","\t                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);","","\t                // Modify counter values","\t                C[0] ^= i0;","\t                C[1] ^= i1;","\t                C[2] ^= i2;","\t                C[3] ^= i3;","\t                C[4] ^= i0;","\t                C[5] ^= i1;","\t                C[6] ^= i2;","\t                C[7] ^= i3;","","\t                // Iterate the system four times","\t                for (var i = 0; i < 4; i++) {","\t                    nextState.call(this);","\t                }","\t            }","\t        },","","\t        _doProcessBlock: function (M, offset) {","\t            // Shortcut","\t            var X = this._X;","","\t            // Iterate the system","\t            nextState.call(this);","","\t            // Generate four keystream words","\t            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);","\t            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);","\t            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);","\t            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);","","\t            for (var i = 0; i < 4; i++) {","\t                // Swap endian","\t                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |","\t                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);","","\t                // Encrypt","\t                M[offset + i] ^= S[i];","\t            }","\t        },","","\t        blockSize: 128/32,","","\t        ivSize: 64/32","\t    });","","\t    function nextState() {","\t        // Shortcuts","\t        var X = this._X;","\t        var C = this._C;","","\t        // Save old counter values","\t        for (var i = 0; i < 8; i++) {","\t            C_[i] = C[i];","\t        }","","\t        // Calculate new counter values","\t        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;","\t        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;","\t        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;","\t        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;","\t        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;","\t        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;","\t        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;","\t        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;","\t        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;","","\t        // Calculate the g-values","\t        for (var i = 0; i < 8; i++) {","\t            var gx = X[i] + C[i];","","\t            // Construct high and low argument for squaring","\t            var ga = gx & 0xffff;","\t            var gb = gx >>> 16;","","\t            // Calculate high and low result of squaring","\t            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;","\t            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);","","\t            // High XOR low","\t            G[i] = gh ^ gl;","\t        }","","\t        // Calculate new state values","\t        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;","\t        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;","\t        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;","\t        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;","\t        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;","\t        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;","\t        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;","\t        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;","\t    }","","\t    /**","\t     * Shortcut functions to the cipher's object interface.","\t     *","\t     * @example","\t     *","\t     *     var ciphertext = CryptoJS.RabbitLegacy.encrypt(message, key, cfg);","\t     *     var plaintext  = CryptoJS.RabbitLegacy.decrypt(ciphertext, key, cfg);","\t     */","\t    C.RabbitLegacy = StreamCipher._createHelper(RabbitLegacy);","\t}());","","","\treturn CryptoJS.RabbitLegacy;","","}));","},{\"./cipher-core\":50,\"./core\":51,\"./enc-base64\":52,\"./evpkdf\":54,\"./md5\":59}],72:[function(require,module,exports){",";(function (root, factory, undef) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t(function () {","\t    // Shortcuts","\t    var C = CryptoJS;","\t    var C_lib = C.lib;","\t    var StreamCipher = C_lib.StreamCipher;","\t    var C_algo = C.algo;","","\t    // Reusable objects","\t    var S  = [];","\t    var C_ = [];","\t    var G  = [];","","\t    /**","\t     * Rabbit stream cipher algorithm","\t     */","\t    var Rabbit = C_algo.Rabbit = StreamCipher.extend({","\t        _doReset: function () {","\t            // Shortcuts","\t            var K = this._key.words;","\t            var iv = this.cfg.iv;","","\t            // Swap endian","\t            for (var i = 0; i < 4; i++) {","\t                K[i] = (((K[i] << 8)  | (K[i] >>> 24)) & 0x00ff00ff) |","\t                       (((K[i] << 24) | (K[i] >>> 8))  & 0xff00ff00);","\t            }","","\t            // Generate initial state values","\t            var X = this._X = [","\t                K[0], (K[3] << 16) | (K[2] >>> 16),","\t                K[1], (K[0] << 16) | (K[3] >>> 16),","\t                K[2], (K[1] << 16) | (K[0] >>> 16),","\t                K[3], (K[2] << 16) | (K[1] >>> 16)","\t            ];","","\t            // Generate initial counter values","\t            var C = this._C = [","\t                (K[2] << 16) | (K[2] >>> 16), (K[0] & 0xffff0000) | (K[1] & 0x0000ffff),","\t                (K[3] << 16) | (K[3] >>> 16), (K[1] & 0xffff0000) | (K[2] & 0x0000ffff),","\t                (K[0] << 16) | (K[0] >>> 16), (K[2] & 0xffff0000) | (K[3] & 0x0000ffff),","\t                (K[1] << 16) | (K[1] >>> 16), (K[3] & 0xffff0000) | (K[0] & 0x0000ffff)","\t            ];","","\t            // Carry bit","\t            this._b = 0;","","\t            // Iterate the system four times","\t            for (var i = 0; i < 4; i++) {","\t                nextState.call(this);","\t            }","","\t            // Modify the counters","\t            for (var i = 0; i < 8; i++) {","\t                C[i] ^= X[(i + 4) & 7];","\t            }","","\t            // IV setup","\t            if (iv) {","\t                // Shortcuts","\t                var IV = iv.words;","\t                var IV_0 = IV[0];","\t                var IV_1 = IV[1];","","\t                // Generate four subvectors","\t                var i0 = (((IV_0 << 8) | (IV_0 >>> 24)) & 0x00ff00ff) | (((IV_0 << 24) | (IV_0 >>> 8)) & 0xff00ff00);","\t                var i2 = (((IV_1 << 8) | (IV_1 >>> 24)) & 0x00ff00ff) | (((IV_1 << 24) | (IV_1 >>> 8)) & 0xff00ff00);","\t                var i1 = (i0 >>> 16) | (i2 & 0xffff0000);","\t                var i3 = (i2 << 16)  | (i0 & 0x0000ffff);","","\t                // Modify counter values","\t                C[0] ^= i0;","\t                C[1] ^= i1;","\t                C[2] ^= i2;","\t                C[3] ^= i3;","\t                C[4] ^= i0;","\t                C[5] ^= i1;","\t                C[6] ^= i2;","\t                C[7] ^= i3;","","\t                // Iterate the system four times","\t                for (var i = 0; i < 4; i++) {","\t                    nextState.call(this);","\t                }","\t            }","\t        },","","\t        _doProcessBlock: function (M, offset) {","\t            // Shortcut","\t            var X = this._X;","","\t            // Iterate the system","\t            nextState.call(this);","","\t            // Generate four keystream words","\t            S[0] = X[0] ^ (X[5] >>> 16) ^ (X[3] << 16);","\t            S[1] = X[2] ^ (X[7] >>> 16) ^ (X[5] << 16);","\t            S[2] = X[4] ^ (X[1] >>> 16) ^ (X[7] << 16);","\t            S[3] = X[6] ^ (X[3] >>> 16) ^ (X[1] << 16);","","\t            for (var i = 0; i < 4; i++) {","\t                // Swap endian","\t                S[i] = (((S[i] << 8)  | (S[i] >>> 24)) & 0x00ff00ff) |","\t                       (((S[i] << 24) | (S[i] >>> 8))  & 0xff00ff00);","","\t                // Encrypt","\t                M[offset + i] ^= S[i];","\t            }","\t        },","","\t        blockSize: 128/32,","","\t        ivSize: 64/32","\t    });","","\t    function nextState() {","\t        // Shortcuts","\t        var X = this._X;","\t        var C = this._C;","","\t        // Save old counter values","\t        for (var i = 0; i < 8; i++) {","\t            C_[i] = C[i];","\t        }","","\t        // Calculate new counter values","\t        C[0] = (C[0] + 0x4d34d34d + this._b) | 0;","\t        C[1] = (C[1] + 0xd34d34d3 + ((C[0] >>> 0) < (C_[0] >>> 0) ? 1 : 0)) | 0;","\t        C[2] = (C[2] + 0x34d34d34 + ((C[1] >>> 0) < (C_[1] >>> 0) ? 1 : 0)) | 0;","\t        C[3] = (C[3] + 0x4d34d34d + ((C[2] >>> 0) < (C_[2] >>> 0) ? 1 : 0)) | 0;","\t        C[4] = (C[4] + 0xd34d34d3 + ((C[3] >>> 0) < (C_[3] >>> 0) ? 1 : 0)) | 0;","\t        C[5] = (C[5] + 0x34d34d34 + ((C[4] >>> 0) < (C_[4] >>> 0) ? 1 : 0)) | 0;","\t        C[6] = (C[6] + 0x4d34d34d + ((C[5] >>> 0) < (C_[5] >>> 0) ? 1 : 0)) | 0;","\t        C[7] = (C[7] + 0xd34d34d3 + ((C[6] >>> 0) < (C_[6] >>> 0) ? 1 : 0)) | 0;","\t        this._b = (C[7] >>> 0) < (C_[7] >>> 0) ? 1 : 0;","","\t        // Calculate the g-values","\t        for (var i = 0; i < 8; i++) {","\t            var gx = X[i] + C[i];","","\t            // Construct high and low argument for squaring","\t            var ga = gx & 0xffff;","\t            var gb = gx >>> 16;","","\t            // Calculate high and low result of squaring","\t            var gh = ((((ga * ga) >>> 17) + ga * gb) >>> 15) + gb * gb;","\t            var gl = (((gx & 0xffff0000) * gx) | 0) + (((gx & 0x0000ffff) * gx) | 0);","","\t            // High XOR low","\t            G[i] = gh ^ gl;","\t        }","","\t        // Calculate new state values","\t        X[0] = (G[0] + ((G[7] << 16) | (G[7] >>> 16)) + ((G[6] << 16) | (G[6] >>> 16))) | 0;","\t        X[1] = (G[1] + ((G[0] << 8)  | (G[0] >>> 24)) + G[7]) | 0;","\t        X[2] = (G[2] + ((G[1] << 16) | (G[1] >>> 16)) + ((G[0] << 16) | (G[0] >>> 16))) | 0;","\t        X[3] = (G[3] + ((G[2] << 8)  | (G[2] >>> 24)) + G[1]) | 0;","\t        X[4] = (G[4] + ((G[3] << 16) | (G[3] >>> 16)) + ((G[2] << 16) | (G[2] >>> 16))) | 0;","\t        X[5] = (G[5] + ((G[4] << 8)  | (G[4] >>> 24)) + G[3]) | 0;","\t        X[6] = (G[6] + ((G[5] << 16) | (G[5] >>> 16)) + ((G[4] << 16) | (G[4] >>> 16))) | 0;","\t        X[7] = (G[7] + ((G[6] << 8)  | (G[6] >>> 24)) + G[5]) | 0;","\t    }","","\t    /**","\t     * Shortcut functions to the cipher's object interface.","\t     *","\t     * @example","\t     *","\t     *     var ciphertext = CryptoJS.Rabbit.encrypt(message, key, cfg);","\t     *     var plaintext  = CryptoJS.Rabbit.decrypt(ciphertext, key, cfg);","\t     */","\t    C.Rabbit = StreamCipher._createHelper(Rabbit);","\t}());","","","\treturn CryptoJS.Rabbit;","","}));","},{\"./cipher-core\":50,\"./core\":51,\"./enc-base64\":52,\"./evpkdf\":54,\"./md5\":59}],73:[function(require,module,exports){",";(function (root, factory, undef) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t(function () {","\t    // Shortcuts","\t    var C = CryptoJS;","\t    var C_lib = C.lib;","\t    var StreamCipher = C_lib.StreamCipher;","\t    var C_algo = C.algo;","","\t    /**","\t     * RC4 stream cipher algorithm.","\t     */","\t    var RC4 = C_algo.RC4 = StreamCipher.extend({","\t        _doReset: function () {","\t            // Shortcuts","\t            var key = this._key;","\t            var keyWords = key.words;","\t            var keySigBytes = key.sigBytes;","","\t            // Init sbox","\t            var S = this._S = [];","\t            for (var i = 0; i < 256; i++) {","\t                S[i] = i;","\t            }","","\t            // Key setup","\t            for (var i = 0, j = 0; i < 256; i++) {","\t                var keyByteIndex = i % keySigBytes;","\t                var keyByte = (keyWords[keyByteIndex >>> 2] >>> (24 - (keyByteIndex % 4) * 8)) & 0xff;","","\t                j = (j + S[i] + keyByte) % 256;","","\t                // Swap","\t                var t = S[i];","\t                S[i] = S[j];","\t                S[j] = t;","\t            }","","\t            // Counters","\t            this._i = this._j = 0;","\t        },","","\t        _doProcessBlock: function (M, offset) {","\t            M[offset] ^= generateKeystreamWord.call(this);","\t        },","","\t        keySize: 256/32,","","\t        ivSize: 0","\t    });","","\t    function generateKeystreamWord() {","\t        // Shortcuts","\t        var S = this._S;","\t        var i = this._i;","\t        var j = this._j;","","\t        // Generate keystream word","\t        var keystreamWord = 0;","\t        for (var n = 0; n < 4; n++) {","\t            i = (i + 1) % 256;","\t            j = (j + S[i]) % 256;","","\t            // Swap","\t            var t = S[i];","\t            S[i] = S[j];","\t            S[j] = t;","","\t            keystreamWord |= S[(S[i] + S[j]) % 256] << (24 - n * 8);","\t        }","","\t        // Update counters","\t        this._i = i;","\t        this._j = j;","","\t        return keystreamWord;","\t    }","","\t    /**","\t     * Shortcut functions to the cipher's object interface.","\t     *","\t     * @example","\t     *","\t     *     var ciphertext = CryptoJS.RC4.encrypt(message, key, cfg);","\t     *     var plaintext  = CryptoJS.RC4.decrypt(ciphertext, key, cfg);","\t     */","\t    C.RC4 = StreamCipher._createHelper(RC4);","","\t    /**","\t     * Modified RC4 stream cipher algorithm.","\t     */","\t    var RC4Drop = C_algo.RC4Drop = RC4.extend({","\t        /**","\t         * Configuration options.","\t         *","\t         * @property {number} drop The number of keystream words to drop. Default 192","\t         */","\t        cfg: RC4.cfg.extend({","\t            drop: 192","\t        }),","","\t        _doReset: function () {","\t            RC4._doReset.call(this);","","\t            // Drop","\t            for (var i = this.cfg.drop; i > 0; i--) {","\t                generateKeystreamWord.call(this);","\t            }","\t        }","\t    });","","\t    /**","\t     * Shortcut functions to the cipher's object interface.","\t     *","\t     * @example","\t     *","\t     *     var ciphertext = CryptoJS.RC4Drop.encrypt(message, key, cfg);","\t     *     var plaintext  = CryptoJS.RC4Drop.decrypt(ciphertext, key, cfg);","\t     */","\t    C.RC4Drop = StreamCipher._createHelper(RC4Drop);","\t}());","","","\treturn CryptoJS.RC4;","","}));","},{\"./cipher-core\":50,\"./core\":51,\"./enc-base64\":52,\"./evpkdf\":54,\"./md5\":59}],74:[function(require,module,exports){",";(function (root, factory) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t/** @preserve","\t(c) 2012 by Cédric Mesnil. All rights reserved.","","\tRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:","","\t    - Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.","\t    - Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.","","\tTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","\t*/","","\t(function (Math) {","\t    // Shortcuts","\t    var C = CryptoJS;","\t    var C_lib = C.lib;","\t    var WordArray = C_lib.WordArray;","\t    var Hasher = C_lib.Hasher;","\t    var C_algo = C.algo;","","\t    // Constants table","\t    var _zl = WordArray.create([","\t        0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14, 15,","\t        7,  4, 13,  1, 10,  6, 15,  3, 12,  0,  9,  5,  2, 14, 11,  8,","\t        3, 10, 14,  4,  9, 15,  8,  1,  2,  7,  0,  6, 13, 11,  5, 12,","\t        1,  9, 11, 10,  0,  8, 12,  4, 13,  3,  7, 15, 14,  5,  6,  2,","\t        4,  0,  5,  9,  7, 12,  2, 10, 14,  1,  3,  8, 11,  6, 15, 13]);","\t    var _zr = WordArray.create([","\t        5, 14,  7,  0,  9,  2, 11,  4, 13,  6, 15,  8,  1, 10,  3, 12,","\t        6, 11,  3,  7,  0, 13,  5, 10, 14, 15,  8, 12,  4,  9,  1,  2,","\t        15,  5,  1,  3,  7, 14,  6,  9, 11,  8, 12,  2, 10,  0,  4, 13,","\t        8,  6,  4,  1,  3, 11, 15,  0,  5, 12,  2, 13,  9,  7, 10, 14,","\t        12, 15, 10,  4,  1,  5,  8,  7,  6,  2, 13, 14,  0,  3,  9, 11]);","\t    var _sl = WordArray.create([","\t         11, 14, 15, 12,  5,  8,  7,  9, 11, 13, 14, 15,  6,  7,  9,  8,","\t        7, 6,   8, 13, 11,  9,  7, 15,  7, 12, 15,  9, 11,  7, 13, 12,","\t        11, 13,  6,  7, 14,  9, 13, 15, 14,  8, 13,  6,  5, 12,  7,  5,","\t          11, 12, 14, 15, 14, 15,  9,  8,  9, 14,  5,  6,  8,  6,  5, 12,","\t        9, 15,  5, 11,  6,  8, 13, 12,  5, 12, 13, 14, 11,  8,  5,  6 ]);","\t    var _sr = WordArray.create([","\t        8,  9,  9, 11, 13, 15, 15,  5,  7,  7,  8, 11, 14, 14, 12,  6,","\t        9, 13, 15,  7, 12,  8,  9, 11,  7,  7, 12,  7,  6, 15, 13, 11,","\t        9,  7, 15, 11,  8,  6,  6, 14, 12, 13,  5, 14, 13, 13,  7,  5,","\t        15,  5,  8, 11, 14, 14,  6, 14,  6,  9, 12,  9, 12,  5, 15,  8,","\t        8,  5, 12,  9, 12,  5, 14,  6,  8, 13,  6,  5, 15, 13, 11, 11 ]);","","\t    var _hl =  WordArray.create([ 0x00000000, 0x5A827999, 0x6ED9EBA1, 0x8F1BBCDC, 0xA953FD4E]);","\t    var _hr =  WordArray.create([ 0x50A28BE6, 0x5C4DD124, 0x6D703EF3, 0x7A6D76E9, 0x00000000]);","","\t    /**","\t     * RIPEMD160 hash algorithm.","\t     */","\t    var RIPEMD160 = C_algo.RIPEMD160 = Hasher.extend({","\t        _doReset: function () {","\t            this._hash  = WordArray.create([0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476, 0xC3D2E1F0]);","\t        },","","\t        _doProcessBlock: function (M, offset) {","","\t            // Swap endian","\t            for (var i = 0; i < 16; i++) {","\t                // Shortcuts","\t                var offset_i = offset + i;","\t                var M_offset_i = M[offset_i];","","\t                // Swap","\t                M[offset_i] = (","\t                    (((M_offset_i << 8)  | (M_offset_i >>> 24)) & 0x00ff00ff) |","\t                    (((M_offset_i << 24) | (M_offset_i >>> 8))  & 0xff00ff00)","\t                );","\t            }","\t            // Shortcut","\t            var H  = this._hash.words;","\t            var hl = _hl.words;","\t            var hr = _hr.words;","\t            var zl = _zl.words;","\t            var zr = _zr.words;","\t            var sl = _sl.words;","\t            var sr = _sr.words;","","\t            // Working variables","\t            var al, bl, cl, dl, el;","\t            var ar, br, cr, dr, er;","","\t            ar = al = H[0];","\t            br = bl = H[1];","\t            cr = cl = H[2];","\t            dr = dl = H[3];","\t            er = el = H[4];","\t            // Computation","\t            var t;","\t            for (var i = 0; i < 80; i += 1) {","\t                t = (al +  M[offset+zl[i]])|0;","\t                if (i<16){","\t\t            t +=  f1(bl,cl,dl) + hl[0];","\t                } else if (i<32) {","\t\t            t +=  f2(bl,cl,dl) + hl[1];","\t                } else if (i<48) {","\t\t            t +=  f3(bl,cl,dl) + hl[2];","\t                } else if (i<64) {","\t\t            t +=  f4(bl,cl,dl) + hl[3];","\t                } else {// if (i<80) {","\t\t            t +=  f5(bl,cl,dl) + hl[4];","\t                }","\t                t = t|0;","\t                t =  rotl(t,sl[i]);","\t                t = (t+el)|0;","\t                al = el;","\t                el = dl;","\t                dl = rotl(cl, 10);","\t                cl = bl;","\t                bl = t;","","\t                t = (ar + M[offset+zr[i]])|0;","\t                if (i<16){","\t\t            t +=  f5(br,cr,dr) + hr[0];","\t                } else if (i<32) {","\t\t            t +=  f4(br,cr,dr) + hr[1];","\t                } else if (i<48) {","\t\t            t +=  f3(br,cr,dr) + hr[2];","\t                } else if (i<64) {","\t\t            t +=  f2(br,cr,dr) + hr[3];","\t                } else {// if (i<80) {","\t\t            t +=  f1(br,cr,dr) + hr[4];","\t                }","\t                t = t|0;","\t                t =  rotl(t,sr[i]) ;","\t                t = (t+er)|0;","\t                ar = er;","\t                er = dr;","\t                dr = rotl(cr, 10);","\t                cr = br;","\t                br = t;","\t            }","\t            // Intermediate hash value","\t            t    = (H[1] + cl + dr)|0;","\t            H[1] = (H[2] + dl + er)|0;","\t            H[2] = (H[3] + el + ar)|0;","\t            H[3] = (H[4] + al + br)|0;","\t            H[4] = (H[0] + bl + cr)|0;","\t            H[0] =  t;","\t        },","","\t        _doFinalize: function () {","\t            // Shortcuts","\t            var data = this._data;","\t            var dataWords = data.words;","","\t            var nBitsTotal = this._nDataBytes * 8;","\t            var nBitsLeft = data.sigBytes * 8;","","\t            // Add padding","\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);","\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = (","\t                (((nBitsTotal << 8)  | (nBitsTotal >>> 24)) & 0x00ff00ff) |","\t                (((nBitsTotal << 24) | (nBitsTotal >>> 8))  & 0xff00ff00)","\t            );","\t            data.sigBytes = (dataWords.length + 1) * 4;","","\t            // Hash final blocks","\t            this._process();","","\t            // Shortcuts","\t            var hash = this._hash;","\t            var H = hash.words;","","\t            // Swap endian","\t            for (var i = 0; i < 5; i++) {","\t                // Shortcut","\t                var H_i = H[i];","","\t                // Swap","\t                H[i] = (((H_i << 8)  | (H_i >>> 24)) & 0x00ff00ff) |","\t                       (((H_i << 24) | (H_i >>> 8))  & 0xff00ff00);","\t            }","","\t            // Return final computed hash","\t            return hash;","\t        },","","\t        clone: function () {","\t            var clone = Hasher.clone.call(this);","\t            clone._hash = this._hash.clone();","","\t            return clone;","\t        }","\t    });","","","\t    function f1(x, y, z) {","\t        return ((x) ^ (y) ^ (z));","","\t    }","","\t    function f2(x, y, z) {","\t        return (((x)&(y)) | ((~x)&(z)));","\t    }","","\t    function f3(x, y, z) {","\t        return (((x) | (~(y))) ^ (z));","\t    }","","\t    function f4(x, y, z) {","\t        return (((x) & (z)) | ((y)&(~(z))));","\t    }","","\t    function f5(x, y, z) {","\t        return ((x) ^ ((y) |(~(z))));","","\t    }","","\t    function rotl(x,n) {","\t        return (x<<n) | (x>>>(32-n));","\t    }","","","\t    /**","\t     * Shortcut function to the hasher's object interface.","\t     *","\t     * @param {WordArray|string} message The message to hash.","\t     *","\t     * @return {WordArray} The hash.","\t     *","\t     * @static","\t     *","\t     * @example","\t     *","\t     *     var hash = CryptoJS.RIPEMD160('message');","\t     *     var hash = CryptoJS.RIPEMD160(wordArray);","\t     */","\t    C.RIPEMD160 = Hasher._createHelper(RIPEMD160);","","\t    /**","\t     * Shortcut function to the HMAC's object interface.","\t     *","\t     * @param {WordArray|string} message The message to hash.","\t     * @param {WordArray|string} key The secret key.","\t     *","\t     * @return {WordArray} The HMAC.","\t     *","\t     * @static","\t     *","\t     * @example","\t     *","\t     *     var hmac = CryptoJS.HmacRIPEMD160(message, key);","\t     */","\t    C.HmacRIPEMD160 = Hasher._createHmacHelper(RIPEMD160);","\t}(Math));","","","\treturn CryptoJS.RIPEMD160;","","}));","},{\"./core\":51}],75:[function(require,module,exports){",";(function (root, factory) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t(function () {","\t    // Shortcuts","\t    var C = CryptoJS;","\t    var C_lib = C.lib;","\t    var WordArray = C_lib.WordArray;","\t    var Hasher = C_lib.Hasher;","\t    var C_algo = C.algo;","","\t    // Reusable object","\t    var W = [];","","\t    /**","\t     * SHA-1 hash algorithm.","\t     */","\t    var SHA1 = C_algo.SHA1 = Hasher.extend({","\t        _doReset: function () {","\t            this._hash = new WordArray.init([","\t                0x67452301, 0xefcdab89,","\t                0x98badcfe, 0x10325476,","\t                0xc3d2e1f0","\t            ]);","\t        },","","\t        _doProcessBlock: function (M, offset) {","\t            // Shortcut","\t            var H = this._hash.words;","","\t            // Working variables","\t            var a = H[0];","\t            var b = H[1];","\t            var c = H[2];","\t            var d = H[3];","\t            var e = H[4];","","\t            // Computation","\t            for (var i = 0; i < 80; i++) {","\t                if (i < 16) {","\t                    W[i] = M[offset + i] | 0;","\t                } else {","\t                    var n = W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16];","\t                    W[i] = (n << 1) | (n >>> 31);","\t                }","","\t                var t = ((a << 5) | (a >>> 27)) + e + W[i];","\t                if (i < 20) {","\t                    t += ((b & c) | (~b & d)) + 0x5a827999;","\t                } else if (i < 40) {","\t                    t += (b ^ c ^ d) + 0x6ed9eba1;","\t                } else if (i < 60) {","\t                    t += ((b & c) | (b & d) | (c & d)) - 0x70e44324;","\t                } else /* if (i < 80) */ {","\t                    t += (b ^ c ^ d) - 0x359d3e2a;","\t                }","","\t                e = d;","\t                d = c;","\t                c = (b << 30) | (b >>> 2);","\t                b = a;","\t                a = t;","\t            }","","\t            // Intermediate hash value","\t            H[0] = (H[0] + a) | 0;","\t            H[1] = (H[1] + b) | 0;","\t            H[2] = (H[2] + c) | 0;","\t            H[3] = (H[3] + d) | 0;","\t            H[4] = (H[4] + e) | 0;","\t        },","","\t        _doFinalize: function () {","\t            // Shortcuts","\t            var data = this._data;","\t            var dataWords = data.words;","","\t            var nBitsTotal = this._nDataBytes * 8;","\t            var nBitsLeft = data.sigBytes * 8;","","\t            // Add padding","\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);","\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);","\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;","\t            data.sigBytes = dataWords.length * 4;","","\t            // Hash final blocks","\t            this._process();","","\t            // Return final computed hash","\t            return this._hash;","\t        },","","\t        clone: function () {","\t            var clone = Hasher.clone.call(this);","\t            clone._hash = this._hash.clone();","","\t            return clone;","\t        }","\t    });","","\t    /**","\t     * Shortcut function to the hasher's object interface.","\t     *","\t     * @param {WordArray|string} message The message to hash.","\t     *","\t     * @return {WordArray} The hash.","\t     *","\t     * @static","\t     *","\t     * @example","\t     *","\t     *     var hash = CryptoJS.SHA1('message');","\t     *     var hash = CryptoJS.SHA1(wordArray);","\t     */","\t    C.SHA1 = Hasher._createHelper(SHA1);","","\t    /**","\t     * Shortcut function to the HMAC's object interface.","\t     *","\t     * @param {WordArray|string} message The message to hash.","\t     * @param {WordArray|string} key The secret key.","\t     *","\t     * @return {WordArray} The HMAC.","\t     *","\t     * @static","\t     *","\t     * @example","\t     *","\t     *     var hmac = CryptoJS.HmacSHA1(message, key);","\t     */","\t    C.HmacSHA1 = Hasher._createHmacHelper(SHA1);","\t}());","","","\treturn CryptoJS.SHA1;","","}));","},{\"./core\":51}],76:[function(require,module,exports){",";(function (root, factory, undef) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./sha256\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\", \"./sha256\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t(function () {","\t    // Shortcuts","\t    var C = CryptoJS;","\t    var C_lib = C.lib;","\t    var WordArray = C_lib.WordArray;","\t    var C_algo = C.algo;","\t    var SHA256 = C_algo.SHA256;","","\t    /**","\t     * SHA-224 hash algorithm.","\t     */","\t    var SHA224 = C_algo.SHA224 = SHA256.extend({","\t        _doReset: function () {","\t            this._hash = new WordArray.init([","\t                0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939,","\t                0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4","\t            ]);","\t        },","","\t        _doFinalize: function () {","\t            var hash = SHA256._doFinalize.call(this);","","\t            hash.sigBytes -= 4;","","\t            return hash;","\t        }","\t    });","","\t    /**","\t     * Shortcut function to the hasher's object interface.","\t     *","\t     * @param {WordArray|string} message The message to hash.","\t     *","\t     * @return {WordArray} The hash.","\t     *","\t     * @static","\t     *","\t     * @example","\t     *","\t     *     var hash = CryptoJS.SHA224('message');","\t     *     var hash = CryptoJS.SHA224(wordArray);","\t     */","\t    C.SHA224 = SHA256._createHelper(SHA224);","","\t    /**","\t     * Shortcut function to the HMAC's object interface.","\t     *","\t     * @param {WordArray|string} message The message to hash.","\t     * @param {WordArray|string} key The secret key.","\t     *","\t     * @return {WordArray} The HMAC.","\t     *","\t     * @static","\t     *","\t     * @example","\t     *","\t     *     var hmac = CryptoJS.HmacSHA224(message, key);","\t     */","\t    C.HmacSHA224 = SHA256._createHmacHelper(SHA224);","\t}());","","","\treturn CryptoJS.SHA224;","","}));","},{\"./core\":51,\"./sha256\":77}],77:[function(require,module,exports){",";(function (root, factory) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t(function (Math) {","\t    // Shortcuts","\t    var C = CryptoJS;","\t    var C_lib = C.lib;","\t    var WordArray = C_lib.WordArray;","\t    var Hasher = C_lib.Hasher;","\t    var C_algo = C.algo;","","\t    // Initialization and round constants tables","\t    var H = [];","\t    var K = [];","","\t    // Compute constants","\t    (function () {","\t        function isPrime(n) {","\t            var sqrtN = Math.sqrt(n);","\t            for (var factor = 2; factor <= sqrtN; factor++) {","\t                if (!(n % factor)) {","\t                    return false;","\t                }","\t            }","","\t            return true;","\t        }","","\t        function getFractionalBits(n) {","\t            return ((n - (n | 0)) * 0x100000000) | 0;","\t        }","","\t        var n = 2;","\t        var nPrime = 0;","\t        while (nPrime < 64) {","\t            if (isPrime(n)) {","\t                if (nPrime < 8) {","\t                    H[nPrime] = getFractionalBits(Math.pow(n, 1 / 2));","\t                }","\t                K[nPrime] = getFractionalBits(Math.pow(n, 1 / 3));","","\t                nPrime++;","\t            }","","\t            n++;","\t        }","\t    }());","","\t    // Reusable object","\t    var W = [];","","\t    /**","\t     * SHA-256 hash algorithm.","\t     */","\t    var SHA256 = C_algo.SHA256 = Hasher.extend({","\t        _doReset: function () {","\t            this._hash = new WordArray.init(H.slice(0));","\t        },","","\t        _doProcessBlock: function (M, offset) {","\t            // Shortcut","\t            var H = this._hash.words;","","\t            // Working variables","\t            var a = H[0];","\t            var b = H[1];","\t            var c = H[2];","\t            var d = H[3];","\t            var e = H[4];","\t            var f = H[5];","\t            var g = H[6];","\t            var h = H[7];","","\t            // Computation","\t            for (var i = 0; i < 64; i++) {","\t                if (i < 16) {","\t                    W[i] = M[offset + i] | 0;","\t                } else {","\t                    var gamma0x = W[i - 15];","\t                    var gamma0  = ((gamma0x << 25) | (gamma0x >>> 7))  ^","\t                                  ((gamma0x << 14) | (gamma0x >>> 18)) ^","\t                                   (gamma0x >>> 3);","","\t                    var gamma1x = W[i - 2];","\t                    var gamma1  = ((gamma1x << 15) | (gamma1x >>> 17)) ^","\t                                  ((gamma1x << 13) | (gamma1x >>> 19)) ^","\t                                   (gamma1x >>> 10);","","\t                    W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16];","\t                }","","\t                var ch  = (e & f) ^ (~e & g);","\t                var maj = (a & b) ^ (a & c) ^ (b & c);","","\t                var sigma0 = ((a << 30) | (a >>> 2)) ^ ((a << 19) | (a >>> 13)) ^ ((a << 10) | (a >>> 22));","\t                var sigma1 = ((e << 26) | (e >>> 6)) ^ ((e << 21) | (e >>> 11)) ^ ((e << 7)  | (e >>> 25));","","\t                var t1 = h + sigma1 + ch + K[i] + W[i];","\t                var t2 = sigma0 + maj;","","\t                h = g;","\t                g = f;","\t                f = e;","\t                e = (d + t1) | 0;","\t                d = c;","\t                c = b;","\t                b = a;","\t                a = (t1 + t2) | 0;","\t            }","","\t            // Intermediate hash value","\t            H[0] = (H[0] + a) | 0;","\t            H[1] = (H[1] + b) | 0;","\t            H[2] = (H[2] + c) | 0;","\t            H[3] = (H[3] + d) | 0;","\t            H[4] = (H[4] + e) | 0;","\t            H[5] = (H[5] + f) | 0;","\t            H[6] = (H[6] + g) | 0;","\t            H[7] = (H[7] + h) | 0;","\t        },","","\t        _doFinalize: function () {","\t            // Shortcuts","\t            var data = this._data;","\t            var dataWords = data.words;","","\t            var nBitsTotal = this._nDataBytes * 8;","\t            var nBitsLeft = data.sigBytes * 8;","","\t            // Add padding","\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);","\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 14] = Math.floor(nBitsTotal / 0x100000000);","\t            dataWords[(((nBitsLeft + 64) >>> 9) << 4) + 15] = nBitsTotal;","\t            data.sigBytes = dataWords.length * 4;","","\t            // Hash final blocks","\t            this._process();","","\t            // Return final computed hash","\t            return this._hash;","\t        },","","\t        clone: function () {","\t            var clone = Hasher.clone.call(this);","\t            clone._hash = this._hash.clone();","","\t            return clone;","\t        }","\t    });","","\t    /**","\t     * Shortcut function to the hasher's object interface.","\t     *","\t     * @param {WordArray|string} message The message to hash.","\t     *","\t     * @return {WordArray} The hash.","\t     *","\t     * @static","\t     *","\t     * @example","\t     *","\t     *     var hash = CryptoJS.SHA256('message');","\t     *     var hash = CryptoJS.SHA256(wordArray);","\t     */","\t    C.SHA256 = Hasher._createHelper(SHA256);","","\t    /**","\t     * Shortcut function to the HMAC's object interface.","\t     *","\t     * @param {WordArray|string} message The message to hash.","\t     * @param {WordArray|string} key The secret key.","\t     *","\t     * @return {WordArray} The HMAC.","\t     *","\t     * @static","\t     *","\t     * @example","\t     *","\t     *     var hmac = CryptoJS.HmacSHA256(message, key);","\t     */","\t    C.HmacSHA256 = Hasher._createHmacHelper(SHA256);","\t}(Math));","","","\treturn CryptoJS.SHA256;","","}));","},{\"./core\":51}],78:[function(require,module,exports){",";(function (root, factory, undef) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\", \"./x64-core\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t(function (Math) {","\t    // Shortcuts","\t    var C = CryptoJS;","\t    var C_lib = C.lib;","\t    var WordArray = C_lib.WordArray;","\t    var Hasher = C_lib.Hasher;","\t    var C_x64 = C.x64;","\t    var X64Word = C_x64.Word;","\t    var C_algo = C.algo;","","\t    // Constants tables","\t    var RHO_OFFSETS = [];","\t    var PI_INDEXES  = [];","\t    var ROUND_CONSTANTS = [];","","\t    // Compute Constants","\t    (function () {","\t        // Compute rho offset constants","\t        var x = 1, y = 0;","\t        for (var t = 0; t < 24; t++) {","\t            RHO_OFFSETS[x + 5 * y] = ((t + 1) * (t + 2) / 2) % 64;","","\t            var newX = y % 5;","\t            var newY = (2 * x + 3 * y) % 5;","\t            x = newX;","\t            y = newY;","\t        }","","\t        // Compute pi index constants","\t        for (var x = 0; x < 5; x++) {","\t            for (var y = 0; y < 5; y++) {","\t                PI_INDEXES[x + 5 * y] = y + ((2 * x + 3 * y) % 5) * 5;","\t            }","\t        }","","\t        // Compute round constants","\t        var LFSR = 0x01;","\t        for (var i = 0; i < 24; i++) {","\t            var roundConstantMsw = 0;","\t            var roundConstantLsw = 0;","","\t            for (var j = 0; j < 7; j++) {","\t                if (LFSR & 0x01) {","\t                    var bitPosition = (1 << j) - 1;","\t                    if (bitPosition < 32) {","\t                        roundConstantLsw ^= 1 << bitPosition;","\t                    } else /* if (bitPosition >= 32) */ {","\t                        roundConstantMsw ^= 1 << (bitPosition - 32);","\t                    }","\t                }","","\t                // Compute next LFSR","\t                if (LFSR & 0x80) {","\t                    // Primitive polynomial over GF(2): x^8 + x^6 + x^5 + x^4 + 1","\t                    LFSR = (LFSR << 1) ^ 0x71;","\t                } else {","\t                    LFSR <<= 1;","\t                }","\t            }","","\t            ROUND_CONSTANTS[i] = X64Word.create(roundConstantMsw, roundConstantLsw);","\t        }","\t    }());","","\t    // Reusable objects for temporary values","\t    var T = [];","\t    (function () {","\t        for (var i = 0; i < 25; i++) {","\t            T[i] = X64Word.create();","\t        }","\t    }());","","\t    /**","\t     * SHA-3 hash algorithm.","\t     */","\t    var SHA3 = C_algo.SHA3 = Hasher.extend({","\t        /**","\t         * Configuration options.","\t         *","\t         * @property {number} outputLength","\t         *   The desired number of bits in the output hash.","\t         *   Only values permitted are: 224, 256, 384, 512.","\t         *   Default: 512","\t         */","\t        cfg: Hasher.cfg.extend({","\t            outputLength: 512","\t        }),","","\t        _doReset: function () {","\t            var state = this._state = []","\t            for (var i = 0; i < 25; i++) {","\t                state[i] = new X64Word.init();","\t            }","","\t            this.blockSize = (1600 - 2 * this.cfg.outputLength) / 32;","\t        },","","\t        _doProcessBlock: function (M, offset) {","\t            // Shortcuts","\t            var state = this._state;","\t            var nBlockSizeLanes = this.blockSize / 2;","","\t            // Absorb","\t            for (var i = 0; i < nBlockSizeLanes; i++) {","\t                // Shortcuts","\t                var M2i  = M[offset + 2 * i];","\t                var M2i1 = M[offset + 2 * i + 1];","","\t                // Swap endian","\t                M2i = (","\t                    (((M2i << 8)  | (M2i >>> 24)) & 0x00ff00ff) |","\t                    (((M2i << 24) | (M2i >>> 8))  & 0xff00ff00)","\t                );","\t                M2i1 = (","\t                    (((M2i1 << 8)  | (M2i1 >>> 24)) & 0x00ff00ff) |","\t                    (((M2i1 << 24) | (M2i1 >>> 8))  & 0xff00ff00)","\t                );","","\t                // Absorb message into state","\t                var lane = state[i];","\t                lane.high ^= M2i1;","\t                lane.low  ^= M2i;","\t            }","","\t            // Rounds","\t            for (var round = 0; round < 24; round++) {","\t                // Theta","\t                for (var x = 0; x < 5; x++) {","\t                    // Mix column lanes","\t                    var tMsw = 0, tLsw = 0;","\t                    for (var y = 0; y < 5; y++) {","\t                        var lane = state[x + 5 * y];","\t                        tMsw ^= lane.high;","\t                        tLsw ^= lane.low;","\t                    }","","\t                    // Temporary values","\t                    var Tx = T[x];","\t                    Tx.high = tMsw;","\t                    Tx.low  = tLsw;","\t                }","\t                for (var x = 0; x < 5; x++) {","\t                    // Shortcuts","\t                    var Tx4 = T[(x + 4) % 5];","\t                    var Tx1 = T[(x + 1) % 5];","\t                    var Tx1Msw = Tx1.high;","\t                    var Tx1Lsw = Tx1.low;","","\t                    // Mix surrounding columns","\t                    var tMsw = Tx4.high ^ ((Tx1Msw << 1) | (Tx1Lsw >>> 31));","\t                    var tLsw = Tx4.low  ^ ((Tx1Lsw << 1) | (Tx1Msw >>> 31));","\t                    for (var y = 0; y < 5; y++) {","\t                        var lane = state[x + 5 * y];","\t                        lane.high ^= tMsw;","\t                        lane.low  ^= tLsw;","\t                    }","\t                }","","\t                // Rho Pi","\t                for (var laneIndex = 1; laneIndex < 25; laneIndex++) {","\t                    // Shortcuts","\t                    var lane = state[laneIndex];","\t                    var laneMsw = lane.high;","\t                    var laneLsw = lane.low;","\t                    var rhoOffset = RHO_OFFSETS[laneIndex];","","\t                    // Rotate lanes","\t                    if (rhoOffset < 32) {","\t                        var tMsw = (laneMsw << rhoOffset) | (laneLsw >>> (32 - rhoOffset));","\t                        var tLsw = (laneLsw << rhoOffset) | (laneMsw >>> (32 - rhoOffset));","\t                    } else /* if (rhoOffset >= 32) */ {","\t                        var tMsw = (laneLsw << (rhoOffset - 32)) | (laneMsw >>> (64 - rhoOffset));","\t                        var tLsw = (laneMsw << (rhoOffset - 32)) | (laneLsw >>> (64 - rhoOffset));","\t                    }","","\t                    // Transpose lanes","\t                    var TPiLane = T[PI_INDEXES[laneIndex]];","\t                    TPiLane.high = tMsw;","\t                    TPiLane.low  = tLsw;","\t                }","","\t                // Rho pi at x = y = 0","\t                var T0 = T[0];","\t                var state0 = state[0];","\t                T0.high = state0.high;","\t                T0.low  = state0.low;","","\t                // Chi","\t                for (var x = 0; x < 5; x++) {","\t                    for (var y = 0; y < 5; y++) {","\t                        // Shortcuts","\t                        var laneIndex = x + 5 * y;","\t                        var lane = state[laneIndex];","\t                        var TLane = T[laneIndex];","\t                        var Tx1Lane = T[((x + 1) % 5) + 5 * y];","\t                        var Tx2Lane = T[((x + 2) % 5) + 5 * y];","","\t                        // Mix rows","\t                        lane.high = TLane.high ^ (~Tx1Lane.high & Tx2Lane.high);","\t                        lane.low  = TLane.low  ^ (~Tx1Lane.low  & Tx2Lane.low);","\t                    }","\t                }","","\t                // Iota","\t                var lane = state[0];","\t                var roundConstant = ROUND_CONSTANTS[round];","\t                lane.high ^= roundConstant.high;","\t                lane.low  ^= roundConstant.low;;","\t            }","\t        },","","\t        _doFinalize: function () {","\t            // Shortcuts","\t            var data = this._data;","\t            var dataWords = data.words;","\t            var nBitsTotal = this._nDataBytes * 8;","\t            var nBitsLeft = data.sigBytes * 8;","\t            var blockSizeBits = this.blockSize * 32;","","\t            // Add padding","\t            dataWords[nBitsLeft >>> 5] |= 0x1 << (24 - nBitsLeft % 32);","\t            dataWords[((Math.ceil((nBitsLeft + 1) / blockSizeBits) * blockSizeBits) >>> 5) - 1] |= 0x80;","\t            data.sigBytes = dataWords.length * 4;","","\t            // Hash final blocks","\t            this._process();","","\t            // Shortcuts","\t            var state = this._state;","\t            var outputLengthBytes = this.cfg.outputLength / 8;","\t            var outputLengthLanes = outputLengthBytes / 8;","","\t            // Squeeze","\t            var hashWords = [];","\t            for (var i = 0; i < outputLengthLanes; i++) {","\t                // Shortcuts","\t                var lane = state[i];","\t                var laneMsw = lane.high;","\t                var laneLsw = lane.low;","","\t                // Swap endian","\t                laneMsw = (","\t                    (((laneMsw << 8)  | (laneMsw >>> 24)) & 0x00ff00ff) |","\t                    (((laneMsw << 24) | (laneMsw >>> 8))  & 0xff00ff00)","\t                );","\t                laneLsw = (","\t                    (((laneLsw << 8)  | (laneLsw >>> 24)) & 0x00ff00ff) |","\t                    (((laneLsw << 24) | (laneLsw >>> 8))  & 0xff00ff00)","\t                );","","\t                // Squeeze state to retrieve hash","\t                hashWords.push(laneLsw);","\t                hashWords.push(laneMsw);","\t            }","","\t            // Return final computed hash","\t            return new WordArray.init(hashWords, outputLengthBytes);","\t        },","","\t        clone: function () {","\t            var clone = Hasher.clone.call(this);","","\t            var state = clone._state = this._state.slice(0);","\t            for (var i = 0; i < 25; i++) {","\t                state[i] = state[i].clone();","\t            }","","\t            return clone;","\t        }","\t    });","","\t    /**","\t     * Shortcut function to the hasher's object interface.","\t     *","\t     * @param {WordArray|string} message The message to hash.","\t     *","\t     * @return {WordArray} The hash.","\t     *","\t     * @static","\t     *","\t     * @example","\t     *","\t     *     var hash = CryptoJS.SHA3('message');","\t     *     var hash = CryptoJS.SHA3(wordArray);","\t     */","\t    C.SHA3 = Hasher._createHelper(SHA3);","","\t    /**","\t     * Shortcut function to the HMAC's object interface.","\t     *","\t     * @param {WordArray|string} message The message to hash.","\t     * @param {WordArray|string} key The secret key.","\t     *","\t     * @return {WordArray} The HMAC.","\t     *","\t     * @static","\t     *","\t     * @example","\t     *","\t     *     var hmac = CryptoJS.HmacSHA3(message, key);","\t     */","\t    C.HmacSHA3 = Hasher._createHmacHelper(SHA3);","\t}(Math));","","","\treturn CryptoJS.SHA3;","","}));","},{\"./core\":51,\"./x64-core\":82}],79:[function(require,module,exports){",";(function (root, factory, undef) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"), require(\"./sha512\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\", \"./x64-core\", \"./sha512\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t(function () {","\t    // Shortcuts","\t    var C = CryptoJS;","\t    var C_x64 = C.x64;","\t    var X64Word = C_x64.Word;","\t    var X64WordArray = C_x64.WordArray;","\t    var C_algo = C.algo;","\t    var SHA512 = C_algo.SHA512;","","\t    /**","\t     * SHA-384 hash algorithm.","\t     */","\t    var SHA384 = C_algo.SHA384 = SHA512.extend({","\t        _doReset: function () {","\t            this._hash = new X64WordArray.init([","\t                new X64Word.init(0xcbbb9d5d, 0xc1059ed8), new X64Word.init(0x629a292a, 0x367cd507),","\t                new X64Word.init(0x9159015a, 0x3070dd17), new X64Word.init(0x152fecd8, 0xf70e5939),","\t                new X64Word.init(0x67332667, 0xffc00b31), new X64Word.init(0x8eb44a87, 0x68581511),","\t                new X64Word.init(0xdb0c2e0d, 0x64f98fa7), new X64Word.init(0x47b5481d, 0xbefa4fa4)","\t            ]);","\t        },","","\t        _doFinalize: function () {","\t            var hash = SHA512._doFinalize.call(this);","","\t            hash.sigBytes -= 16;","","\t            return hash;","\t        }","\t    });","","\t    /**","\t     * Shortcut function to the hasher's object interface.","\t     *","\t     * @param {WordArray|string} message The message to hash.","\t     *","\t     * @return {WordArray} The hash.","\t     *","\t     * @static","\t     *","\t     * @example","\t     *","\t     *     var hash = CryptoJS.SHA384('message');","\t     *     var hash = CryptoJS.SHA384(wordArray);","\t     */","\t    C.SHA384 = SHA512._createHelper(SHA384);","","\t    /**","\t     * Shortcut function to the HMAC's object interface.","\t     *","\t     * @param {WordArray|string} message The message to hash.","\t     * @param {WordArray|string} key The secret key.","\t     *","\t     * @return {WordArray} The HMAC.","\t     *","\t     * @static","\t     *","\t     * @example","\t     *","\t     *     var hmac = CryptoJS.HmacSHA384(message, key);","\t     */","\t    C.HmacSHA384 = SHA512._createHmacHelper(SHA384);","\t}());","","","\treturn CryptoJS.SHA384;","","}));","},{\"./core\":51,\"./sha512\":80,\"./x64-core\":82}],80:[function(require,module,exports){",";(function (root, factory, undef) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./x64-core\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\", \"./x64-core\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t(function () {","\t    // Shortcuts","\t    var C = CryptoJS;","\t    var C_lib = C.lib;","\t    var Hasher = C_lib.Hasher;","\t    var C_x64 = C.x64;","\t    var X64Word = C_x64.Word;","\t    var X64WordArray = C_x64.WordArray;","\t    var C_algo = C.algo;","","\t    function X64Word_create() {","\t        return X64Word.create.apply(X64Word, arguments);","\t    }","","\t    // Constants","\t    var K = [","\t        X64Word_create(0x428a2f98, 0xd728ae22), X64Word_create(0x71374491, 0x23ef65cd),","\t        X64Word_create(0xb5c0fbcf, 0xec4d3b2f), X64Word_create(0xe9b5dba5, 0x8189dbbc),","\t        X64Word_create(0x3956c25b, 0xf348b538), X64Word_create(0x59f111f1, 0xb605d019),","\t        X64Word_create(0x923f82a4, 0xaf194f9b), X64Word_create(0xab1c5ed5, 0xda6d8118),","\t        X64Word_create(0xd807aa98, 0xa3030242), X64Word_create(0x12835b01, 0x45706fbe),","\t        X64Word_create(0x243185be, 0x4ee4b28c), X64Word_create(0x550c7dc3, 0xd5ffb4e2),","\t        X64Word_create(0x72be5d74, 0xf27b896f), X64Word_create(0x80deb1fe, 0x3b1696b1),","\t        X64Word_create(0x9bdc06a7, 0x25c71235), X64Word_create(0xc19bf174, 0xcf692694),","\t        X64Word_create(0xe49b69c1, 0x9ef14ad2), X64Word_create(0xefbe4786, 0x384f25e3),","\t        X64Word_create(0x0fc19dc6, 0x8b8cd5b5), X64Word_create(0x240ca1cc, 0x77ac9c65),","\t        X64Word_create(0x2de92c6f, 0x592b0275), X64Word_create(0x4a7484aa, 0x6ea6e483),","\t        X64Word_create(0x5cb0a9dc, 0xbd41fbd4), X64Word_create(0x76f988da, 0x831153b5),","\t        X64Word_create(0x983e5152, 0xee66dfab), X64Word_create(0xa831c66d, 0x2db43210),","\t        X64Word_create(0xb00327c8, 0x98fb213f), X64Word_create(0xbf597fc7, 0xbeef0ee4),","\t        X64Word_create(0xc6e00bf3, 0x3da88fc2), X64Word_create(0xd5a79147, 0x930aa725),","\t        X64Word_create(0x06ca6351, 0xe003826f), X64Word_create(0x14292967, 0x0a0e6e70),","\t        X64Word_create(0x27b70a85, 0x46d22ffc), X64Word_create(0x2e1b2138, 0x5c26c926),","\t        X64Word_create(0x4d2c6dfc, 0x5ac42aed), X64Word_create(0x53380d13, 0x9d95b3df),","\t        X64Word_create(0x650a7354, 0x8baf63de), X64Word_create(0x766a0abb, 0x3c77b2a8),","\t        X64Word_create(0x81c2c92e, 0x47edaee6), X64Word_create(0x92722c85, 0x1482353b),","\t        X64Word_create(0xa2bfe8a1, 0x4cf10364), X64Word_create(0xa81a664b, 0xbc423001),","\t        X64Word_create(0xc24b8b70, 0xd0f89791), X64Word_create(0xc76c51a3, 0x0654be30),","\t        X64Word_create(0xd192e819, 0xd6ef5218), X64Word_create(0xd6990624, 0x5565a910),","\t        X64Word_create(0xf40e3585, 0x5771202a), X64Word_create(0x106aa070, 0x32bbd1b8),","\t        X64Word_create(0x19a4c116, 0xb8d2d0c8), X64Word_create(0x1e376c08, 0x5141ab53),","\t        X64Word_create(0x2748774c, 0xdf8eeb99), X64Word_create(0x34b0bcb5, 0xe19b48a8),","\t        X64Word_create(0x391c0cb3, 0xc5c95a63), X64Word_create(0x4ed8aa4a, 0xe3418acb),","\t        X64Word_create(0x5b9cca4f, 0x7763e373), X64Word_create(0x682e6ff3, 0xd6b2b8a3),","\t        X64Word_create(0x748f82ee, 0x5defb2fc), X64Word_create(0x78a5636f, 0x43172f60),","\t        X64Word_create(0x84c87814, 0xa1f0ab72), X64Word_create(0x8cc70208, 0x1a6439ec),","\t        X64Word_create(0x90befffa, 0x23631e28), X64Word_create(0xa4506ceb, 0xde82bde9),","\t        X64Word_create(0xbef9a3f7, 0xb2c67915), X64Word_create(0xc67178f2, 0xe372532b),","\t        X64Word_create(0xca273ece, 0xea26619c), X64Word_create(0xd186b8c7, 0x21c0c207),","\t        X64Word_create(0xeada7dd6, 0xcde0eb1e), X64Word_create(0xf57d4f7f, 0xee6ed178),","\t        X64Word_create(0x06f067aa, 0x72176fba), X64Word_create(0x0a637dc5, 0xa2c898a6),","\t        X64Word_create(0x113f9804, 0xbef90dae), X64Word_create(0x1b710b35, 0x131c471b),","\t        X64Word_create(0x28db77f5, 0x23047d84), X64Word_create(0x32caab7b, 0x40c72493),","\t        X64Word_create(0x3c9ebe0a, 0x15c9bebc), X64Word_create(0x431d67c4, 0x9c100d4c),","\t        X64Word_create(0x4cc5d4be, 0xcb3e42b6), X64Word_create(0x597f299c, 0xfc657e2a),","\t        X64Word_create(0x5fcb6fab, 0x3ad6faec), X64Word_create(0x6c44198c, 0x4a475817)","\t    ];","","\t    // Reusable objects","\t    var W = [];","\t    (function () {","\t        for (var i = 0; i < 80; i++) {","\t            W[i] = X64Word_create();","\t        }","\t    }());","","\t    /**","\t     * SHA-512 hash algorithm.","\t     */","\t    var SHA512 = C_algo.SHA512 = Hasher.extend({","\t        _doReset: function () {","\t            this._hash = new X64WordArray.init([","\t                new X64Word.init(0x6a09e667, 0xf3bcc908), new X64Word.init(0xbb67ae85, 0x84caa73b),","\t                new X64Word.init(0x3c6ef372, 0xfe94f82b), new X64Word.init(0xa54ff53a, 0x5f1d36f1),","\t                new X64Word.init(0x510e527f, 0xade682d1), new X64Word.init(0x9b05688c, 0x2b3e6c1f),","\t                new X64Word.init(0x1f83d9ab, 0xfb41bd6b), new X64Word.init(0x5be0cd19, 0x137e2179)","\t            ]);","\t        },","","\t        _doProcessBlock: function (M, offset) {","\t            // Shortcuts","\t            var H = this._hash.words;","","\t            var H0 = H[0];","\t            var H1 = H[1];","\t            var H2 = H[2];","\t            var H3 = H[3];","\t            var H4 = H[4];","\t            var H5 = H[5];","\t            var H6 = H[6];","\t            var H7 = H[7];","","\t            var H0h = H0.high;","\t            var H0l = H0.low;","\t            var H1h = H1.high;","\t            var H1l = H1.low;","\t            var H2h = H2.high;","\t            var H2l = H2.low;","\t            var H3h = H3.high;","\t            var H3l = H3.low;","\t            var H4h = H4.high;","\t            var H4l = H4.low;","\t            var H5h = H5.high;","\t            var H5l = H5.low;","\t            var H6h = H6.high;","\t            var H6l = H6.low;","\t            var H7h = H7.high;","\t            var H7l = H7.low;","","\t            // Working variables","\t            var ah = H0h;","\t            var al = H0l;","\t            var bh = H1h;","\t            var bl = H1l;","\t            var ch = H2h;","\t            var cl = H2l;","\t            var dh = H3h;","\t            var dl = H3l;","\t            var eh = H4h;","\t            var el = H4l;","\t            var fh = H5h;","\t            var fl = H5l;","\t            var gh = H6h;","\t            var gl = H6l;","\t            var hh = H7h;","\t            var hl = H7l;","","\t            // Rounds","\t            for (var i = 0; i < 80; i++) {","\t                // Shortcut","\t                var Wi = W[i];","","\t                // Extend message","\t                if (i < 16) {","\t                    var Wih = Wi.high = M[offset + i * 2]     | 0;","\t                    var Wil = Wi.low  = M[offset + i * 2 + 1] | 0;","\t                } else {","\t                    // Gamma0","\t                    var gamma0x  = W[i - 15];","\t                    var gamma0xh = gamma0x.high;","\t                    var gamma0xl = gamma0x.low;","\t                    var gamma0h  = ((gamma0xh >>> 1) | (gamma0xl << 31)) ^ ((gamma0xh >>> 8) | (gamma0xl << 24)) ^ (gamma0xh >>> 7);","\t                    var gamma0l  = ((gamma0xl >>> 1) | (gamma0xh << 31)) ^ ((gamma0xl >>> 8) | (gamma0xh << 24)) ^ ((gamma0xl >>> 7) | (gamma0xh << 25));","","\t                    // Gamma1","\t                    var gamma1x  = W[i - 2];","\t                    var gamma1xh = gamma1x.high;","\t                    var gamma1xl = gamma1x.low;","\t                    var gamma1h  = ((gamma1xh >>> 19) | (gamma1xl << 13)) ^ ((gamma1xh << 3) | (gamma1xl >>> 29)) ^ (gamma1xh >>> 6);","\t                    var gamma1l  = ((gamma1xl >>> 19) | (gamma1xh << 13)) ^ ((gamma1xl << 3) | (gamma1xh >>> 29)) ^ ((gamma1xl >>> 6) | (gamma1xh << 26));","","\t                    // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]","\t                    var Wi7  = W[i - 7];","\t                    var Wi7h = Wi7.high;","\t                    var Wi7l = Wi7.low;","","\t                    var Wi16  = W[i - 16];","\t                    var Wi16h = Wi16.high;","\t                    var Wi16l = Wi16.low;","","\t                    var Wil = gamma0l + Wi7l;","\t                    var Wih = gamma0h + Wi7h + ((Wil >>> 0) < (gamma0l >>> 0) ? 1 : 0);","\t                    var Wil = Wil + gamma1l;","\t                    var Wih = Wih + gamma1h + ((Wil >>> 0) < (gamma1l >>> 0) ? 1 : 0);","\t                    var Wil = Wil + Wi16l;","\t                    var Wih = Wih + Wi16h + ((Wil >>> 0) < (Wi16l >>> 0) ? 1 : 0);","","\t                    Wi.high = Wih;","\t                    Wi.low  = Wil;","\t                }","","\t                var chh  = (eh & fh) ^ (~eh & gh);","\t                var chl  = (el & fl) ^ (~el & gl);","\t                var majh = (ah & bh) ^ (ah & ch) ^ (bh & ch);","\t                var majl = (al & bl) ^ (al & cl) ^ (bl & cl);","","\t                var sigma0h = ((ah >>> 28) | (al << 4))  ^ ((ah << 30)  | (al >>> 2)) ^ ((ah << 25) | (al >>> 7));","\t                var sigma0l = ((al >>> 28) | (ah << 4))  ^ ((al << 30)  | (ah >>> 2)) ^ ((al << 25) | (ah >>> 7));","\t                var sigma1h = ((eh >>> 14) | (el << 18)) ^ ((eh >>> 18) | (el << 14)) ^ ((eh << 23) | (el >>> 9));","\t                var sigma1l = ((el >>> 14) | (eh << 18)) ^ ((el >>> 18) | (eh << 14)) ^ ((el << 23) | (eh >>> 9));","","\t                // t1 = h + sigma1 + ch + K[i] + W[i]","\t                var Ki  = K[i];","\t                var Kih = Ki.high;","\t                var Kil = Ki.low;","","\t                var t1l = hl + sigma1l;","\t                var t1h = hh + sigma1h + ((t1l >>> 0) < (hl >>> 0) ? 1 : 0);","\t                var t1l = t1l + chl;","\t                var t1h = t1h + chh + ((t1l >>> 0) < (chl >>> 0) ? 1 : 0);","\t                var t1l = t1l + Kil;","\t                var t1h = t1h + Kih + ((t1l >>> 0) < (Kil >>> 0) ? 1 : 0);","\t                var t1l = t1l + Wil;","\t                var t1h = t1h + Wih + ((t1l >>> 0) < (Wil >>> 0) ? 1 : 0);","","\t                // t2 = sigma0 + maj","\t                var t2l = sigma0l + majl;","\t                var t2h = sigma0h + majh + ((t2l >>> 0) < (sigma0l >>> 0) ? 1 : 0);","","\t                // Update working variables","\t                hh = gh;","\t                hl = gl;","\t                gh = fh;","\t                gl = fl;","\t                fh = eh;","\t                fl = el;","\t                el = (dl + t1l) | 0;","\t                eh = (dh + t1h + ((el >>> 0) < (dl >>> 0) ? 1 : 0)) | 0;","\t                dh = ch;","\t                dl = cl;","\t                ch = bh;","\t                cl = bl;","\t                bh = ah;","\t                bl = al;","\t                al = (t1l + t2l) | 0;","\t                ah = (t1h + t2h + ((al >>> 0) < (t1l >>> 0) ? 1 : 0)) | 0;","\t            }","","\t            // Intermediate hash value","\t            H0l = H0.low  = (H0l + al);","\t            H0.high = (H0h + ah + ((H0l >>> 0) < (al >>> 0) ? 1 : 0));","\t            H1l = H1.low  = (H1l + bl);","\t            H1.high = (H1h + bh + ((H1l >>> 0) < (bl >>> 0) ? 1 : 0));","\t            H2l = H2.low  = (H2l + cl);","\t            H2.high = (H2h + ch + ((H2l >>> 0) < (cl >>> 0) ? 1 : 0));","\t            H3l = H3.low  = (H3l + dl);","\t            H3.high = (H3h + dh + ((H3l >>> 0) < (dl >>> 0) ? 1 : 0));","\t            H4l = H4.low  = (H4l + el);","\t            H4.high = (H4h + eh + ((H4l >>> 0) < (el >>> 0) ? 1 : 0));","\t            H5l = H5.low  = (H5l + fl);","\t            H5.high = (H5h + fh + ((H5l >>> 0) < (fl >>> 0) ? 1 : 0));","\t            H6l = H6.low  = (H6l + gl);","\t            H6.high = (H6h + gh + ((H6l >>> 0) < (gl >>> 0) ? 1 : 0));","\t            H7l = H7.low  = (H7l + hl);","\t            H7.high = (H7h + hh + ((H7l >>> 0) < (hl >>> 0) ? 1 : 0));","\t        },","","\t        _doFinalize: function () {","\t            // Shortcuts","\t            var data = this._data;","\t            var dataWords = data.words;","","\t            var nBitsTotal = this._nDataBytes * 8;","\t            var nBitsLeft = data.sigBytes * 8;","","\t            // Add padding","\t            dataWords[nBitsLeft >>> 5] |= 0x80 << (24 - nBitsLeft % 32);","\t            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 30] = Math.floor(nBitsTotal / 0x100000000);","\t            dataWords[(((nBitsLeft + 128) >>> 10) << 5) + 31] = nBitsTotal;","\t            data.sigBytes = dataWords.length * 4;","","\t            // Hash final blocks","\t            this._process();","","\t            // Convert hash to 32-bit word array before returning","\t            var hash = this._hash.toX32();","","\t            // Return final computed hash","\t            return hash;","\t        },","","\t        clone: function () {","\t            var clone = Hasher.clone.call(this);","\t            clone._hash = this._hash.clone();","","\t            return clone;","\t        },","","\t        blockSize: 1024/32","\t    });","","\t    /**","\t     * Shortcut function to the hasher's object interface.","\t     *","\t     * @param {WordArray|string} message The message to hash.","\t     *","\t     * @return {WordArray} The hash.","\t     *","\t     * @static","\t     *","\t     * @example","\t     *","\t     *     var hash = CryptoJS.SHA512('message');","\t     *     var hash = CryptoJS.SHA512(wordArray);","\t     */","\t    C.SHA512 = Hasher._createHelper(SHA512);","","\t    /**","\t     * Shortcut function to the HMAC's object interface.","\t     *","\t     * @param {WordArray|string} message The message to hash.","\t     * @param {WordArray|string} key The secret key.","\t     *","\t     * @return {WordArray} The HMAC.","\t     *","\t     * @static","\t     *","\t     * @example","\t     *","\t     *     var hmac = CryptoJS.HmacSHA512(message, key);","\t     */","\t    C.HmacSHA512 = Hasher._createHmacHelper(SHA512);","\t}());","","","\treturn CryptoJS.SHA512;","","}));","},{\"./core\":51,\"./x64-core\":82}],81:[function(require,module,exports){",";(function (root, factory, undef) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"), require(\"./enc-base64\"), require(\"./md5\"), require(\"./evpkdf\"), require(\"./cipher-core\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\", \"./enc-base64\", \"./md5\", \"./evpkdf\", \"./cipher-core\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t(function () {","\t    // Shortcuts","\t    var C = CryptoJS;","\t    var C_lib = C.lib;","\t    var WordArray = C_lib.WordArray;","\t    var BlockCipher = C_lib.BlockCipher;","\t    var C_algo = C.algo;","","\t    // Permuted Choice 1 constants","\t    var PC1 = [","\t        57, 49, 41, 33, 25, 17, 9,  1,","\t        58, 50, 42, 34, 26, 18, 10, 2,","\t        59, 51, 43, 35, 27, 19, 11, 3,","\t        60, 52, 44, 36, 63, 55, 47, 39,","\t        31, 23, 15, 7,  62, 54, 46, 38,","\t        30, 22, 14, 6,  61, 53, 45, 37,","\t        29, 21, 13, 5,  28, 20, 12, 4","\t    ];","","\t    // Permuted Choice 2 constants","\t    var PC2 = [","\t        14, 17, 11, 24, 1,  5,","\t        3,  28, 15, 6,  21, 10,","\t        23, 19, 12, 4,  26, 8,","\t        16, 7,  27, 20, 13, 2,","\t        41, 52, 31, 37, 47, 55,","\t        30, 40, 51, 45, 33, 48,","\t        44, 49, 39, 56, 34, 53,","\t        46, 42, 50, 36, 29, 32","\t    ];","","\t    // Cumulative bit shift constants","\t    var BIT_SHIFTS = [1,  2,  4,  6,  8,  10, 12, 14, 15, 17, 19, 21, 23, 25, 27, 28];","","\t    // SBOXes and round permutation constants","\t    var SBOX_P = [","\t        {","\t            0x0: 0x808200,","\t            0x10000000: 0x8000,","\t            0x20000000: 0x808002,","\t            0x30000000: 0x2,","\t            0x40000000: 0x200,","\t            0x50000000: 0x808202,","\t            0x60000000: 0x800202,","\t            0x70000000: 0x800000,","\t            0x80000000: 0x202,","\t            0x90000000: 0x800200,","\t            0xa0000000: 0x8200,","\t            0xb0000000: 0x808000,","\t            0xc0000000: 0x8002,","\t            0xd0000000: 0x800002,","\t            0xe0000000: 0x0,","\t            0xf0000000: 0x8202,","\t            0x8000000: 0x0,","\t            0x18000000: 0x808202,","\t            0x28000000: 0x8202,","\t            0x38000000: 0x8000,","\t            0x48000000: 0x808200,","\t            0x58000000: 0x200,","\t            0x68000000: 0x808002,","\t            0x78000000: 0x2,","\t            0x88000000: 0x800200,","\t            0x98000000: 0x8200,","\t            0xa8000000: 0x808000,","\t            0xb8000000: 0x800202,","\t            0xc8000000: 0x800002,","\t            0xd8000000: 0x8002,","\t            0xe8000000: 0x202,","\t            0xf8000000: 0x800000,","\t            0x1: 0x8000,","\t            0x10000001: 0x2,","\t            0x20000001: 0x808200,","\t            0x30000001: 0x800000,","\t            0x40000001: 0x808002,","\t            0x50000001: 0x8200,","\t            0x60000001: 0x200,","\t            0x70000001: 0x800202,","\t            0x80000001: 0x808202,","\t            0x90000001: 0x808000,","\t            0xa0000001: 0x800002,","\t            0xb0000001: 0x8202,","\t            0xc0000001: 0x202,","\t            0xd0000001: 0x800200,","\t            0xe0000001: 0x8002,","\t            0xf0000001: 0x0,","\t            0x8000001: 0x808202,","\t            0x18000001: 0x808000,","\t            0x28000001: 0x800000,","\t            0x38000001: 0x200,","\t            0x48000001: 0x8000,","\t            0x58000001: 0x800002,","\t            0x68000001: 0x2,","\t            0x78000001: 0x8202,","\t            0x88000001: 0x8002,","\t            0x98000001: 0x800202,","\t            0xa8000001: 0x202,","\t            0xb8000001: 0x808200,","\t            0xc8000001: 0x800200,","\t            0xd8000001: 0x0,","\t            0xe8000001: 0x8200,","\t            0xf8000001: 0x808002","\t        },","\t        {","\t            0x0: 0x40084010,","\t            0x1000000: 0x4000,","\t            0x2000000: 0x80000,","\t            0x3000000: 0x40080010,","\t            0x4000000: 0x40000010,","\t            0x5000000: 0x40084000,","\t            0x6000000: 0x40004000,","\t            0x7000000: 0x10,","\t            0x8000000: 0x84000,","\t            0x9000000: 0x40004010,","\t            0xa000000: 0x40000000,","\t            0xb000000: 0x84010,","\t            0xc000000: 0x80010,","\t            0xd000000: 0x0,","\t            0xe000000: 0x4010,","\t            0xf000000: 0x40080000,","\t            0x800000: 0x40004000,","\t            0x1800000: 0x84010,","\t            0x2800000: 0x10,","\t            0x3800000: 0x40004010,","\t            0x4800000: 0x40084010,","\t            0x5800000: 0x40000000,","\t            0x6800000: 0x80000,","\t            0x7800000: 0x40080010,","\t            0x8800000: 0x80010,","\t            0x9800000: 0x0,","\t            0xa800000: 0x4000,","\t            0xb800000: 0x40080000,","\t            0xc800000: 0x40000010,","\t            0xd800000: 0x84000,","\t            0xe800000: 0x40084000,","\t            0xf800000: 0x4010,","\t            0x10000000: 0x0,","\t            0x11000000: 0x40080010,","\t            0x12000000: 0x40004010,","\t            0x13000000: 0x40084000,","\t            0x14000000: 0x40080000,","\t            0x15000000: 0x10,","\t            0x16000000: 0x84010,","\t            0x17000000: 0x4000,","\t            0x18000000: 0x4010,","\t            0x19000000: 0x80000,","\t            0x1a000000: 0x80010,","\t            0x1b000000: 0x40000010,","\t            0x1c000000: 0x84000,","\t            0x1d000000: 0x40004000,","\t            0x1e000000: 0x40000000,","\t            0x1f000000: 0x40084010,","\t            0x10800000: 0x84010,","\t            0x11800000: 0x80000,","\t            0x12800000: 0x40080000,","\t            0x13800000: 0x4000,","\t            0x14800000: 0x40004000,","\t            0x15800000: 0x40084010,","\t            0x16800000: 0x10,","\t            0x17800000: 0x40000000,","\t            0x18800000: 0x40084000,","\t            0x19800000: 0x40000010,","\t            0x1a800000: 0x40004010,","\t            0x1b800000: 0x80010,","\t            0x1c800000: 0x0,","\t            0x1d800000: 0x4010,","\t            0x1e800000: 0x40080010,","\t            0x1f800000: 0x84000","\t        },","\t        {","\t            0x0: 0x104,","\t            0x100000: 0x0,","\t            0x200000: 0x4000100,","\t            0x300000: 0x10104,","\t            0x400000: 0x10004,","\t            0x500000: 0x4000004,","\t            0x600000: 0x4010104,","\t            0x700000: 0x4010000,","\t            0x800000: 0x4000000,","\t            0x900000: 0x4010100,","\t            0xa00000: 0x10100,","\t            0xb00000: 0x4010004,","\t            0xc00000: 0x4000104,","\t            0xd00000: 0x10000,","\t            0xe00000: 0x4,","\t            0xf00000: 0x100,","\t            0x80000: 0x4010100,","\t            0x180000: 0x4010004,","\t            0x280000: 0x0,","\t            0x380000: 0x4000100,","\t            0x480000: 0x4000004,","\t            0x580000: 0x10000,","\t            0x680000: 0x10004,","\t            0x780000: 0x104,","\t            0x880000: 0x4,","\t            0x980000: 0x100,","\t            0xa80000: 0x4010000,","\t            0xb80000: 0x10104,","\t            0xc80000: 0x10100,","\t            0xd80000: 0x4000104,","\t            0xe80000: 0x4010104,","\t            0xf80000: 0x4000000,","\t            0x1000000: 0x4010100,","\t            0x1100000: 0x10004,","\t            0x1200000: 0x10000,","\t            0x1300000: 0x4000100,","\t            0x1400000: 0x100,","\t            0x1500000: 0x4010104,","\t            0x1600000: 0x4000004,","\t            0x1700000: 0x0,","\t            0x1800000: 0x4000104,","\t            0x1900000: 0x4000000,","\t            0x1a00000: 0x4,","\t            0x1b00000: 0x10100,","\t            0x1c00000: 0x4010000,","\t            0x1d00000: 0x104,","\t            0x1e00000: 0x10104,","\t            0x1f00000: 0x4010004,","\t            0x1080000: 0x4000000,","\t            0x1180000: 0x104,","\t            0x1280000: 0x4010100,","\t            0x1380000: 0x0,","\t            0x1480000: 0x10004,","\t            0x1580000: 0x4000100,","\t            0x1680000: 0x100,","\t            0x1780000: 0x4010004,","\t            0x1880000: 0x10000,","\t            0x1980000: 0x4010104,","\t            0x1a80000: 0x10104,","\t            0x1b80000: 0x4000004,","\t            0x1c80000: 0x4000104,","\t            0x1d80000: 0x4010000,","\t            0x1e80000: 0x4,","\t            0x1f80000: 0x10100","\t        },","\t        {","\t            0x0: 0x80401000,","\t            0x10000: 0x80001040,","\t            0x20000: 0x401040,","\t            0x30000: 0x80400000,","\t            0x40000: 0x0,","\t            0x50000: 0x401000,","\t            0x60000: 0x80000040,","\t            0x70000: 0x400040,","\t            0x80000: 0x80000000,","\t            0x90000: 0x400000,","\t            0xa0000: 0x40,","\t            0xb0000: 0x80001000,","\t            0xc0000: 0x80400040,","\t            0xd0000: 0x1040,","\t            0xe0000: 0x1000,","\t            0xf0000: 0x80401040,","\t            0x8000: 0x80001040,","\t            0x18000: 0x40,","\t            0x28000: 0x80400040,","\t            0x38000: 0x80001000,","\t            0x48000: 0x401000,","\t            0x58000: 0x80401040,","\t            0x68000: 0x0,","\t            0x78000: 0x80400000,","\t            0x88000: 0x1000,","\t            0x98000: 0x80401000,","\t            0xa8000: 0x400000,","\t            0xb8000: 0x1040,","\t            0xc8000: 0x80000000,","\t            0xd8000: 0x400040,","\t            0xe8000: 0x401040,","\t            0xf8000: 0x80000040,","\t            0x100000: 0x400040,","\t            0x110000: 0x401000,","\t            0x120000: 0x80000040,","\t            0x130000: 0x0,","\t            0x140000: 0x1040,","\t            0x150000: 0x80400040,","\t            0x160000: 0x80401000,","\t            0x170000: 0x80001040,","\t            0x180000: 0x80401040,","\t            0x190000: 0x80000000,","\t            0x1a0000: 0x80400000,","\t            0x1b0000: 0x401040,","\t            0x1c0000: 0x80001000,","\t            0x1d0000: 0x400000,","\t            0x1e0000: 0x40,","\t            0x1f0000: 0x1000,","\t            0x108000: 0x80400000,","\t            0x118000: 0x80401040,","\t            0x128000: 0x0,","\t            0x138000: 0x401000,","\t            0x148000: 0x400040,","\t            0x158000: 0x80000000,","\t            0x168000: 0x80001040,","\t            0x178000: 0x40,","\t            0x188000: 0x80000040,","\t            0x198000: 0x1000,","\t            0x1a8000: 0x80001000,","\t            0x1b8000: 0x80400040,","\t            0x1c8000: 0x1040,","\t            0x1d8000: 0x80401000,","\t            0x1e8000: 0x400000,","\t            0x1f8000: 0x401040","\t        },","\t        {","\t            0x0: 0x80,","\t            0x1000: 0x1040000,","\t            0x2000: 0x40000,","\t            0x3000: 0x20000000,","\t            0x4000: 0x20040080,","\t            0x5000: 0x1000080,","\t            0x6000: 0x21000080,","\t            0x7000: 0x40080,","\t            0x8000: 0x1000000,","\t            0x9000: 0x20040000,","\t            0xa000: 0x20000080,","\t            0xb000: 0x21040080,","\t            0xc000: 0x21040000,","\t            0xd000: 0x0,","\t            0xe000: 0x1040080,","\t            0xf000: 0x21000000,","\t            0x800: 0x1040080,","\t            0x1800: 0x21000080,","\t            0x2800: 0x80,","\t            0x3800: 0x1040000,","\t            0x4800: 0x40000,","\t            0x5800: 0x20040080,","\t            0x6800: 0x21040000,","\t            0x7800: 0x20000000,","\t            0x8800: 0x20040000,","\t            0x9800: 0x0,","\t            0xa800: 0x21040080,","\t            0xb800: 0x1000080,","\t            0xc800: 0x20000080,","\t            0xd800: 0x21000000,","\t            0xe800: 0x1000000,","\t            0xf800: 0x40080,","\t            0x10000: 0x40000,","\t            0x11000: 0x80,","\t            0x12000: 0x20000000,","\t            0x13000: 0x21000080,","\t            0x14000: 0x1000080,","\t            0x15000: 0x21040000,","\t            0x16000: 0x20040080,","\t            0x17000: 0x1000000,","\t            0x18000: 0x21040080,","\t            0x19000: 0x21000000,","\t            0x1a000: 0x1040000,","\t            0x1b000: 0x20040000,","\t            0x1c000: 0x40080,","\t            0x1d000: 0x20000080,","\t            0x1e000: 0x0,","\t            0x1f000: 0x1040080,","\t            0x10800: 0x21000080,","\t            0x11800: 0x1000000,","\t            0x12800: 0x1040000,","\t            0x13800: 0x20040080,","\t            0x14800: 0x20000000,","\t            0x15800: 0x1040080,","\t            0x16800: 0x80,","\t            0x17800: 0x21040000,","\t            0x18800: 0x40080,","\t            0x19800: 0x21040080,","\t            0x1a800: 0x0,","\t            0x1b800: 0x21000000,","\t            0x1c800: 0x1000080,","\t            0x1d800: 0x40000,","\t            0x1e800: 0x20040000,","\t            0x1f800: 0x20000080","\t        },","\t        {","\t            0x0: 0x10000008,","\t            0x100: 0x2000,","\t            0x200: 0x10200000,","\t            0x300: 0x10202008,","\t            0x400: 0x10002000,","\t            0x500: 0x200000,","\t            0x600: 0x200008,","\t            0x700: 0x10000000,","\t            0x800: 0x0,","\t            0x900: 0x10002008,","\t            0xa00: 0x202000,","\t            0xb00: 0x8,","\t            0xc00: 0x10200008,","\t            0xd00: 0x202008,","\t            0xe00: 0x2008,","\t            0xf00: 0x10202000,","\t            0x80: 0x10200000,","\t            0x180: 0x10202008,","\t            0x280: 0x8,","\t            0x380: 0x200000,","\t            0x480: 0x202008,","\t            0x580: 0x10000008,","\t            0x680: 0x10002000,","\t            0x780: 0x2008,","\t            0x880: 0x200008,","\t            0x980: 0x2000,","\t            0xa80: 0x10002008,","\t            0xb80: 0x10200008,","\t            0xc80: 0x0,","\t            0xd80: 0x10202000,","\t            0xe80: 0x202000,","\t            0xf80: 0x10000000,","\t            0x1000: 0x10002000,","\t            0x1100: 0x10200008,","\t            0x1200: 0x10202008,","\t            0x1300: 0x2008,","\t            0x1400: 0x200000,","\t            0x1500: 0x10000000,","\t            0x1600: 0x10000008,","\t            0x1700: 0x202000,","\t            0x1800: 0x202008,","\t            0x1900: 0x0,","\t            0x1a00: 0x8,","\t            0x1b00: 0x10200000,","\t            0x1c00: 0x2000,","\t            0x1d00: 0x10002008,","\t            0x1e00: 0x10202000,","\t            0x1f00: 0x200008,","\t            0x1080: 0x8,","\t            0x1180: 0x202000,","\t            0x1280: 0x200000,","\t            0x1380: 0x10000008,","\t            0x1480: 0x10002000,","\t            0x1580: 0x2008,","\t            0x1680: 0x10202008,","\t            0x1780: 0x10200000,","\t            0x1880: 0x10202000,","\t            0x1980: 0x10200008,","\t            0x1a80: 0x2000,","\t            0x1b80: 0x202008,","\t            0x1c80: 0x200008,","\t            0x1d80: 0x0,","\t            0x1e80: 0x10000000,","\t            0x1f80: 0x10002008","\t        },","\t        {","\t            0x0: 0x100000,","\t            0x10: 0x2000401,","\t            0x20: 0x400,","\t            0x30: 0x100401,","\t            0x40: 0x2100401,","\t            0x50: 0x0,","\t            0x60: 0x1,","\t            0x70: 0x2100001,","\t            0x80: 0x2000400,","\t            0x90: 0x100001,","\t            0xa0: 0x2000001,","\t            0xb0: 0x2100400,","\t            0xc0: 0x2100000,","\t            0xd0: 0x401,","\t            0xe0: 0x100400,","\t            0xf0: 0x2000000,","\t            0x8: 0x2100001,","\t            0x18: 0x0,","\t            0x28: 0x2000401,","\t            0x38: 0x2100400,","\t            0x48: 0x100000,","\t            0x58: 0x2000001,","\t            0x68: 0x2000000,","\t            0x78: 0x401,","\t            0x88: 0x100401,","\t            0x98: 0x2000400,","\t            0xa8: 0x2100000,","\t            0xb8: 0x100001,","\t            0xc8: 0x400,","\t            0xd8: 0x2100401,","\t            0xe8: 0x1,","\t            0xf8: 0x100400,","\t            0x100: 0x2000000,","\t            0x110: 0x100000,","\t            0x120: 0x2000401,","\t            0x130: 0x2100001,","\t            0x140: 0x100001,","\t            0x150: 0x2000400,","\t            0x160: 0x2100400,","\t            0x170: 0x100401,","\t            0x180: 0x401,","\t            0x190: 0x2100401,","\t            0x1a0: 0x100400,","\t            0x1b0: 0x1,","\t            0x1c0: 0x0,","\t            0x1d0: 0x2100000,","\t            0x1e0: 0x2000001,","\t            0x1f0: 0x400,","\t            0x108: 0x100400,","\t            0x118: 0x2000401,","\t            0x128: 0x2100001,","\t            0x138: 0x1,","\t            0x148: 0x2000000,","\t            0x158: 0x100000,","\t            0x168: 0x401,","\t            0x178: 0x2100400,","\t            0x188: 0x2000001,","\t            0x198: 0x2100000,","\t            0x1a8: 0x0,","\t            0x1b8: 0x2100401,","\t            0x1c8: 0x100401,","\t            0x1d8: 0x400,","\t            0x1e8: 0x2000400,","\t            0x1f8: 0x100001","\t        },","\t        {","\t            0x0: 0x8000820,","\t            0x1: 0x20000,","\t            0x2: 0x8000000,","\t            0x3: 0x20,","\t            0x4: 0x20020,","\t            0x5: 0x8020820,","\t            0x6: 0x8020800,","\t            0x7: 0x800,","\t            0x8: 0x8020000,","\t            0x9: 0x8000800,","\t            0xa: 0x20800,","\t            0xb: 0x8020020,","\t            0xc: 0x820,","\t            0xd: 0x0,","\t            0xe: 0x8000020,","\t            0xf: 0x20820,","\t            0x80000000: 0x800,","\t            0x80000001: 0x8020820,","\t            0x80000002: 0x8000820,","\t            0x80000003: 0x8000000,","\t            0x80000004: 0x8020000,","\t            0x80000005: 0x20800,","\t            0x80000006: 0x20820,","\t            0x80000007: 0x20,","\t            0x80000008: 0x8000020,","\t            0x80000009: 0x820,","\t            0x8000000a: 0x20020,","\t            0x8000000b: 0x8020800,","\t            0x8000000c: 0x0,","\t            0x8000000d: 0x8020020,","\t            0x8000000e: 0x8000800,","\t            0x8000000f: 0x20000,","\t            0x10: 0x20820,","\t            0x11: 0x8020800,","\t            0x12: 0x20,","\t            0x13: 0x800,","\t            0x14: 0x8000800,","\t            0x15: 0x8000020,","\t            0x16: 0x8020020,","\t            0x17: 0x20000,","\t            0x18: 0x0,","\t            0x19: 0x20020,","\t            0x1a: 0x8020000,","\t            0x1b: 0x8000820,","\t            0x1c: 0x8020820,","\t            0x1d: 0x20800,","\t            0x1e: 0x820,","\t            0x1f: 0x8000000,","\t            0x80000010: 0x20000,","\t            0x80000011: 0x800,","\t            0x80000012: 0x8020020,","\t            0x80000013: 0x20820,","\t            0x80000014: 0x20,","\t            0x80000015: 0x8020000,","\t            0x80000016: 0x8000000,","\t            0x80000017: 0x8000820,","\t            0x80000018: 0x8020820,","\t            0x80000019: 0x8000020,","\t            0x8000001a: 0x8000800,","\t            0x8000001b: 0x0,","\t            0x8000001c: 0x20800,","\t            0x8000001d: 0x820,","\t            0x8000001e: 0x20020,","\t            0x8000001f: 0x8020800","\t        }","\t    ];","","\t    // Masks that select the SBOX input","\t    var SBOX_MASK = [","\t        0xf8000001, 0x1f800000, 0x01f80000, 0x001f8000,","\t        0x0001f800, 0x00001f80, 0x000001f8, 0x8000001f","\t    ];","","\t    /**","\t     * DES block cipher algorithm.","\t     */","\t    var DES = C_algo.DES = BlockCipher.extend({","\t        _doReset: function () {","\t            // Shortcuts","\t            var key = this._key;","\t            var keyWords = key.words;","","\t            // Select 56 bits according to PC1","\t            var keyBits = [];","\t            for (var i = 0; i < 56; i++) {","\t                var keyBitPos = PC1[i] - 1;","\t                keyBits[i] = (keyWords[keyBitPos >>> 5] >>> (31 - keyBitPos % 32)) & 1;","\t            }","","\t            // Assemble 16 subkeys","\t            var subKeys = this._subKeys = [];","\t            for (var nSubKey = 0; nSubKey < 16; nSubKey++) {","\t                // Create subkey","\t                var subKey = subKeys[nSubKey] = [];","","\t                // Shortcut","\t                var bitShift = BIT_SHIFTS[nSubKey];","","\t                // Select 48 bits according to PC2","\t                for (var i = 0; i < 24; i++) {","\t                    // Select from the left 28 key bits","\t                    subKey[(i / 6) | 0] |= keyBits[((PC2[i] - 1) + bitShift) % 28] << (31 - i % 6);","","\t                    // Select from the right 28 key bits","\t                    subKey[4 + ((i / 6) | 0)] |= keyBits[28 + (((PC2[i + 24] - 1) + bitShift) % 28)] << (31 - i % 6);","\t                }","","\t                // Since each subkey is applied to an expanded 32-bit input,","\t                // the subkey can be broken into 8 values scaled to 32-bits,","\t                // which allows the key to be used without expansion","\t                subKey[0] = (subKey[0] << 1) | (subKey[0] >>> 31);","\t                for (var i = 1; i < 7; i++) {","\t                    subKey[i] = subKey[i] >>> ((i - 1) * 4 + 3);","\t                }","\t                subKey[7] = (subKey[7] << 5) | (subKey[7] >>> 27);","\t            }","","\t            // Compute inverse subkeys","\t            var invSubKeys = this._invSubKeys = [];","\t            for (var i = 0; i < 16; i++) {","\t                invSubKeys[i] = subKeys[15 - i];","\t            }","\t        },","","\t        encryptBlock: function (M, offset) {","\t            this._doCryptBlock(M, offset, this._subKeys);","\t        },","","\t        decryptBlock: function (M, offset) {","\t            this._doCryptBlock(M, offset, this._invSubKeys);","\t        },","","\t        _doCryptBlock: function (M, offset, subKeys) {","\t            // Get input","\t            this._lBlock = M[offset];","\t            this._rBlock = M[offset + 1];","","\t            // Initial permutation","\t            exchangeLR.call(this, 4,  0x0f0f0f0f);","\t            exchangeLR.call(this, 16, 0x0000ffff);","\t            exchangeRL.call(this, 2,  0x33333333);","\t            exchangeRL.call(this, 8,  0x00ff00ff);","\t            exchangeLR.call(this, 1,  0x55555555);","","\t            // Rounds","\t            for (var round = 0; round < 16; round++) {","\t                // Shortcuts","\t                var subKey = subKeys[round];","\t                var lBlock = this._lBlock;","\t                var rBlock = this._rBlock;","","\t                // Feistel function","\t                var f = 0;","\t                for (var i = 0; i < 8; i++) {","\t                    f |= SBOX_P[i][((rBlock ^ subKey[i]) & SBOX_MASK[i]) >>> 0];","\t                }","\t                this._lBlock = rBlock;","\t                this._rBlock = lBlock ^ f;","\t            }","","\t            // Undo swap from last round","\t            var t = this._lBlock;","\t            this._lBlock = this._rBlock;","\t            this._rBlock = t;","","\t            // Final permutation","\t            exchangeLR.call(this, 1,  0x55555555);","\t            exchangeRL.call(this, 8,  0x00ff00ff);","\t            exchangeRL.call(this, 2,  0x33333333);","\t            exchangeLR.call(this, 16, 0x0000ffff);","\t            exchangeLR.call(this, 4,  0x0f0f0f0f);","","\t            // Set output","\t            M[offset] = this._lBlock;","\t            M[offset + 1] = this._rBlock;","\t        },","","\t        keySize: 64/32,","","\t        ivSize: 64/32,","","\t        blockSize: 64/32","\t    });","","\t    // Swap bits across the left and right words","\t    function exchangeLR(offset, mask) {","\t        var t = ((this._lBlock >>> offset) ^ this._rBlock) & mask;","\t        this._rBlock ^= t;","\t        this._lBlock ^= t << offset;","\t    }","","\t    function exchangeRL(offset, mask) {","\t        var t = ((this._rBlock >>> offset) ^ this._lBlock) & mask;","\t        this._lBlock ^= t;","\t        this._rBlock ^= t << offset;","\t    }","","\t    /**","\t     * Shortcut functions to the cipher's object interface.","\t     *","\t     * @example","\t     *","\t     *     var ciphertext = CryptoJS.DES.encrypt(message, key, cfg);","\t     *     var plaintext  = CryptoJS.DES.decrypt(ciphertext, key, cfg);","\t     */","\t    C.DES = BlockCipher._createHelper(DES);","","\t    /**","\t     * Triple-DES block cipher algorithm.","\t     */","\t    var TripleDES = C_algo.TripleDES = BlockCipher.extend({","\t        _doReset: function () {","\t            // Shortcuts","\t            var key = this._key;","\t            var keyWords = key.words;","","\t            // Create DES instances","\t            this._des1 = DES.createEncryptor(WordArray.create(keyWords.slice(0, 2)));","\t            this._des2 = DES.createEncryptor(WordArray.create(keyWords.slice(2, 4)));","\t            this._des3 = DES.createEncryptor(WordArray.create(keyWords.slice(4, 6)));","\t        },","","\t        encryptBlock: function (M, offset) {","\t            this._des1.encryptBlock(M, offset);","\t            this._des2.decryptBlock(M, offset);","\t            this._des3.encryptBlock(M, offset);","\t        },","","\t        decryptBlock: function (M, offset) {","\t            this._des3.decryptBlock(M, offset);","\t            this._des2.encryptBlock(M, offset);","\t            this._des1.decryptBlock(M, offset);","\t        },","","\t        keySize: 192/32,","","\t        ivSize: 64/32,","","\t        blockSize: 64/32","\t    });","","\t    /**","\t     * Shortcut functions to the cipher's object interface.","\t     *","\t     * @example","\t     *","\t     *     var ciphertext = CryptoJS.TripleDES.encrypt(message, key, cfg);","\t     *     var plaintext  = CryptoJS.TripleDES.decrypt(ciphertext, key, cfg);","\t     */","\t    C.TripleDES = BlockCipher._createHelper(TripleDES);","\t}());","","","\treturn CryptoJS.TripleDES;","","}));","},{\"./cipher-core\":50,\"./core\":51,\"./enc-base64\":52,\"./evpkdf\":54,\"./md5\":59}],82:[function(require,module,exports){",";(function (root, factory) {","\tif (typeof exports === \"object\") {","\t\t// CommonJS","\t\tmodule.exports = exports = factory(require(\"./core\"));","\t}","\telse if (typeof define === \"function\" && define.amd) {","\t\t// AMD","\t\tdefine([\"./core\"], factory);","\t}","\telse {","\t\t// Global (browser)","\t\tfactory(root.CryptoJS);","\t}","}(this, function (CryptoJS) {","","\t(function (undefined) {","\t    // Shortcuts","\t    var C = CryptoJS;","\t    var C_lib = C.lib;","\t    var Base = C_lib.Base;","\t    var X32WordArray = C_lib.WordArray;","","\t    /**","\t     * x64 namespace.","\t     */","\t    var C_x64 = C.x64 = {};","","\t    /**","\t     * A 64-bit word.","\t     */","\t    var X64Word = C_x64.Word = Base.extend({","\t        /**","\t         * Initializes a newly created 64-bit word.","\t         *","\t         * @param {number} high The high 32 bits.","\t         * @param {number} low The low 32 bits.","\t         *","\t         * @example","\t         *","\t         *     var x64Word = CryptoJS.x64.Word.create(0x00010203, 0x04050607);","\t         */","\t        init: function (high, low) {","\t            this.high = high;","\t            this.low = low;","\t        }","","\t        /**","\t         * Bitwise NOTs this word.","\t         *","\t         * @return {X64Word} A new x64-Word object after negating.","\t         *","\t         * @example","\t         *","\t         *     var negated = x64Word.not();","\t         */","\t        // not: function () {","\t            // var high = ~this.high;","\t            // var low = ~this.low;","","\t            // return X64Word.create(high, low);","\t        // },","","\t        /**","\t         * Bitwise ANDs this word with the passed word.","\t         *","\t         * @param {X64Word} word The x64-Word to AND with this word.","\t         *","\t         * @return {X64Word} A new x64-Word object after ANDing.","\t         *","\t         * @example","\t         *","\t         *     var anded = x64Word.and(anotherX64Word);","\t         */","\t        // and: function (word) {","\t            // var high = this.high & word.high;","\t            // var low = this.low & word.low;","","\t            // return X64Word.create(high, low);","\t        // },","","\t        /**","\t         * Bitwise ORs this word with the passed word.","\t         *","\t         * @param {X64Word} word The x64-Word to OR with this word.","\t         *","\t         * @return {X64Word} A new x64-Word object after ORing.","\t         *","\t         * @example","\t         *","\t         *     var ored = x64Word.or(anotherX64Word);","\t         */","\t        // or: function (word) {","\t            // var high = this.high | word.high;","\t            // var low = this.low | word.low;","","\t            // return X64Word.create(high, low);","\t        // },","","\t        /**","\t         * Bitwise XORs this word with the passed word.","\t         *","\t         * @param {X64Word} word The x64-Word to XOR with this word.","\t         *","\t         * @return {X64Word} A new x64-Word object after XORing.","\t         *","\t         * @example","\t         *","\t         *     var xored = x64Word.xor(anotherX64Word);","\t         */","\t        // xor: function (word) {","\t            // var high = this.high ^ word.high;","\t            // var low = this.low ^ word.low;","","\t            // return X64Word.create(high, low);","\t        // },","","\t        /**","\t         * Shifts this word n bits to the left.","\t         *","\t         * @param {number} n The number of bits to shift.","\t         *","\t         * @return {X64Word} A new x64-Word object after shifting.","\t         *","\t         * @example","\t         *","\t         *     var shifted = x64Word.shiftL(25);","\t         */","\t        // shiftL: function (n) {","\t            // if (n < 32) {","\t                // var high = (this.high << n) | (this.low >>> (32 - n));","\t                // var low = this.low << n;","\t            // } else {","\t                // var high = this.low << (n - 32);","\t                // var low = 0;","\t            // }","","\t            // return X64Word.create(high, low);","\t        // },","","\t        /**","\t         * Shifts this word n bits to the right.","\t         *","\t         * @param {number} n The number of bits to shift.","\t         *","\t         * @return {X64Word} A new x64-Word object after shifting.","\t         *","\t         * @example","\t         *","\t         *     var shifted = x64Word.shiftR(7);","\t         */","\t        // shiftR: function (n) {","\t            // if (n < 32) {","\t                // var low = (this.low >>> n) | (this.high << (32 - n));","\t                // var high = this.high >>> n;","\t            // } else {","\t                // var low = this.high >>> (n - 32);","\t                // var high = 0;","\t            // }","","\t            // return X64Word.create(high, low);","\t        // },","","\t        /**","\t         * Rotates this word n bits to the left.","\t         *","\t         * @param {number} n The number of bits to rotate.","\t         *","\t         * @return {X64Word} A new x64-Word object after rotating.","\t         *","\t         * @example","\t         *","\t         *     var rotated = x64Word.rotL(25);","\t         */","\t        // rotL: function (n) {","\t            // return this.shiftL(n).or(this.shiftR(64 - n));","\t        // },","","\t        /**","\t         * Rotates this word n bits to the right.","\t         *","\t         * @param {number} n The number of bits to rotate.","\t         *","\t         * @return {X64Word} A new x64-Word object after rotating.","\t         *","\t         * @example","\t         *","\t         *     var rotated = x64Word.rotR(7);","\t         */","\t        // rotR: function (n) {","\t            // return this.shiftR(n).or(this.shiftL(64 - n));","\t        // },","","\t        /**","\t         * Adds this word with the passed word.","\t         *","\t         * @param {X64Word} word The x64-Word to add with this word.","\t         *","\t         * @return {X64Word} A new x64-Word object after adding.","\t         *","\t         * @example","\t         *","\t         *     var added = x64Word.add(anotherX64Word);","\t         */","\t        // add: function (word) {","\t            // var low = (this.low + word.low) | 0;","\t            // var carry = (low >>> 0) < (this.low >>> 0) ? 1 : 0;","\t            // var high = (this.high + word.high + carry) | 0;","","\t            // return X64Word.create(high, low);","\t        // }","\t    });","","\t    /**","\t     * An array of 64-bit words.","\t     *","\t     * @property {Array} words The array of CryptoJS.x64.Word objects.","\t     * @property {number} sigBytes The number of significant bytes in this word array.","\t     */","\t    var X64WordArray = C_x64.WordArray = Base.extend({","\t        /**","\t         * Initializes a newly created word array.","\t         *","\t         * @param {Array} words (Optional) An array of CryptoJS.x64.Word objects.","\t         * @param {number} sigBytes (Optional) The number of significant bytes in the words.","\t         *","\t         * @example","\t         *","\t         *     var wordArray = CryptoJS.x64.WordArray.create();","\t         *","\t         *     var wordArray = CryptoJS.x64.WordArray.create([","\t         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),","\t         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)","\t         *     ]);","\t         *","\t         *     var wordArray = CryptoJS.x64.WordArray.create([","\t         *         CryptoJS.x64.Word.create(0x00010203, 0x04050607),","\t         *         CryptoJS.x64.Word.create(0x18191a1b, 0x1c1d1e1f)","\t         *     ], 10);","\t         */","\t        init: function (words, sigBytes) {","\t            words = this.words = words || [];","","\t            if (sigBytes != undefined) {","\t                this.sigBytes = sigBytes;","\t            } else {","\t                this.sigBytes = words.length * 8;","\t            }","\t        },","","\t        /**","\t         * Converts this 64-bit word array to a 32-bit word array.","\t         *","\t         * @return {CryptoJS.lib.WordArray} This word array's data as a 32-bit word array.","\t         *","\t         * @example","\t         *","\t         *     var x32WordArray = x64WordArray.toX32();","\t         */","\t        toX32: function () {","\t            // Shortcuts","\t            var x64Words = this.words;","\t            var x64WordsLength = x64Words.length;","","\t            // Convert","\t            var x32Words = [];","\t            for (var i = 0; i < x64WordsLength; i++) {","\t                var x64Word = x64Words[i];","\t                x32Words.push(x64Word.high);","\t                x32Words.push(x64Word.low);","\t            }","","\t            return X32WordArray.create(x32Words, this.sigBytes);","\t        },","","\t        /**","\t         * Creates a copy of this word array.","\t         *","\t         * @return {X64WordArray} The clone.","\t         *","\t         * @example","\t         *","\t         *     var clone = x64WordArray.clone();","\t         */","\t        clone: function () {","\t            var clone = Base.clone.call(this);","","\t            // Clone \"words\" array","\t            var words = clone.words = this.words.slice(0);","","\t            // Clone each X64Word object","\t            var wordsLength = words.length;","\t            for (var i = 0; i < wordsLength; i++) {","\t                words[i] = words[i].clone();","\t            }","","\t            return clone;","\t        }","\t    });","\t}());","","","\treturn CryptoJS;","","}));","},{\"./core\":51}],83:[function(require,module,exports){","/*! https://mths.be/utf8js v2.0.0 by @mathias */",";(function(root) {","","\t// Detect free variables `exports`","\tvar freeExports = typeof exports == 'object' && exports;","","\t// Detect free variable `module`","\tvar freeModule = typeof module == 'object' && module &&","\t\tmodule.exports == freeExports && module;","","\t// Detect free variable `global`, from Node.js or Browserified code,","\t// and use it as `root`","\tvar freeGlobal = typeof global == 'object' && global;","\tif (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {","\t\troot = freeGlobal;","\t}","","\t/*--------------------------------------------------------------------------*/","","\tvar stringFromCharCode = String.fromCharCode;","","\t// Taken from https://mths.be/punycode","\tfunction ucs2decode(string) {","\t\tvar output = [];","\t\tvar counter = 0;","\t\tvar length = string.length;","\t\tvar value;","\t\tvar extra;","\t\twhile (counter < length) {","\t\t\tvalue = string.charCodeAt(counter++);","\t\t\tif (value >= 0xD800 && value <= 0xDBFF && counter < length) {","\t\t\t\t// high surrogate, and there is a next character","\t\t\t\textra = string.charCodeAt(counter++);","\t\t\t\tif ((extra & 0xFC00) == 0xDC00) { // low surrogate","\t\t\t\t\toutput.push(((value & 0x3FF) << 10) + (extra & 0x3FF) + 0x10000);","\t\t\t\t} else {","\t\t\t\t\t// unmatched surrogate; only append this code unit, in case the next","\t\t\t\t\t// code unit is the high surrogate of a surrogate pair","\t\t\t\t\toutput.push(value);","\t\t\t\t\tcounter--;","\t\t\t\t}","\t\t\t} else {","\t\t\t\toutput.push(value);","\t\t\t}","\t\t}","\t\treturn output;","\t}","","\t// Taken from https://mths.be/punycode","\tfunction ucs2encode(array) {","\t\tvar length = array.length;","\t\tvar index = -1;","\t\tvar value;","\t\tvar output = '';","\t\twhile (++index < length) {","\t\t\tvalue = array[index];","\t\t\tif (value > 0xFFFF) {","\t\t\t\tvalue -= 0x10000;","\t\t\t\toutput += stringFromCharCode(value >>> 10 & 0x3FF | 0xD800);","\t\t\t\tvalue = 0xDC00 | value & 0x3FF;","\t\t\t}","\t\t\toutput += stringFromCharCode(value);","\t\t}","\t\treturn output;","\t}","","\tfunction checkScalarValue(codePoint) {","\t\tif (codePoint >= 0xD800 && codePoint <= 0xDFFF) {","\t\t\tthrow Error(","\t\t\t\t'Lone surrogate U+' + codePoint.toString(16).toUpperCase() +","\t\t\t\t' is not a scalar value'","\t\t\t);","\t\t}","\t}","\t/*--------------------------------------------------------------------------*/","","\tfunction createByte(codePoint, shift) {","\t\treturn stringFromCharCode(((codePoint >> shift) & 0x3F) | 0x80);","\t}","","\tfunction encodeCodePoint(codePoint) {","\t\tif ((codePoint & 0xFFFFFF80) == 0) { // 1-byte sequence","\t\t\treturn stringFromCharCode(codePoint);","\t\t}","\t\tvar symbol = '';","\t\tif ((codePoint & 0xFFFFF800) == 0) { // 2-byte sequence","\t\t\tsymbol = stringFromCharCode(((codePoint >> 6) & 0x1F) | 0xC0);","\t\t}","\t\telse if ((codePoint & 0xFFFF0000) == 0) { // 3-byte sequence","\t\t\tcheckScalarValue(codePoint);","\t\t\tsymbol = stringFromCharCode(((codePoint >> 12) & 0x0F) | 0xE0);","\t\t\tsymbol += createByte(codePoint, 6);","\t\t}","\t\telse if ((codePoint & 0xFFE00000) == 0) { // 4-byte sequence","\t\t\tsymbol = stringFromCharCode(((codePoint >> 18) & 0x07) | 0xF0);","\t\t\tsymbol += createByte(codePoint, 12);","\t\t\tsymbol += createByte(codePoint, 6);","\t\t}","\t\tsymbol += stringFromCharCode((codePoint & 0x3F) | 0x80);","\t\treturn symbol;","\t}","","\tfunction utf8encode(string) {","\t\tvar codePoints = ucs2decode(string);","\t\tvar length = codePoints.length;","\t\tvar index = -1;","\t\tvar codePoint;","\t\tvar byteString = '';","\t\twhile (++index < length) {","\t\t\tcodePoint = codePoints[index];","\t\t\tbyteString += encodeCodePoint(codePoint);","\t\t}","\t\treturn byteString;","\t}","","\t/*--------------------------------------------------------------------------*/","","\tfunction readContinuationByte() {","\t\tif (byteIndex >= byteCount) {","\t\t\tthrow Error('Invalid byte index');","\t\t}","","\t\tvar continuationByte = byteArray[byteIndex] & 0xFF;","\t\tbyteIndex++;","","\t\tif ((continuationByte & 0xC0) == 0x80) {","\t\t\treturn continuationByte & 0x3F;","\t\t}","","\t\t// If we end up here, it’s not a continuation byte","\t\tthrow Error('Invalid continuation byte');","\t}","","\tfunction decodeSymbol() {","\t\tvar byte1;","\t\tvar byte2;","\t\tvar byte3;","\t\tvar byte4;","\t\tvar codePoint;","","\t\tif (byteIndex > byteCount) {","\t\t\tthrow Error('Invalid byte index');","\t\t}","","\t\tif (byteIndex == byteCount) {","\t\t\treturn false;","\t\t}","","\t\t// Read first byte","\t\tbyte1 = byteArray[byteIndex] & 0xFF;","\t\tbyteIndex++;","","\t\t// 1-byte sequence (no continuation bytes)","\t\tif ((byte1 & 0x80) == 0) {","\t\t\treturn byte1;","\t\t}","","\t\t// 2-byte sequence","\t\tif ((byte1 & 0xE0) == 0xC0) {","\t\t\tvar byte2 = readContinuationByte();","\t\t\tcodePoint = ((byte1 & 0x1F) << 6) | byte2;","\t\t\tif (codePoint >= 0x80) {","\t\t\t\treturn codePoint;","\t\t\t} else {","\t\t\t\tthrow Error('Invalid continuation byte');","\t\t\t}","\t\t}","","\t\t// 3-byte sequence (may include unpaired surrogates)","\t\tif ((byte1 & 0xF0) == 0xE0) {","\t\t\tbyte2 = readContinuationByte();","\t\t\tbyte3 = readContinuationByte();","\t\t\tcodePoint = ((byte1 & 0x0F) << 12) | (byte2 << 6) | byte3;","\t\t\tif (codePoint >= 0x0800) {","\t\t\t\tcheckScalarValue(codePoint);","\t\t\t\treturn codePoint;","\t\t\t} else {","\t\t\t\tthrow Error('Invalid continuation byte');","\t\t\t}","\t\t}","","\t\t// 4-byte sequence","\t\tif ((byte1 & 0xF8) == 0xF0) {","\t\t\tbyte2 = readContinuationByte();","\t\t\tbyte3 = readContinuationByte();","\t\t\tbyte4 = readContinuationByte();","\t\t\tcodePoint = ((byte1 & 0x0F) << 0x12) | (byte2 << 0x0C) |","\t\t\t\t(byte3 << 0x06) | byte4;","\t\t\tif (codePoint >= 0x010000 && codePoint <= 0x10FFFF) {","\t\t\t\treturn codePoint;","\t\t\t}","\t\t}","","\t\tthrow Error('Invalid UTF-8 detected');","\t}","","\tvar byteArray;","\tvar byteCount;","\tvar byteIndex;","\tfunction utf8decode(byteString) {","\t\tbyteArray = ucs2decode(byteString);","\t\tbyteCount = byteArray.length;","\t\tbyteIndex = 0;","\t\tvar codePoints = [];","\t\tvar tmp;","\t\twhile ((tmp = decodeSymbol()) !== false) {","\t\t\tcodePoints.push(tmp);","\t\t}","\t\treturn ucs2encode(codePoints);","\t}","","\t/*--------------------------------------------------------------------------*/","","\tvar utf8 = {","\t\t'version': '2.0.0',","\t\t'encode': utf8encode,","\t\t'decode': utf8decode","\t};","","\t// Some AMD build optimizers, like r.js, check for specific condition patterns","\t// like the following:","\tif (","\t\ttypeof define == 'function' &&","\t\ttypeof define.amd == 'object' &&","\t\tdefine.amd","\t) {","\t\tdefine(function() {","\t\t\treturn utf8;","\t\t});","\t}\telse if (freeExports && !freeExports.nodeType) {","\t\tif (freeModule) { // in Node.js or RingoJS v0.8.0+","\t\t\tfreeModule.exports = utf8;","\t\t} else { // in Narwhal or RingoJS v0.7.0-","\t\t\tvar object = {};","\t\t\tvar hasOwnProperty = object.hasOwnProperty;","\t\t\tfor (var key in utf8) {","\t\t\t\thasOwnProperty.call(utf8, key) && (freeExports[key] = utf8[key]);","\t\t\t}","\t\t}","\t} else { // in Rhino or a web browser","\t\troot.utf8 = utf8;","\t}","","}(this));","","},{}],\"bignumber.js\":[function(require,module,exports){","'use strict';","","module.exports = BigNumber; // jshint ignore:line","","","},{}],\"web3\":[function(require,module,exports){","var Web3 = require('./lib/web3');","","// dont override global variable","if (typeof window !== 'undefined' && typeof window.Web3 === 'undefined') {","    window.Web3 = Web3;","}","","module.exports = Web3;","","},{\"./lib/web3\":22}]},{},[\"web3\"])","//# sourceMappingURL=web3-light.js.map",""],"id":1}]]},"ace":{"folds":[],"scrolltop":12854.5,"scrollleft":0,"selection":{"start":{"row":931,"column":25},"end":{"row":931,"column":29},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":917,"state":"comment_regex_allowed","mode":"ace/mode/javascript"}},"timestamp":1449156821959,"hash":"d9ef77632b259499eed14c4bae040271da82a1ac"}